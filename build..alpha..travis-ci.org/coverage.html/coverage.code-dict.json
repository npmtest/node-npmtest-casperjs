{"/home/travis/build/npmtest/node-npmtest-casperjs/test.js":"/* istanbul instrument in package npmtest_casperjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-casperjs/lib.npmtest_casperjs.js":"/* istanbul instrument in package npmtest_casperjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_casperjs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_casperjs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-casperjs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-casperjs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_casperjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_casperjs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_casperjs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_casperjs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_casperjs.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_casperjs.__dirname + '/lib.npmtest_casperjs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-casperjs/node_modules/casperjs/bin/casperjs":"#!/usr/bin/env python\n\nimport os\nimport shlex\nimport sys\n\ndef resolve(path):\n    if os.path.islink(path):\n        path = os.path.join(os.path.dirname(path), os.readlink(path))\n        return resolve(path)\n    return path\n\nSUPPORTED_ENGINES = {\n    'phantomjs' : {\n        'native_args': [\n            'cookies-file',\n            'config',\n            'debug',\n            'disk-cache',\n            'disk-cache-path',\n            'ignore-ssl-errors',\n            'load-images',\n            'load-plugins',\n            'local-storage-path',\n            'local-storage-quota',\n            'local-to-remote-url-access',\n            'max-disk-cache-size',\n            'output-encoding',\n            'proxy',\n            'proxy-auth',\n            'proxy-type',\n            'remote-debugger-port',\n            'remote-debugger-autorun',\n            'script-encoding',\n            'ssl-protocol',\n            'ssl-certificates-path',\n            'web-security',\n            'webdriver',\n            'webdriver-logfile',\n            'webdriver-loglevel'\n            'webdriver-selenium-grid-hub',\n            'wd',\n            'w',\n        ],\n        'env_varname': 'PHANTOMJS_EXECUTABLE',\n        'default_exec' : 'phantomjs'\n    },\n    'slimerjs': {\n        'native_args': [\n            '-P',\n            '-jsconsole',\n            '-CreateProfile',\n            '-profile',\n            #phantomjs options\n            'cookies-file',\n            'config',\n            'debug',\n            'disk-cache',\n            'ignore-ssl-errors',\n            'load-images',\n            'load-plugins',\n            'local-storage-path',\n            'local-storage-quota',\n            'local-to-remote-url-access',\n            'max-disk-cache-size',\n            'output-encoding',\n            'proxy',\n            'proxy-auth',\n            'proxy-type',\n            'remote-debugger-port',\n            'remote-debugger-autorun',\n            'script-encoding',\n            'ssl-protocol',\n            'ssl-certificates-path',\n            'web-security',\n            'webdriver',\n            'webdriver-logfile',\n            'webdriver-loglevel'\n            'webdriver-selenium-grid-hub',\n            'wd',\n            'w',\n        ],\n        'env_varname': 'SLIMERJS_EXECUTABLE',\n        'default_exec' : 'slimerjs'\n    },\n}\n\nENGINE = os.environ.get('CASPERJS_ENGINE', 'phantomjs')\nENGINE_ARGS = shlex.split(os.environ.get('ENGINE_FLAGS', ''))\nENGINE_NATIVE_ARGS = []\nENGINE_EXECUTABLE = ''\n\nCASPER_ARGS = []\nCASPER_PATH = os.path.abspath(os.path.join(os.path.dirname(resolve(__file__)),\n                                           '..'))\nSYS_ARGS = sys.argv[1:]\n\n# retrieve the engine name\nfor arg in SYS_ARGS:\n    if arg.startswith('--engine='):\n        ENGINE = arg[9:].lower()\n        break\n\nif not ENGINE in SUPPORTED_ENGINES:\n    print('Bad engine name. Only phantomjs and slimerjs are supported')\n    sys.exit(1)\n\nENGINE_NATIVE_ARGS = SUPPORTED_ENGINES[ENGINE]['native_args']\nENGINE_EXECUTABLE = os.environ.get(SUPPORTED_ENGINES[ENGINE]['env_varname'],\n                                   os.environ.get('ENGINE_EXECUTABLE',\n                                       SUPPORTED_ENGINES[ENGINE]['default_exec']))\n\ndef extract_arg_name(arg):\n    \"parse out any option name\"\n    try:\n        return arg.split('=', 1)[0].replace('--', '', 1)\n    except IndexError:\n        return arg\n\nfor arg in SYS_ARGS:\n    arg_name = extract_arg_name(arg)\n    found = False\n    for native in ENGINE_NATIVE_ARGS:\n        if arg_name == native:\n            ENGINE_ARGS.append(arg)\n            found = True\n    if not found and arg_name != 'engine':\n        CASPER_ARGS.append(arg)\n\nCASPER_COMMAND = [ENGINE_EXECUTABLE]\nCASPER_COMMAND.extend(ENGINE_ARGS)\nCASPER_COMMAND.extend([\n    os.path.join(CASPER_PATH, 'bin', 'bootstrap.js'),\n    '--casper-path=%s' % CASPER_PATH,\n    '--cli'\n])\nCASPER_COMMAND.extend(CASPER_ARGS)\n\ntry:\n    # print(CASPER_COMMAND)\n    os.execvp(CASPER_COMMAND[0], CASPER_COMMAND)\nexcept OSError as err:\n    print('Fatal: %s; did you install %s?' % (err, ENGINE))\n    sys.exit(1)\n","/home/travis/build/npmtest/node-npmtest-casperjs/node_modules/casperjs/bin/bootstrap.js":"/*!\n * Casper is a navigation utility for PhantomJS.\n *\n * Documentation: http://casperjs.org/\n * Repository:    http://github.com/casperjs/casperjs\n *\n * Copyright (c) 2011-2012 Nicolas Perriault\n *\n * Part of source code is Copyright Joyent, Inc. and other Node contributors.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n/*eslint max-statements:0, complexity:0*/\n\n// node check\nif ('process' in this && this.process.title === \"node\") {\n    console.error('CasperJS cannot be executed within a nodejs environment');\n    this.process.exit(1);\n}\n\n// phantom check\nif (!('phantom' in this)) {\n    console.error('CasperJS needs to be executed in a PhantomJS environment http://phantomjs.org/');\n}\n\n// Common polyfills\n\n// cujos bind shim instead of MDN shim, see #1396\nvar isFunction = function(o) {\n  return 'function' === typeof o;\n};\nvar bind;\nvar slice = [].slice;\nvar proto = Function.prototype;\nvar featureMap = {\n  'function-bind': 'bind'\n};\nfunction has(feature) {\n  var prop = featureMap[feature];\n  return isFunction(proto[prop]);\n}\n// check for missing features\nif (!has('function-bind')) {\n  // adapted from Mozilla Developer Network example at\n  // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind\n  bind = function bind(obj) {\n    var args = slice.call(arguments, 1),\n      self = this,\n      nop = function() {\n      },\n      bound = function() {\n        return self.apply(this instanceof nop ? this : (obj || {}), args.concat(slice.call(arguments)));\n      };\n    nop.prototype = this.prototype || {}; // Firefox cries sometimes if prototype is undefined\n    bound.prototype = new nop();\n    return bound;\n  };\n  proto.bind = bind;\n}\n\n// Custom base error\nvar CasperError = function CasperError(msg) {\n    \"use strict\";\n    Error.call(this);\n    this.message = msg;\n    this.name = 'CasperError';\n};\nCasperError.prototype = Object.getPrototypeOf(new Error());\n\n// casperjs env initialization\n(function(global, phantom, system){\n    \"use strict\";\n    // phantom args\n    var phantomArgs = system.args.slice(1);\n\n    if (\"slimer\" in global) {\n        phantom.casperEngine = \"slimerjs\";\n    } else {\n        phantom.casperEngine = \"phantomjs\";\n    }\n\n    if (phantom.casperLoaded) {\n        return;\n    }\n\n    function __exit(statusCode){\n        setTimeout(function() { phantom.exit(statusCode); }, 0);\n    }\n\n    function __die(message) {\n        if (message) {\n            console.error(message);\n        }\n        __exit(1);\n    }\n\n    function __terminate(message) {\n        if (message) {\n            console.log(message);\n        }\n        __exit();\n    }\n\n    (function (version) {\n        // required version check\n        if (phantom.casperEngine === 'phantomjs') {\n            if (version.major === 1) {\n                if (version.minor < 9) {\n                    return __die('CasperJS needs at least PhantomJS v1.9 or later.');\n                }\n                if (version.minor === 9 && version.patch < 1) {\n                    return __die('CasperJS needs at least PhantomJS v1.9.1 or later.');\n                }\n            } else if (version.major === 2) {\n                // No requirements yet known\n            } else {\n                return __die('CasperJS needs PhantomJS v1.9.x or v2.x');\n            }\n        }\n    })(phantom.version);\n\n    // Hooks in default phantomjs error handler\n    phantom.onError = function onPhantomError(msg, trace) {\n        phantom.defaultErrorHandler.apply(phantom, arguments);\n        // print a hint when a possible casperjs command misuse is detected\n        if (msg.indexOf(\"ReferenceError: Can't find variable: casper\") === 0) {\n            console.error('Hint: you may want to use the `casperjs test` command.');\n        }\n        // exits on syntax error\n        if (msg.indexOf('SyntaxError: ') === 0) {\n            __die();\n        }\n    };\n\n    // Patching fs\n    var fs = (function patchFs(fs) {\n        if (!fs.hasOwnProperty('basename')) {\n            fs.basename = function basename(path) {\n                return path.replace(/.*\\//, '');\n            };\n        }\n        if (!fs.hasOwnProperty('dirname')) {\n            fs.dirname = function dirname(path) {\n                if (!path) return undefined;\n                return path.toString().replace(/\\\\/g, '/').replace(/\\/[^\\/]*$/, '');\n            };\n        }\n        if (!fs.hasOwnProperty('isWindows')) {\n            fs.isWindows = function isWindows() {\n                var testPath = arguments[0] || this.workingDirectory;\n                return (/^[a-z]{1,2}:/i).test(testPath) || testPath.indexOf(\"\\\\\\\\\") === 0;\n            };\n        }\n        if (fs.hasOwnProperty('joinPath')) {\n            fs.pathJoin = fs.joinPath;\n        } else if (!fs.hasOwnProperty('pathJoin')) {\n            fs.pathJoin = function pathJoin() {\n                return Array.prototype.filter.call(arguments,function(elm){\n                    return typeof elm !== \"undefined\" && elm !== null;\n                }).join('/');\n            };\n        }\n        return fs;\n    })(require('fs'));\n\n    // CasperJS root path\n    if (!phantom.casperPath) {\n        try {\n            phantom.casperPath = phantomArgs.map(function _map(arg) {\n                var match = arg.match(/^--casper-path=(.*)/);\n                if (match) {\n                    return fs.absolute(match[1]);\n                }\n            }).filter(function _filter(path) {\n                return fs.isDirectory(path);\n            }).pop();\n        } catch (e) {\n            return __die(\"Couldn't find nor compute phantom.casperPath, exiting.\");\n        }\n    }\n\n    /**\n     * Prints CasperJS help.\n     */\n    function printHelp() {\n        /* global slimer */\n        var engine = phantom.casperEngine === 'slimerjs' ? slimer : phantom;\n        var version = [engine.version.major, engine.version.minor, engine.version.patch].join('.');\n        return __terminate([\n            'CasperJS version ' + phantom.casperVersion.toString() +\n            ' at ' + phantom.casperPath + ', using ' + phantom.casperEngine + ' version ' + version,\n            fs.read(fs.pathJoin(phantom.casperPath, 'bin', 'usage.txt'))\n        ].join('\\n'));\n    }\n\n    /**\n     * Patched require to allow loading of native casperjs modules.\n     * Every casperjs module have to first call this function in order to\n     * load a native casperjs module:\n     *\n     *     var require = patchRequire(require);\n     *     var utils = require('utils');\n     *\n     * Useless for SlimerJS\n     */\n    function patchRequire(require) {\n        if (require.patched) {\n            return require;\n        }\n        function fromPackageJson(module, dir) {\n            var pkgPath, pkgContents, pkg;\n            pkgPath = fs.pathJoin(dir, module, 'package.json');\n            if (!fs.exists(pkgPath)) {\n                return;\n            }\n            pkgContents = fs.read(pkgPath);\n            if (!pkgContents) {\n                return;\n            }\n            try {\n                pkg = JSON.parse(pkgContents);\n            } catch (e) {\n                return;\n            }\n            if (typeof pkg === \"object\" && pkg.main) {\n                return fs.absolute(fs.pathJoin(dir, module, pkg.main));\n            }\n        }\n        function resolveFile(path, dir) {\n            var extensions = ['js', 'coffee', 'json'];\n            var basenames = [path, path + '/index'];\n            var paths = [];\n            var nodejsScript = fromPackageJson(path, dir);\n            if (nodejsScript) {\n                return nodejsScript;\n            }\n            basenames.forEach(function(basename) {\n                paths.push(fs.absolute(fs.pathJoin(dir, basename)));\n                extensions.forEach(function(extension) {\n                    paths.push(fs.absolute(fs.pathJoin(dir, [basename, extension].join('.'))));\n                });\n            });\n            for (var i = 0; i < paths.length; i++) {\n                if (fs.isFile(paths[i])) {\n                    return paths[i];\n                }\n            }\n            return null;\n        }\n        function getCurrentScriptRoot() {\n            if ((phantom.casperScriptBaseDir || \"\").indexOf(fs.workingDirectory) === 0) {\n                return phantom.casperScriptBaseDir;\n            }\n            return fs.absolute(fs.pathJoin(fs.workingDirectory, phantom.casperScriptBaseDir));\n        }\n        function casperBuiltinPath(path) {\n            return resolveFile(path, fs.pathJoin(phantom.casperPath, 'modules'));\n        }\n        function nodeModulePath(path) {\n            var resolved, prevBaseDir;\n            var baseDir = getCurrentScriptRoot();\n            do {\n                resolved = resolveFile(path, fs.pathJoin(baseDir, 'node_modules'));\n                prevBaseDir = baseDir;\n                baseDir = fs.absolute(fs.pathJoin(prevBaseDir, '..'));\n            } while (!resolved && baseDir !== '/' && prevBaseDir !== '/' && baseDir !== prevBaseDir);\n            return resolved;\n        }\n        function localModulePath(path) {\n            return resolveFile(path, phantom.casperScriptBaseDir || fs.workingDirectory);\n        }\n        var patchedRequire = function patchedRequire(path) {\n            try {\n                return require(casperBuiltinPath(path) ||\n                               nodeModulePath(path)    ||\n                               localModulePath(path)   ||\n                               path);\n            } catch (e) {\n                throw new CasperError(\"Can't find module \" + path);\n            }\n        };\n        patchedRequire.cache = require.cache;\n        patchedRequire.extensions = require.extensions;\n        patchedRequire.stubs = require.stubs;\n        patchedRequire.patched = true;\n        return patchedRequire;\n    }\n\n    /**\n     * Initializes the CasperJS Command Line Interface.\n     */\n    function initCasperCli(casperArgs) {\n        /*eslint complexity:0*/\n        var baseTestsPath = fs.pathJoin(phantom.casperPath, 'tests');\n\n        function setScriptBaseDir(scriptName) {\n            var dir = fs.dirname(scriptName);\n            if (dir === scriptName) {\n                dir = '.';\n            }\n            phantom.casperScriptBaseDir = dir;\n        }\n\n        if (!!casperArgs.options.version) {\n            return __terminate(phantom.casperVersion.toString());\n        } else if (casperArgs.get(0) === \"test\") {\n            phantom.casperScript = fs.absolute(fs.pathJoin(baseTestsPath, 'run.js'));\n            phantom.casperTest = true;\n            casperArgs.drop(\"test\");\n            setScriptBaseDir(casperArgs.get(0));\n        } else if (casperArgs.get(0) === \"selftest\") {\n            phantom.casperScript = fs.absolute(fs.pathJoin(baseTestsPath, 'run.js'));\n            phantom.casperSelfTest = phantom.casperTest = true;\n            casperArgs.options.includes = fs.pathJoin(baseTestsPath, 'selftest.js');\n            if (casperArgs.args.length <= 1) {\n                casperArgs.args.push(fs.pathJoin(baseTestsPath, 'suites'));\n            }\n            casperArgs.drop(\"selftest\");\n            phantom.casperScriptBaseDir = fs.dirname(casperArgs.get(1) || fs.dirname(phantom.casperScript));\n        } else if (casperArgs.args.length === 0 || !!casperArgs.options.help) {\n            return printHelp();\n        }\n\n        if (!phantom.casperScript) {\n            phantom.casperScript = casperArgs.get(0);\n        }\n\n        if (phantom.casperScript !== \"/dev/stdin\" && !fs.isFile(phantom.casperScript)) {\n            return __die('Unable to open file: ' + phantom.casperScript);\n        }\n\n        if (!phantom.casperScriptBaseDir) {\n            setScriptBaseDir(phantom.casperScript);\n        }\n\n        // filter out the called script name from casper args\n        casperArgs.drop(phantom.casperScript);\n    }\n\n    // CasperJS version, extracted from package.json - see http://semver.org/\n    phantom.casperVersion = (function getCasperVersion(path) {\n        var parts, patchPart, pkg, pkgFile;\n        pkgFile = fs.absolute(fs.pathJoin(path, 'package.json'));\n        if (!fs.exists(pkgFile)) {\n            throw new CasperError('Cannot find package.json at ' + pkgFile);\n        }\n        try {\n            pkg = JSON.parse(require('fs').read(pkgFile));\n        } catch (e) {\n            throw new CasperError('Cannot read package file contents: ' + e);\n        }\n        parts  = pkg.version.trim().split(\".\");\n        if (parts.length < 3) {\n            throw new CasperError(\"Invalid version number\");\n        }\n        patchPart = parts[2].split('-');\n        return {\n            major: ~~parts[0]       || 0,\n            minor: ~~parts[1]       || 0,\n            patch: ~~patchPart[0]   || 0,\n            ident: patchPart[1]     || \"\",\n            toString: function toString() {\n                var version = [this.major, this.minor, this.patch].join('.');\n                if (this.ident) {\n                    version = [version, this.ident].join('-');\n                }\n                return version;\n            }\n        };\n    })(phantom.casperPath);\n\n    // phantomjs2 has paths in require, but needs patchRequire anyway\n    if (!(\"paths\" in global.require) ||\n        ('phantomjs' === phantom.casperEngine && 1 < phantom.version.major)\n    ) {\n        global.__require = require;\n        global.patchRequire = patchRequire; // must be called in every casperjs module as of 1.1\n        global.require = patchRequire(global.require);\n    } else {\n        // declare a dummy patchRequire function\n        global.patchRequire = function(req) {return req;};\n        require.paths.push(fs.pathJoin(phantom.casperPath, 'modules'));\n        require.paths.push(fs.workingDirectory);\n    }\n\n    if (phantom.casperEngine === 'slimerjs') {\n        require.globals.patchRequire = global.patchRequire;\n        require.globals.CasperError = CasperError;\n    }\n\n    // casper cli args\n    phantom.casperArgs = require('cli').parse(phantomArgs);\n\n    if (true === phantom.casperArgs.get('cli')) {\n        initCasperCli(phantom.casperArgs);\n    }\n\n    if (\"paths\" in global.require) {\n        if ((phantom.casperScriptBaseDir || \"\").indexOf(fs.workingDirectory) === 0) {\n            require.paths.push(phantom.casperScriptBaseDir);\n        } else {\n            require.paths.push(fs.pathJoin(fs.workingDirectory, phantom.casperScriptBaseDir));\n        }\n        require.paths.push(fs.pathJoin(require.paths[require.paths.length-1], 'node_modules'));\n    }\n\n    // casper loading status flag\n    phantom.casperLoaded = true;\n    if (phantom.version.major === 2\n        && phantom.casperScript\n        && phantom.casperScript.split('.').pop() === 'coffee'\n        ) {\n        return __terminate('CoffeeScript is not supported by PhantomJS > 2.');\n    }\n\n    // passed casperjs script execution\n    if (phantom.casperScript && !phantom.injectJs(phantom.casperScript)) {\n        return __die('Unable to load script ' + phantom.casperScript + '; check file syntax');\n    }\n})(this, phantom, require('system'));\n","/home/travis/build/npmtest/node-npmtest-casperjs/node_modules/casperjs/modules/casper.js":"/*!\n * Casper is a navigation utility for PhantomJS.\n *\n * Documentation: http://casperjs.org/\n * Repository:    http://github.com/casperjs/casperjs\n *\n * Copyright (c) 2011-2012 Nicolas Perriault\n *\n * Part of source code is Copyright Joyent, Inc. and other Node contributors.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n/*global __utils__, CasperError, console, exports, phantom, patchRequire, require:true*/\nvar require = patchRequire(require);\nvar colorizer = require('colorizer');\nvar events = require('events');\nvar fs = require('fs');\nvar http = require('http');\nvar mouse = require('mouse');\nvar pagestack = require('pagestack');\nvar qs = require('querystring');\nvar tester = require('tester');\nvar utils = require('utils');\nvar f = utils.format;\n\n\nvar defaultUserAgent = phantom.defaultPageSettings.userAgent\n    .replace(/(PhantomJS|SlimerJS)/, f(\"CasperJS/%s\", phantom.casperVersion) + '+$&');\n\nexports.create = function create(options) {\n    \"use strict\";\n    // This is a bit of a hack to check if one is trying to override the preconfigured\n    // casper instance from within a test environment.\n    if (phantom.casperTest && window.casper) {\n        console.error(\"Fatal: you can't override the preconfigured casper instance in a test environment.\");\n        console.error(\"Docs: http://docs.casperjs.org/en/latest/testing.html#test-command-args-and-options\");\n        phantom.exit(1);\n    }\n    return new Casper(options);\n};\n\n/**\n * Shortcut to build an XPath selector object.\n *\n * @param  String  expression  The XPath expression\n * @return Object\n * @see    http://casperjs.org/selectors.html\n */\nfunction selectXPath(expression) {\n    \"use strict\";\n    return {\n        type: 'xpath',\n        path: expression,\n        toString: function() {\n            return this.type + ' selector: ' + this.path;\n        }\n    };\n}\nexports.selectXPath = selectXPath;\n\n/**\n * Main Casper object.\n *\n * @param  Object  options  Casper options\n */\nvar Casper = function Casper(options) {\n    \"use strict\";\n    /*eslint max-statements:0*/\n    // init & checks\n    if (!(this instanceof Casper)) {\n        return new Casper(options);\n    }\n    // default options\n    this.defaults = {\n        clientScripts:       [],\n        colorizerType:       'Colorizer',\n        exitOnError:         true,\n        logLevel:            \"error\",\n        httpStatusHandlers:  {},\n        safeLogs:            true,\n        onAlert:             null,\n        onDie:               null,\n        onError:             null,\n        onLoadError:         null,\n        onPageInitialized:   null,\n        onResourceReceived:  null,\n        onResourceRequested: null,\n        onRunComplete:       function _onRunComplete() {\n            this.exit();\n        },\n        onStepComplete:      null,\n        onStepTimeout:       function _onStepTimeout(timeout, stepNum) {\n            this.die(\"Maximum step execution timeout exceeded for step \" + stepNum);\n        },\n        onTimeout:           function _onTimeout(timeout) {\n            this.die(f(\"Script timeout of %dms reached, exiting.\", timeout));\n        },\n        onWaitTimeout:       function _onWaitTimeout(timeout) {\n            this.die(f(\"Wait timeout of %dms expired, exiting.\", timeout));\n        },\n        page:                null,\n        pageSettings:        {\n            localToRemoteUrlAccessEnabled: true,\n            userAgent:                     defaultUserAgent\n        },\n        remoteScripts:       [],\n        silentErrors:        false,\n        stepTimeout:         null,\n        timeout:             null,\n        verbose:             false,\n        retryTimeout:        20,\n        waitTimeout:         5000,\n        clipRect : null,\n        viewportSize : null\n    };\n    // options\n    this.options = utils.mergeObjects(this.defaults, options);\n    // factories\n    this.cli = phantom.casperArgs;\n    this.options.logLevel = this.cli.get('log-level', this.options.logLevel);\n    if (!this.options.verbose) {\n        this.options.verbose = this.cli.has('direct') || this.cli.has('verbose');\n    }\n    this.colorizer = this.getColorizer();\n    this.mouse = mouse.create(this);\n    this.popups = pagestack.create();\n    // properties\n    this.checker = null;\n    this.currentResponse = {};\n    this.currentUrl = 'about:blank';\n    this.currentHTTPStatus = null;\n    this.history = [];\n    this.loadInProgress = false;\n    this.navigationRequested = false;\n    this.browserInitializing = false;\n    this.logFormats = {};\n    this.logLevels = [\"debug\", \"info\", \"warning\", \"error\"];\n    this.logStyles = {\n        debug:   'INFO',\n        info:    'PARAMETER',\n        warning: 'COMMENT',\n        error:   'ERROR'\n    };\n    this.page = null;\n    this.pendingWait = false;\n    this.requestUrl = 'about:blank';\n    this.resources = [];\n    this.result = {\n        log:    [],\n        status: \"success\",\n        time:   0\n    };\n    this.started = false;\n    this.step = -1;\n    this.steps = [];\n    this.waiters = [];\n    this._test = undefined;\n    this.__defineGetter__('test', function() {\n        if (!phantom.casperTest) {\n            throw new CasperError('casper.test property is only available using the `casperjs test` command');\n        }\n        if (!utils.isObject(this._test)) {\n            this._test = tester.create(this, {\n                concise: this.cli.get('concise')\n            });\n        }\n        return this._test;\n    });\n\n    // init phantomjs error handler\n    this.initErrorHandler();\n\n    this.on('error', function(msg, backtrace) {\n        var c = this.getColorizer();\n        var match = /^(.*): __mod_error(.*):: (.*)/.exec(msg);\n        var notices = [];\n        if (match && match.length === 4) {\n            notices.push('  in module ' + match[2]);\n            msg = match[3];\n        }\n        /* FIXME:\n        this leads to a recursive on('error'...) trigger,\n        at least in phantomjs2\n\n        console.error(c.colorize(msg, 'RED_BAR', 80));\n        notices.forEach(function(notice) {\n            console.error(c.colorize(notice, 'COMMENT'));\n        });\n        (backtrace || []).forEach(function(item) {\n            var message = fs.absolute(item.file) + \":\" + c.colorize(item.line, \"COMMENT\");\n            if (item['function']) {\n                message += \" in \" + c.colorize(item['function'], \"PARAMETER\");\n            }\n            console.error(\"  \" + message);\n        });\n        */\n    });\n\n    // deprecated feature event handler\n    this.on('deprecated', function onDeprecated(message) {\n        this.warn('[deprecated] ' + message);\n    });\n\n    // dispatching an event when instance has been constructed\n    this.emit('init');\n\n    // deprecated direct option\n    if (this.cli.has('direct')) {\n        this.emit(\"deprecated\", \"--direct option has been deprecated since 1.1; you should use --verbose instead.\");\n    }\n};\n\n// Casper class is an EventEmitter\nutils.inherits(Casper, events.EventEmitter);\n\n/**\n * Go a step back in browser's history\n *\n * @return Casper\n */\nCasper.prototype.back = function back() {\n    \"use strict\";\n    this.checkStarted();\n    return this.then(function() {\n        this.emit('back');\n        this.page.goBack();\n    });\n};\n\n/**\n * Encodes a resource using the base64 algorithm synchronously using\n * client-side XMLHttpRequest.\n *\n * NOTE: we cannot use window.btoa() for some strange reasons here.\n *\n * @param  String  url     The url to download\n * @param  String  method  The method to use, optional: default GET\n * @param  String  data    The data to send, optional\n * @return string          Base64 encoded result\n */\nCasper.prototype.base64encode = function base64encode(url, method, data) {\n    \"use strict\";\n    return this.callUtils(\"getBase64\", url, method, data);\n};\n\n/**\n * Bypasses `nb` steps.\n *\n * @param  Integer  nb  Number of steps to bypass\n */\nCasper.prototype.bypass = function bypass(nb) {\n    \"use strict\";\n    var step = this.step,\n        steps = this.steps,\n        last = steps.length,\n        targetStep = Math.min(step + nb, last);\n    this.checkStarted();\n    this.step = targetStep;\n    this.emit('step.bypassed', targetStep, step);\n    return this;\n};\n\n/**\n * Invokes a client side utils object method within the remote page, with arguments.\n *\n * @param  {String}   method  Method name\n * @return {...args}          Arguments\n * @return {Mixed}\n * @throws {CasperError}      If invokation failed.\n */\nCasper.prototype.callUtils = function callUtils(method) {\n    \"use strict\";\n    var args = [].slice.call(arguments, 1);\n    var result = this.evaluate(function(method, args) {\n        return __utils__.__call(method, args);\n    }, method, args);\n    if (utils.isObject(result) && result.__isCallError) {\n        throw new CasperError(f(\"callUtils(%s) with args %s thrown an error: %s\",\n                              method, args, result.message));\n    }\n    return result;\n};\n\n/**\n * Proxy method for WebPage#render. Adds a clipRect parameter for\n * automatically set page clipRect setting values and sets it back once\n * done. If the cliprect parameter is omitted, the full page viewport\n * area will be rendered.\n *\n * @param  String  targetFile  A target filename\n * @param  mixed   clipRect    An optional clipRect object (optional)\n * @return Casper\n */\nCasper.prototype.capture = function capture(targetFile, clipRect, imgOptions) {\n    \"use strict\";\n    /*eslint max-statements:0*/\n    this.checkStarted();\n    var previousClipRect;\n    targetFile = fs.absolute(targetFile);\n    if (clipRect) {\n        if (!utils.isClipRect(clipRect)) {\n            throw new CasperError(\"clipRect must be a valid ClipRect object.\");\n        }\n        previousClipRect = this.page.clipRect;\n        this.page.clipRect = clipRect;\n        this.log(f(\"Capturing page to %s with clipRect %s\", targetFile, JSON.stringify(clipRect)), \"debug\");\n    } else {\n        this.log(f(\"Capturing page to %s\", targetFile), \"debug\");\n    }\n    if (!this.page.render(this.filter('capture.target_filename', targetFile) || targetFile, imgOptions)) {\n        this.log(f(\"Failed to save screenshot to %s; please check permissions\", targetFile), \"error\");\n    } else {\n        this.log(f(\"Capture saved to %s\", targetFile), \"info\");\n        this.emit('capture.saved', targetFile);\n    }\n    if (previousClipRect) {\n        this.page.clipRect = previousClipRect;\n    }\n    return this;\n};\n\n/**\n * Returns a Base64 representation of a binary image capture of the current\n * page, or an area within the page, in a given format.\n *\n * Supported image formats are `bmp`, `jpg`, `jpeg`, `png`, `ppm`, `tiff`,\n * `xbm` and `xpm`.\n *\n * @param  String                   format    The image format\n * @param  String|Object|undefined  selector  DOM CSS3/XPath selector or clipRect object (optional)\n * @return Casper\n */\nCasper.prototype.captureBase64 = function captureBase64(format, area) {\n    \"use strict\";\n    /*eslint max-statements:0*/\n    this.checkStarted();\n    var base64, previousClipRect, formats = ['bmp', 'jpg', 'jpeg', 'png', 'ppm', 'tiff', 'xbm', 'xpm'];\n    if (formats.indexOf(format.toLowerCase()) === -1) {\n        throw new CasperError(f('Unsupported format \"%s\"', format));\n    }\n    if (utils.isClipRect(area)) {\n        // if area is a clipRect object\n        this.log(f(\"Capturing base64 %s representation of %s\", format, utils.serialize(area)), \"debug\");\n        previousClipRect = this.page.clipRect;\n        this.page.clipRect = area;\n        base64 = this.page.renderBase64(format);\n    } else if (utils.isValidSelector(area)) {\n        // if area is a selector string or object\n        this.log(f(\"Capturing base64 %s representation of %s\", format, area), \"debug\");\n        base64 = this.captureBase64(format, this.getElementBounds(area));\n    } else {\n        // whole page capture\n        this.log(f(\"Capturing base64 %s representation of page\", format), \"debug\");\n        base64 = this.page.renderBase64(format);\n    }\n    if (previousClipRect) {\n        this.page.clipRect = previousClipRect;\n    }\n    return base64;\n};\n\n/**\n * Captures the page area matching the provided selector.\n *\n * @param  String  targetFile  Target destination file path.\n * @param  String  selector    DOM CSS3/XPath selector\n * @return Casper\n */\nCasper.prototype.captureSelector = function captureSelector(targetFile, selector, imgOptions) {\n    \"use strict\";\n    return this.capture(targetFile, this.getElementBounds(selector), imgOptions);\n};\n\n/**\n * Checks for any further navigation step to process.\n *\n * @param  Casper    self        A self reference\n * @param  function  onComplete  An options callback to apply on completion\n */\nCasper.prototype.checkStep = function checkStep(self, onComplete) {\n    \"use strict\";\n    if (self.pendingWait || self.loadInProgress || self.navigationRequested || self.browserInitializing) {\n        return;\n    }\n    var step = self.steps[self.step++];\n    if (utils.isFunction(step)) {\n        return self.runStep(step);\n    }\n    self.result.time = new Date().getTime() - self.startTime;\n    self.log(f(\"Done %s steps in %dms\", self.steps.length, self.result.time), \"info\");\n    clearInterval(self.checker);\n    self.step -= 1;\n    self.emit('run.complete');\n    try {\n        if (utils.isFunction(onComplete)) {\n            onComplete.call(self, self);\n        } else if (utils.isFunction(self.options.onRunComplete)) {\n            self.options.onRunComplete.call(self, self);\n        }\n    } catch (error) {\n        self.emit('complete.error', error);\n        if (!self.options.silentErrors) {\n            throw error;\n        }\n    }\n};\n\n/**\n * Checks if this instance is started.\n *\n * @return Boolean\n * @throws CasperError\n */\nCasper.prototype.checkStarted = function checkStarted() {\n    \"use strict\";\n    if (!this.started) {\n        throw new CasperError(f(\"Casper is not started, can't execute `%s()`\",\n                                checkStarted.caller.name));\n    }\n};\n\n/**\n * Clears the current page execution environment context. Useful to avoid\n * having previously loaded DOM contents being still active (refs #34).\n *\n * Think of it as a way to stop javascript execution within the remote DOM\n * environment.\n *\n * @return Casper\n */\nCasper.prototype.clear = function clear() {\n    \"use strict\";\n    this.checkStarted();\n    this.page.content = '';\n    return this;\n};\n\n/**\n * Emulates a click on the element from the provided selector using the mouse\n * pointer, if possible.\n *\n * In case of success, `true` is returned, `false` otherwise.\n *\n * @param  String   selector  A DOM CSS3 compatible selector\n * @param  String   target    A HTML target '_blank','_self','_parent','_top','framename' (optional)\n * @param  Number   x         X position (optional)\n * @param  Number   y         Y position (optional)\n * @return Boolean\n */\nCasper.prototype.click = function click(selector, x, y) {\n    \"use strict\";\n    this.checkStarted();\n    var success = this.mouseEvent('mousedown', selector, x, y) && this.mouseEvent('mouseup', selector, x, y);\n    success = success && this.mouseEvent('click', selector, x, y);\n    this.evaluate(function(selector) {\n        var element = __utils__.findOne(selector);\n        if (element) {\n            element.focus();\n        }\n    }, selector);\n    this.emit('click', selector);\n    return success;\n};\n\n/**\n * Emulates a click on the element having `label` as innerText. The first\n * element matching this label will be selected, so use with caution.\n *\n * @param  String   label  Element innerText value\n * @param  String   tag    An element tag name (eg. `a` or `button`) (optional)\n * @return Boolean\n */\nCasper.prototype.clickLabel = function clickLabel(label, tag) {\n    \"use strict\";\n    this.checkStarted();\n    tag = tag || \"*\";\n    var escapedLabel = utils.quoteXPathAttributeString(label);\n    var selector = selectXPath(f('//%s[text()=%s]', tag, escapedLabel));\n    return this.click(selector);\n};\n\n/**\n * Configures HTTP authentication parameters. Will try parsing auth credentials from\n * the passed location first, then check for configured settings if any.\n *\n * @param  String  location  Requested url\n * @param  Object  settings  Request settings\n * @return Casper\n */\nCasper.prototype.configureHttpAuth = function configureHttpAuth(location, settings) {\n    \"use strict\";\n    var httpAuthMatch = location.match(/^https?:\\/\\/(.+):(.+)@/i);\n    this.checkStarted();\n    if (httpAuthMatch) {\n        this.page.settings.userName = httpAuthMatch[1];\n        this.page.settings.password = httpAuthMatch[2];\n    } else if (utils.isObject(settings) && settings.username) {\n        this.page.settings.userName = settings.username;\n        this.page.settings.password = settings.password;\n    } else {\n        return;\n    }\n    this.emit('http.auth', this.page.settings.userName, this.page.settings.password);\n    this.log(\"Setting HTTP authentication for user \" + this.page.settings.userName, \"info\");\n    return this;\n};\n\n/**\n * Creates a step definition.\n *\n * @param  Function  fn       The step function to call\n * @param  Object    options  Step options\n * @return Function  The final step function\n */\nCasper.prototype.createStep = function createStep(fn, options) {\n    \"use strict\";\n    if (!utils.isFunction(fn)) {\n        throw new CasperError(\"createStep(): a step definition must be a function\");\n    }\n    fn.options = utils.isObject(options) ? options : {};\n    this.emit('step.created', fn);\n    return fn;\n};\n\n/**\n * Logs the HTML code of the current page.\n *\n * @param  String   selector  A DOM CSS3/XPath selector (optional)\n * @param  Boolean  outer     Whether to fetch outer HTML contents (default: false)\n * @return Casper\n */\nCasper.prototype.debugHTML = function debugHTML(selector, outer) {\n    \"use strict\";\n    this.checkStarted();\n    return this.echo(this.getHTML(selector, outer));\n};\n\n/**\n * Logs the textual contents of the current page.\n *\n * @return Casper\n */\nCasper.prototype.debugPage = function debugPage() {\n    \"use strict\";\n    this.checkStarted();\n    this.echo(this.evaluate(function _evaluate() {\n        return document.body.textContent || document.body.innerText;\n    }));\n    return this;\n};\n\n/**\n * Exit phantom on failure, with a logged error message.\n *\n * @param  String  message  An optional error message\n * @param  Number  status   An optional exit status code (must be > 0)\n * @return Casper\n */\nCasper.prototype.die = function die(message, status) {\n    \"use strict\";\n    this.result.status = \"error\";\n    this.result.time = new Date().getTime() - this.startTime;\n    if (!utils.isString(message) || !message.length) {\n        message = \"Suite explicitly interrupted without any message given.\";\n    }\n    this.log(message, \"error\");\n    this.echo(message, \"ERROR\");\n    this.emit('die', message, status);\n    if (utils.isFunction(this.options.onDie)) {\n        this.options.onDie.call(this, this, message, status);\n    }\n    return this.exit(~~status > 0 ? ~~status : 1);\n};\n\n/**\n * Downloads a resource and saves it on the filesystem.\n *\n * @param  String  url         The url of the resource to download\n * @param  String  targetPath  The destination file path\n * @param  String  method      The HTTP method to use (default: GET)\n * @param  String  data        Optional data to pass performing the request\n * @return Casper\n */\nCasper.prototype.download = function download(url, targetPath, method, data) {\n    \"use strict\";\n    this.checkStarted();\n    var cu = require('clientutils').create(utils.mergeObjects({}, this.options));\n    try {\n        fs.write(targetPath, cu.decode(this.base64encode(url, method, data)), 'wb');\n        this.emit('downloaded.file', targetPath);\n        this.log(f(\"Downloaded and saved resource in %s\", targetPath));\n    } catch (e) {\n        this.emit('downloaded.error', url);\n        this.log(f(\"Error while downloading %s to %s: %s\", url, targetPath, e), \"error\");\n    }\n    return this;\n};\n\n/**\n * Iterates over the values of a provided array and execute a callback for each\n * item.\n *\n * @param  Array     array\n * @param  Function  fn     Callback: function(casper, item, index)\n * @return Casper\n */\nCasper.prototype.each = function each(array, fn) {\n    \"use strict\";\n    if (!utils.isArray(array)) {\n        this.log(\"each() only works with arrays\", \"error\");\n        return this;\n    }\n    array.forEach(function _forEach(item, i) {\n        fn.call(this, this, item, i);\n    }, this);\n    return this;\n};\n\n/**\n * Iterates over the values of a provided array and adds a step for each item.\n *\n * @param  Array     array\n * @param  Function  then   Step: function(response); item will be attached to response.data\n * @return Casper\n */\nCasper.prototype.eachThen = function each(array, then) {\n    \"use strict\";\n    if (!utils.isArray(array)) {\n        this.log(\"eachThen() only works with arrays\", \"error\");\n        return this;\n    }\n    array.forEach(function _forEach(item) {\n        this.then(function() {\n            this.then(this.createStep(then, {data: item}));\n        });\n    }, this);\n    return this;\n};\n\n/**\n * Prints something to stdout.\n *\n * @param  String  text   A string to echo to stdout\n * @param  String  style  An optional style name\n * @param  Number  pad    An optional pad value\n * @return Casper\n */\nCasper.prototype.echo = function echo(text, style, pad) {\n    \"use strict\";\n    if (!utils.isString(text)) {\n        try {\n            text = text.toString();\n        } catch (e) {\n            try {\n                text = utils.serialize(text);\n            } catch (e2) {\n                text = '';\n            }\n        }\n    }\n    var message = style ? this.colorizer.colorize(text, style, pad) : text;\n    console.log(this.filter('echo.message', message) || message);\n    return this;\n};\n\n/**\n * Evaluates an expression in the page context, a bit like what\n * WebPage#evaluate does, but the passed function can also accept\n * parameters if a context Object is also passed:\n *\n *     casper.evaluate(function(username, password) {\n *         document.querySelector('#username').value = username;\n *         document.querySelector('#password').value = password;\n *         document.querySelector('#submit').click();\n *     }, 'Bazoonga', 'baz00nga');\n *\n * @param  Function  fn       The function to be evaluated within current page DOM\n * @param  Object    context  Object containing the parameters to inject into the function\n * @return mixed\n * @see    WebPage#evaluate\n */\nCasper.prototype.evaluate = function evaluate(fn, context) {\n    \"use strict\";\n    this.checkStarted();\n    // check whether javascript is enabled !!\n    if (this.options.pageSettings.javascriptEnabled === false) {\n        throw new CasperError(\"evaluate() requires javascript to be enabled\");\n    }\n    // preliminary checks\n    if (!utils.isFunction(fn) && !utils.isString(fn)) { // phantomjs allows functions defs as string\n        throw new CasperError(\"evaluate() only accepts functions or strings\");\n    }\n    // ensure client utils are always injected\n    this.injectClientUtils();\n    // function context\n    if (arguments.length === 1) {\n        return utils.clone(this.page.evaluate(fn));\n    } else if (arguments.length === 2) {\n        // check for closure signature if it matches context\n        if (utils.isObject(context) && eval(fn).length === Object.keys(context).length) {\n            context = utils.objectValues(context);\n        } else {\n            context = [context];\n        }\n    } else {\n        // phantomjs-style signature\n        context = [].slice.call(arguments, 1);\n    }\n    return utils.clone(this.page.evaluate.apply(this.page, [fn].concat(context)));\n};\n\n/**\n * Evaluates an expression within the current page DOM and die() if it\n * returns false.\n *\n * @param  function  fn       The expression to evaluate\n * @param  String    message  The error message to log\n * @param  Number  status   An optional exit status code (must be > 0)\n *\n * @return Casper\n */\nCasper.prototype.evaluateOrDie = function evaluateOrDie(fn, message, status) {\n    \"use strict\";\n    this.checkStarted();\n    if (!this.evaluate(fn)) {\n        return this.die(message, status);\n    }\n    return this;\n};\n\n/**\n * Checks if an element matching the provided DOM CSS3/XPath selector exists in\n * current page DOM.\n *\n * @param  String  selector  A DOM CSS3/XPath selector\n * @return Boolean\n */\nCasper.prototype.exists = function exists(selector) {\n    \"use strict\";\n    this.checkStarted();\n    return this.callUtils(\"exists\", selector);\n};\n\n/**\n * Exits phantom.\n *\n * @param  Number  status  Status\n * @return Casper\n */\nCasper.prototype.exit = function exit(status) {\n    \"use strict\";\n    this.emit('exit', status);\n    setTimeout(function() { phantom.exit(status); }, 0);\n};\n\n/**\n * Fetches plain text contents contained in the DOM element(s) matching a given CSS3/XPath\n * selector.\n *\n * @param  String  selector  A DOM CSS3/XPath selector\n * @return String\n */\nCasper.prototype.fetchText = function fetchText(selector) {\n    \"use strict\";\n    this.checkStarted();\n    return this.callUtils(\"fetchText\", selector);\n};\n\n/**\n * Fills a form with provided field values.\n *\n * @param  String selector  A DOM CSS3/XPath selector to the target form to fill\n * @param  Object vals      Field values\n * @param  Object options   The fill settings (optional)\n */\nCasper.prototype.fillForm = function fillForm(selector, vals, options) {\n    \"use strict\";\n    this.checkStarted();\n\n    var selectorType = options && options.selectorType || \"names\",\n        submit = !!(options && options.submit);\n\n    this.emit('fill', selector, vals, options);\n\n    var fillResults = this.evaluate(function _evaluate(selector, vals, selectorType) {\n        try {\n            return __utils__.fill(selector, vals, selectorType);\n        } catch (exception) {\n            return {exception: exception.toString()};\n        }\n    }, selector, vals, selectorType);\n\n    if (!fillResults) {\n        throw new CasperError(\"Unable to fill form\");\n    } else if (fillResults && fillResults.exception) {\n        throw new CasperError(\"Unable to fill form: \" + fillResults.exception);\n    } else if (fillResults.errors.length > 0) {\n        throw new CasperError(f('Errors encountered while filling form: %s',\n                              fillResults.errors.join('; ')));\n    }\n\n    // File uploads\n    if (fillResults.files && fillResults.files.length > 0) {\n        if (utils.isObject(selector) && selector.type === 'xpath') {\n            this.warn('Filling file upload fields is currently not supported using ' +\n                      'XPath selectors; Please use a CSS selector instead.');\n        } else {\n            fillResults.files.forEach(function _forEach(file) {\n                if (!file || !file.path) {\n                    return;\n                }\n                var paths = (utils.isArray(file.path) && file.path.length > 0) ? file.path : [file.path];\n                paths.map(function(filePath) {\n                            if (!fs.exists(filePath)) {\n                                throw new CasperError('Cannot upload nonexistent file: ' + filePath);\n                            }\n                        },this);\n                var fileFieldSelector;\n                if (file.type === \"names\") {\n                    fileFieldSelector = [selector, 'input[name=\"' + file.selector + '\"]'].join(' ');\n                } else if (file.type === \"css\" || file.type === \"labels\") {\n                    fileFieldSelector = [selector, file.selector].join(' ');\n                }\n                this.page.uploadFile(fileFieldSelector, paths);\n            }.bind(this));\n        }\n    }\n\n    // Form submission?\n    if (submit) {\n        this.evaluate(function _evaluate(selector) {\n            var form = __utils__.findOne(selector);\n            var method = (form.getAttribute('method') || \"GET\").toUpperCase();\n            var action = form.getAttribute('action') || \"unknown\";\n            __utils__.log('submitting form to ' + action + ', HTTP ' + method, 'info');\n            var event = document.createEvent('Event');\n            event.initEvent('submit', true, true);\n            if (!form.dispatchEvent(event)) {\n                __utils__.log('unable to submit form', 'warning');\n                return;\n            }\n            if (typeof form.submit === \"function\") {\n                form.submit();\n            } else {\n                // http://www.spiration.co.uk/post/1232/Submit-is-not-a-function\n                form.submit.click();\n            }\n        }, selector);\n    }\n    \n    return this;\n};\n\n/**\n * Fills a form with provided field values using the Name attribute.\n *\n * @param  String  formSelector  A DOM CSS3/XPath selector to the target form to fill\n * @param  Object  vals          Field values\n * @param  Boolean submit        Submit the form?\n */\nCasper.prototype.fillNames = function fillNames(formSelector, vals, submit) {\n    \"use strict\";\n    return this.fillForm(formSelector, vals, {\n        submit: submit,\n        selectorType: 'names'\n    });\n};\n\n/**\n * Fills a form with provided field values using associated label text.\n *\n * @param  String  formSelector  A DOM CSS3/XPath selector to the target form to fill\n * @param  Object  vals          Field values\n * @param  Boolean submit        Submit the form?\n */\nCasper.prototype.fillLabels = function fillLabels(formSelector, vals, submit) {\n    \"use strict\";\n    return this.fillForm(formSelector, vals, {\n        submit: submit,\n        selectorType: 'labels'\n    });\n};\n\n/**\n * Fills a form with provided field values using CSS3 selectors.\n *\n * @param  String  formSelector  A DOM CSS3/XPath selector to the target form to fill\n * @param  Object  vals          Field values\n * @param  Boolean submit        Submit the form?\n */\nCasper.prototype.fillSelectors = function fillSelectors(formSelector, vals, submit) {\n    \"use strict\";\n    return this.fillForm(formSelector, vals, {\n        submit: submit,\n        selectorType: 'css'\n    });\n};\n\n/**\n * Fills a form with provided field values using the Name attribute by default.\n *\n * @param  String  formSelector  A DOM CSS3/XPath selector to the target form to fill\n * @param  Object  vals          Field values\n * @param  Boolean submit        Submit the form?\n */\nCasper.prototype.fill = Casper.prototype.fillNames;\n\n/**\n * Fills a form with provided field values using XPath selectors.\n *\n * @param  String  formSelector  A DOM CSS3/XPath selector to the target form to fill\n * @param  Object  vals          Field values\n * @param  Boolean submit        Submit the form?\n */\nCasper.prototype.fillXPath = function fillXPath(formSelector, vals, submit) {\n    \"use strict\";\n    return this.fillForm(formSelector, vals, {\n        submit: submit,\n        selectorType: 'xpath'\n    });\n};\n\n/**\n * Go a step forward in browser's history\n *\n * @return Casper\n */\nCasper.prototype.forward = function forward() {\n    \"use strict\";\n    this.checkStarted();\n    return this.then(function() {\n        this.emit('forward');\n        this.page.goForward();\n    });\n};\n\n/**\n * Creates a new Colorizer instance. Sets `Casper.options.type` to change the\n * colorizer type name (see the `colorizer` module).\n *\n * @return Object\n */\nCasper.prototype.getColorizer = function getColorizer() {\n    \"use strict\";\n    return colorizer.create(this.options.colorizerType || 'Colorizer');\n};\n\n/**\n * Retrieves current page contents, dealing with exotic other content types than HTML.\n *\n * @return String\n */\nCasper.prototype.getPageContent = function getPageContent() {\n    \"use strict\";\n    this.checkStarted();\n    var contentType = utils.getPropertyPath(this, 'currentResponse.contentType');\n    if (!utils.isString(contentType) || contentType.indexOf(\"text/html\") !== -1) {\n        return this.page.frameContent;\n    }\n    // FIXME: with slimerjs this will work only for\n    // text/* and application/json content types.\n    // see FIXME in slimerjs src/modules/webpageUtils.jsm getWindowContent\n    return this.page.framePlainText;\n};\n\n/**\n * Retrieves current page contents in plain text.\n *\n * @return String\n */\nCasper.prototype.getPlainText = function getPlainText() {\n    \"use strict\";\n    this.checkStarted();\n    return this.page.framePlainText;\n};\n\n/**\n * Retrieves current document url.\n *\n * @return String\n */\nCasper.prototype.getCurrentUrl = function getCurrentUrl() {\n    \"use strict\";\n    this.checkStarted();\n    try {\n        if (this.options.pageSettings.javascriptEnabled === false) {\n            return this.page.url;\n        } else {\n            return utils.decodeUrl(this.evaluate(function _evaluate() {\n                return document.location.href;\n            }));\n        }\n    } catch (e) {\n        // most likely the current page object has been \"deleted\" (think closed popup)\n        if (/deleted QObject/.test(e.message))\n            return \"\";\n        throw e;\n    }\n};\n\n/**\n * Retrieves the value of an attribute on the first element matching the provided\n * DOM CSS3/XPath selector.\n *\n * @param  String  selector   A DOM CSS3/XPath selector\n * @param  String  attribute  The attribute name to lookup\n * @return String  The requested DOM element attribute value\n */\nCasper.prototype.getElementAttribute =\nCasper.prototype.getElementAttr = function getElementAttr(selector, attribute) {\n    \"use strict\";\n    this.checkStarted();\n    return this.evaluate(function _evaluate(selector, attribute) {\n        return __utils__.findOne(selector).getAttribute(attribute);\n    }, selector, attribute);\n};\n\n/**\n * Retrieves the value of an attribute for each element matching the provided\n * DOM CSS3/XPath selector.\n *\n * @param  String  selector   A DOM CSS3/XPath selector\n * @param  String  attribute  The attribute name to lookup\n * @return Array\n */\nCasper.prototype.getElementsAttribute =\nCasper.prototype.getElementsAttr = function getElementsAttr(selector, attribute) {\n    \"use strict\";\n    this.checkStarted();\n    return this.evaluate(function _evaluate(selector, attribute) {\n        return [].map.call(__utils__.findAll(selector), function(element) {\n            return element.getAttribute(attribute);\n        });\n    }, selector, attribute);\n};\n\n/**\n * Retrieves boundaries for a DOM element matching the provided DOM CSS3/XPath selector.\n *\n * @param  String  selector  A DOM CSS3/XPath selector\n * @return Object\n */\nCasper.prototype.getElementBounds = function getElementBounds(selector) {\n    \"use strict\";\n    this.checkStarted();\n    if (!this.exists(selector)) {\n        throw new CasperError(\"No element matching selector found: \" + selector);\n    }\n    var zoomFactor = this.page.zoomFactor || 1;\n    var clipRect = this.callUtils(\"getElementBounds\", selector);\n    if (zoomFactor !== 1) {\n        for (var prop in clipRect) {\n            if (clipRect.hasOwnProperty(prop)) {\n                clipRect[prop] = clipRect[prop] * zoomFactor;\n            }\n        }\n    }\n    if (!utils.isClipRect(clipRect)) {\n        throw new CasperError('Could not fetch boundaries for element matching selector: ' + selector);\n    }\n    return clipRect;\n};\n\n/**\n * Retrieves information about the node matching the provided selector.\n *\n * @param  String|Objects  selector  CSS3/XPath selector\n * @return Object\n */\nCasper.prototype.getElementInfo = function getElementInfo(selector) {\n    \"use strict\";\n    this.checkStarted();\n    if (!this.exists(selector)) {\n        throw new CasperError(f(\"Cannot get informations from %s: element not found.\", selector));\n    }\n    return this.callUtils(\"getElementInfo\", selector);\n};\n\n/**\n * Retrieves information about the nodes matching the provided selector.\n *\n * @param String|Objects  selector  CSS3/XPath selector\n * @return Array\n */\nCasper.prototype.getElementsInfo = function getElementsInfo(selector) {\n    \"use strict\";\n    this.checkStarted();\n    if (!this.exists(selector)) {\n        throw new CasperError(f(\"Cannot get information from %s: no elements found.\", selector));\n    }\n    return this.callUtils(\"getElementsInfo\", selector);\n};\n\n/**\n * Retrieves boundaries for all the DOM elements matching the provided DOM CSS3/XPath selector.\n *\n * @param  String  selector  A DOM CSS3/XPath selector\n * @return Array\n */\nCasper.prototype.getElementsBounds = function getElementsBounds(selector) {\n    \"use strict\";\n    this.checkStarted();\n    if (!this.exists(selector)) {\n        throw new CasperError(\"No element matching selector found: \" + selector);\n    }\n    var zoomFactor = this.page.zoomFactor || 1;\n    var clipRects = this.callUtils(\"getElementsBounds\", selector);\n    if (zoomFactor !== 1) {\n        Array.prototype.forEach.call(clipRects, function(clipRect) {\n            for (var prop in clipRect) {\n                if (clipRect.hasOwnProperty(prop)) {\n                    clipRect[prop] = clipRect[prop] * zoomFactor;\n                }\n            }\n        });\n    }\n    return clipRects;\n};\n\n/**\n * Retrieves a given form all of its field values.\n *\n * @param  String  selector  A DOM CSS3/XPath selector\n * @return Object\n */\nCasper.prototype.getFormValues = function(selector) {\n    \"use strict\";\n    this.checkStarted();\n    if (!this.exists(selector)) {\n        throw new CasperError(f('Form matching selector \"%s\" not found', selector));\n    }\n    return this.callUtils(\"getFormValues\", selector);\n};\n\n/**\n * Retrieves global variable.\n *\n * @param  String  name  The name of the global variable to retrieve\n * @return mixed\n */\nCasper.prototype.getGlobal = function getGlobal(name) {\n    \"use strict\";\n    this.checkStarted();\n    var result = this.evaluate(function _evaluate(name) {\n        var result = {};\n        try {\n            result.value = JSON.stringify(window[name]);\n        } catch (e) {\n            var message = \"Unable to JSON encode window.\" + name + \": \" + e;\n            __utils__.log(message, \"error\");\n            result.error = message;\n        }\n        return result;\n    }, name);\n    if (!utils.isObject(result)) {\n        throw new CasperError(f('Could not retrieve global value for \"%s\"', name));\n    } else if ('error' in result) {\n        throw new CasperError(result.error);\n    } else if (utils.isString(result.value)) {\n        return JSON.parse(result.value);\n    }\n};\n\n/**\n * Retrieves current HTML code matching the provided CSS3/XPath selector.\n * Returns the HTML contents for the whole page if no arg is passed.\n *\n * @param  String   selector  A DOM CSS3/XPath selector\n * @param  Boolean  outer     Whether to fetch outer HTML contents (default: false)\n * @return String\n */\nCasper.prototype.getHTML = function getHTML(selector, outer) {\n    \"use strict\";\n    this.checkStarted();\n    if (!selector) {\n        return this.page.frameContent;\n    }\n    if (!this.exists(selector)) {\n        throw new CasperError(\"No element matching selector found: \" + selector);\n    }\n    return this.evaluate(function getSelectorHTML(selector, outer) {\n        var element = __utils__.findOne(selector);\n        return outer ? element.outerHTML : element.innerHTML;\n    }, selector, !!outer);\n};\n\n/**\n * Retrieves current page title, if any.\n *\n * @return String\n */\nCasper.prototype.getTitle = function getTitle() {\n    \"use strict\";\n    this.checkStarted();\n    return this.evaluate(function _evaluate() {\n        return document.title;\n    });\n};\n\n/**\n * Handles received HTTP resource.\n *\n * @param  Object  resource  PhantomJS HTTP resource\n */\nCasper.prototype.handleReceivedResource = function(resource) {\n    \"use strict\";\n    /*eslint max-statements:0*/\n    if (resource.stage !== \"end\") {\n        return;\n    }\n    this.resources.push(resource);\n\n    var checkUrl = ((phantom.casperEngine === 'phantomjs' && utils.ltVersion(phantom.version, '2.1.0')) ||\n                   (phantom.casperEngine === 'slimerjs' && utils.ltVersion(phantom.version, '0.10.0'))) ? utils.decodeUrl(resource.url) : resource.url;\n    if (checkUrl !== this.requestUrl) {\n        return;\n    }\n    this.currentHTTPStatus = null;\n    this.currentResponse = {};\n    if (utils.isHTTPResource(resource)) {\n        this.emit('page.resource.received', resource);\n        this.currentResponse = resource;\n        this.currentHTTPStatus = resource.status;\n        this.emit('http.status.' + resource.status, resource);\n        if (utils.isObject(this.options.httpStatusHandlers) &&\n            resource.status in this.options.httpStatusHandlers &&\n            utils.isFunction(this.options.httpStatusHandlers[resource.status])) {\n            this.options.httpStatusHandlers[resource.status].call(this, this, resource);\n        }\n    }\n    this.currentUrl = resource.url;\n    this.emit('location.changed', resource.url);\n};\n\n/**\n * Initializes PhantomJS error handler.\n *\n */\nCasper.prototype.initErrorHandler = function initErrorHandler() {\n    \"use strict\";\n    var casper = this;\n    phantom.onError = function phantom_onError(msg, backtrace) {\n        casper.emit('error', msg, backtrace);\n        if (casper.options.exitOnError === true) {\n            casper.exit(1);\n        }\n    };\n};\n\n/**\n * Injects configured local client scripts.\n *\n * @return Casper\n */\nCasper.prototype.injectClientScripts = function injectClientScripts() {\n    \"use strict\";\n    this.checkStarted();\n    if (!this.options.clientScripts) {\n        return;\n    }\n    if (utils.isString(this.options.clientScripts)) {\n        this.options.clientScripts = [this.options.clientScripts];\n    }\n    if (!utils.isArray(this.options.clientScripts)) {\n        throw new CasperError(\"The clientScripts option must be an array\");\n    }\n    this.options.clientScripts.forEach(function _forEach(script) {\n        if (this.page.injectJs(script)) {\n            this.log(f('Automatically injected %s client side', script), \"debug\");\n        } else {\n            this.warn(f('Failed injecting %s client side', script));\n        }\n    }.bind(this));\n    return this;\n};\n\n/**\n * Injects Client-side utilities in current page context.\n *\n */\nCasper.prototype.injectClientUtils = function injectClientUtils() {\n    \"use strict\";\n    this.checkStarted();\n    var clientUtilsInjected = this.page.evaluate(function() {\n        return typeof __utils__ === \"object\";\n    });\n    if (true === clientUtilsInjected) {\n        return;\n    }\n    var clientUtilsPath = require('fs').pathJoin(phantom.casperPath, 'modules', 'clientutils.js');\n    if (true === this.page.injectJs(clientUtilsPath)) {\n        this.log(\"Successfully injected Casper client-side utilities\", \"debug\");\n    } else {\n        this.warn(\"Failed to inject Casper client-side utilities\");\n    }\n    // ClientUtils and Casper shares the same options\n    // These are not the lines I'm the most proud of in my life, but it works.\n    /*global __options*/\n    this.page.evaluate(function() {\n        window.__utils__ = new window.ClientUtils(__options);\n    }.toString().replace('__options', JSON.stringify(this.options)));\n};\n\n/**\n * Loads and include remote client scripts to current page.\n *\n * @return Casper\n */\nCasper.prototype.includeRemoteScripts = function includeRemoteScripts() {\n    \"use strict\";\n    var numScripts = this.options.remoteScripts.length, loaded = 0;\n    if (numScripts === 0) {\n        return this;\n    }\n    this.waitStart();\n    this.options.remoteScripts.forEach(function(scriptUrl) {\n        this.log(f(\"Loading remote script: %s\", scriptUrl), \"debug\");\n        this.page.includeJs(scriptUrl, function() {\n            loaded++;\n            this.log(f(\"Remote script %s loaded\", scriptUrl), \"debug\");\n            if (loaded === numScripts) {\n                this.log(\"All remote scripts loaded.\", \"debug\");\n                this.waitDone();\n            }\n        }.bind(this));\n    }.bind(this));\n    return this;\n};\n\n/**\n * Logs a message.\n *\n * @param  String  message  The message to log\n * @param  String  level    The log message level (from Casper.logLevels property)\n * @param  String  space    Space from where the logged event occurred (default: \"phantom\")\n * @return Casper\n */\nCasper.prototype.log = function log(message, level, space) {\n    \"use strict\";\n    level = level && this.logLevels.indexOf(level) > -1 ? level : \"debug\";\n    space = space ? space : \"phantom\";\n    if (level === \"error\" && utils.isFunction(this.options.onError)) {\n        this.options.onError.call(this, this, message, space);\n    }\n    if (this.logLevels.indexOf(level) < this.logLevels.indexOf(this.options.logLevel)) {\n        return this; // skip logging\n    }\n    var entry = {\n        level:   level,\n        space:   space,\n        message: message,\n        date:    new Date().toString()\n    };\n    if (level in this.logFormats && utils.isFunction(this.logFormats[level])) {\n        message = this.logFormats[level](message, level, space);\n    } else {\n        message = f('%s [%s] %s',\n                    this.colorizer.colorize(f('[%s]', level), this.logStyles[level]),\n                    space,\n                    message);\n    }\n    if (this.options.verbose) {\n        this.echo(this.filter('log.message', message) || message); // direct output\n    }\n    this.result.log.push(entry);\n    this.emit('log', entry);\n    return this;\n};\n\n/**\n * Emulates an event on the element from the provided selector using the mouse\n * pointer, if possible.\n *\n * In case of success, `true` is returned, `false` otherwise.\n *\n * @param  String   type      Type of event to emulate\n * @param  String   selector  A DOM CSS3 compatible selector\n * @param  {Number} x X position\n * @param  {Number} y Y position\n * @return Boolean\n */\nCasper.prototype.mouseEvent = function mouseEvent(type, selector, x, y) {\n    \"use strict\";\n    this.checkStarted();\n    this.log(\"Mouse event '\" + type + \"' on selector: \" + selector, \"debug\");\n    if (!this.exists(selector)) {\n        throw new CasperError(f(\"Cannot dispatch %s event on nonexistent selector: %s\", type, selector));\n    }\n    if (this.callUtils(\"mouseEvent\", type, selector, x, y)) {\n        return true;\n    }\n    // fallback onto native QtWebKit mouse events\n    try {\n        return this.mouse.processEvent(type, selector, x, y);\n    } catch (e) {\n        this.log(f(\"Couldn't emulate '%s' event on %s: %s\", type, selector, e), \"error\");\n    }\n    return false;\n};\n\n/**\n * Performs an HTTP request, with optional settings.\n *\n * Available settings are:\n *\n * - String  method:   The HTTP method to use\n * - Object  data:     The data to use to perform the request, eg. {foo: 'bar'}\n * - Object  headers:  Custom request headers object, eg. {'Cache-Control': 'max-age=0'}\n *\n * @param  String  location  The url to open\n * @param  Object  settings  The request settings (optional)\n * @return Casper\n */\nCasper.prototype.open = function open(location, settings) {\n    \"use strict\";\n    /*eslint max-statements:0*/\n    var baseCustomHeaders = this.page.customHeaders,\n        customHeaders = settings && settings.headers || {};\n    this.checkStarted();\n    settings = utils.isObject(settings) ? settings : {};\n    settings.method = settings.method || \"get\";\n    // http method\n    // taken from https://github.com/ariya/phantomjs/blob/master/src/webpage.cpp#L302\n    var methods = [\"get\", \"head\", \"put\", \"post\", \"delete\"];\n    if (settings.method && (!utils.isString(settings.method) || methods.indexOf(settings.method.toLowerCase()) === -1)) {\n        throw new CasperError(\"open(): settings.method must be part of \" + methods.join(', '));\n    }\n    // http data\n    if (settings.data) {\n        if (utils.isObject(settings.data)) { // query object\n            if (settings.headers && settings.headers[\"Content-Type\"] && settings.headers[\"Content-Type\"].match(/application\\/json/)) {\n                settings.data = JSON.stringify(settings.data); // convert object to JSON notation\n            } else {\n                settings.data = qs.encode(settings.data); // escapes all characters except alphabetic, decimal digits and ,-_.!~*'()\n            }\n        } else if (!utils.isString(settings.data)) {\n            throw new CasperError(\"open(): invalid request settings data value: \" + settings.data);\n        }\n    }\n    // clean location\n    location = utils.cleanUrl(location);\n    // current request url\n    this.configureHttpAuth(location, settings);\n    this.requestUrl = this.filter('open.location', location) || location;\n    this.emit('open', this.requestUrl, settings);\n    this.log(f('opening url: %s, HTTP %s', this.requestUrl, settings.method.toUpperCase()), \"debug\");\n    // reset resources\n    this.resources = [];\n    // custom headers\n    this.page.customHeaders = utils.mergeObjects(utils.clone(baseCustomHeaders), customHeaders);\n    // perfom request\n    this.browserInitializing = true;\n    var phantomJsSettings = {\n        operation: settings.method,\n        data:      settings.data\n    };\n    // override any default encoding setting in phantomjs\n    if ('encoding' in settings) {\n        phantomJsSettings.encoding = settings.encoding;\n    }\n\n    this.page.openUrl(this.requestUrl, phantomJsSettings, this.page.settings);\n    // revert base custom headers\n    this.page.customHeaders = baseCustomHeaders;\n    return this;\n};\n\n/**\n * Reloads current page.\n *\n * @param  Function  then  a next step function\n * @return Casper\n */\nCasper.prototype.reload = function reload(then) {\n    \"use strict\";\n    this.checkStarted();\n    this.then(function() {\n        this.page.reload();\n    });\n    if (utils.isFunction(then)) {\n        this.then(this.createStep(then));\n    }\n    return this;\n};\n\n/**\n * Repeats a step a given number of times.\n *\n * @param  Number    times  Number of times to repeat step\n * @aram   function  then   The step closure\n * @return Casper\n * @see    Casper#then\n */\nCasper.prototype.repeat = function repeat(times, then) {\n    \"use strict\";\n    for (var i = 0; i < times; i++) {\n        this.then(then);\n    }\n    return this;\n};\n\n/**\n * Checks if a given resource was loaded by the remote page.\n *\n * @param  Function/String/RegExp  test  A test function, string or regular expression.\n *                                       In case a string is passed, url matching will be tested.\n * @return Boolean\n */\nCasper.prototype.resourceExists = function resourceExists(test) {\n    \"use strict\";\n    this.checkStarted();\n    var testFn;\n    switch (utils.betterTypeOf(test)) {\n        case \"string\":\n            testFn = function _testResourceExists_String(res) {\n                return res.url.indexOf(test) !== -1 && res.status !== 404;\n            };\n            break;\n        case \"regexp\":\n            testFn = function _testResourceExists_Regexp(res) {\n                return test.test(res.url) && res.status !== 404;\n            };\n            break;\n        case \"function\":\n            testFn = test;\n            break;\n        default:\n            throw new CasperError(\"Invalid type\");\n    }\n    return this.resources.some(testFn);\n};\n\n/**\n * Runs the whole suite of steps.\n *\n * @param  function  onComplete  an optional callback\n * @param  Number    time        an optional amount of milliseconds for interval checking\n * @return Casper\n */\nCasper.prototype.run = function run(onComplete, time) {\n    \"use strict\";\n    this.checkStarted();\n    if (!this.steps || this.steps.length < 1) {\n        throw new CasperError('No steps defined, aborting');\n    }\n    this.log(f(\"Running suite: %d step%s\", this.steps.length, this.steps.length > 1 ? \"s\" : \"\"), \"info\");\n    this.emit('run.start');\n    this.checker = setInterval(this.checkStep, (time ? time: this.options.retryTimeout), this, onComplete);\n    return this;\n};\n\n/**\n * Runs a step.\n *\n * @param  Function  step\n */\nCasper.prototype.runStep = function runStep(step) {\n    \"use strict\";\n    /*eslint max-statements:0*/\n    this.checkStarted();\n    var skipLog = utils.isObject(step.options) && step.options.skipLog === true,\n        stepInfo = f(\"Step %s %d/%d\", step.name || \"anonymous\", this.step, this.steps.length),\n        stepResult;\n    function getCurrentSuiteId(casper) {\n        try {\n            return casper.test.getCurrentSuiteId();\n        } catch (e) {\n            return casper.step;\n        }\n    }\n    if (!skipLog && /^http/.test(this.getCurrentUrl())) {\n        this.log(stepInfo + f(' %s (HTTP %d)', this.getCurrentUrl(), this.currentHTTPStatus), \"info\");\n    }\n    if (utils.isNumber(this.options.stepTimeout) && this.options.stepTimeout > 0) {\n        var stepTimeoutCheckInterval = setInterval(function _check(self, start, stepNum) {\n            if (new Date().getTime() - start > self.options.stepTimeout) {\n                if (getCurrentSuiteId(self) === stepNum) {\n                    self.emit('step.timeout', stepNum, self.options.onStepTimeout);\n                    if (utils.isFunction(self.options.onStepTimeout)) {\n                        self.options.onStepTimeout.call(self, self.options.stepTimeout, stepNum);\n                    }\n                }\n                clearInterval(stepTimeoutCheckInterval);\n            }\n        }, this.options.stepTimeout, this, new Date().getTime(), getCurrentSuiteId(this));\n    }\n    this.emit('step.start', step);\n    if (this.currentResponse) {\n        if (step.options && (typeof step.options.data !== 'undefined')) {\n            this.currentResponse.data = step.options.data;\n        } else {\n            this.currentResponse.data = null;\n        }\n    }\n    try {\n        stepResult = step.call(this, this.currentResponse);\n        if (utils.isFunction(this.options.onStepComplete)) {\n            this.options.onStepComplete.call(this, this, stepResult);\n        }\n    } catch (err) {\n        this.emit('step.error', err);\n        if (!this.options.silentErrors) {\n            throw err;\n        }\n    }\n    if (!skipLog) {\n        this.emit('step.complete', stepResult);\n        this.log(stepInfo + f(\": done in %dms.\", new Date().getTime() - this.startTime), \"info\");\n    }\n};\n\n/**\n * Sends keys to given element.\n *\n * Options:\n *\n * - eventType: \"keypress\", \"keyup\" or \"keydown\" (default: \"keypress\")\n * - modifiers: a string defining the key modifiers, eg. \"alt\", \"alt+shift\"\n *\n * @param  String  selector  A DOM CSS3 compatible selector\n * @param  String  keys      A string representing the sequence of char codes to send\n * @param  Object  options   Options\n * @return Casper\n */\nCasper.prototype.sendKeys = function(selector, keys, options) {\n    \"use strict\";\n    this.checkStarted();\n    options = utils.mergeObjects({\n        eventType: 'keypress',\n        reset: false\n    }, options || {});\n    var elemInfos = this.getElementInfo(selector),\n        tag = elemInfos.nodeName.toLowerCase(),\n        type = utils.getPropertyPath(elemInfos, 'attributes.type'),\n        supported = [\"color\", \"date\", \"datetime\", \"datetime-local\", \"email\",\n                     \"hidden\", \"month\", \"number\", \"password\", \"range\", \"search\",\n                     \"tel\", \"text\", \"time\", \"url\", \"week\"],\n        isTextInput = false,\n        isTextArea = tag === 'textarea',\n        isValidInput = tag === 'input' && (typeof type === 'undefined' || supported.indexOf(type) !== -1),\n        isContentEditable = !!elemInfos.attributes.contenteditable;\n\n    if (isTextArea || isValidInput || isContentEditable) {\n        // clicking on the input element brings it focus\n        isTextInput = true;\n        this.click(selector);\n    }\n    if (options.reset) {\n        this.evaluate(function(selector) {\n            __utils__.setField(__utils__.findOne(selector), '');\n        }, selector);\n        this.click(selector);\n    }\n    var modifiers = utils.computeModifier(options && options.modifiers,\n                                          this.page.event.modifier);\n    this.page.sendEvent(options.eventType, keys, null, null, modifiers);\n    if (isTextInput && !options.keepFocus) {\n        // remove the focus\n        this.evaluate(function(selector) {\n            __utils__.findOne(selector).blur();\n        }, selector);\n    }\n    return this;\n};\n\n/**\n * Scrolls current document to x, y coordinates.\n *\n * @param  {Number} x X position\n * @param  {Number} y Y position\n * @return {Casper}\n */\nCasper.prototype.scrollTo = function(x, y) {\n    \"use strict\";\n    this.callUtils(\"scrollTo\", x, y);\n    return this;\n};\n\n/**\n * Scrolls current document up to its bottom.\n *\n * @return {Casper}\n */\nCasper.prototype.scrollToBottom = function scrollToBottom() {\n    \"use strict\";\n    this.callUtils(\"scrollToBottom\");\n    return this;\n};\n\n/**\n * Sets current page content.\n *\n * @param  String  content  Desired page content\n * @return Casper\n */\nCasper.prototype.setContent = function setContent(content) {\n    \"use strict\";\n    this.checkStarted();\n    this.page.content = content;\n    return this;\n};\n\n\n/**\n * Sets a value to form field by CSS3, XPath selector or by its name attribute or label text.\n *\n * @param String|Object selector    CSS3, XPath, name or label\n * @param Mixed         value       Value being set\n * @param String|Object form        (optional) CSS3 or XPath selector of form\n * @param Object        options     Options to setFieldValue, it accepts:\n *                                  - options.selectorType name|labes|xpath|css3 - type of selector, where\n *                                    CSS3 and XPath(object) is autodetected (need not be set)\n */\nCasper.prototype.setFieldValue = function setFieldValue(selector, value, form, options) {\n    \"use strict\";\n    this.checkStarted();\n\n    var selectorType = options && options.selectorType;\n    var result = this.evaluate(function _evaluate(selector, value, form, selectorType) {\n        if (selectorType) {\n            selector = __utils__.makeSelector(selector, selectorType);\n        }\n        return __utils__.setFieldValue(selector, value, form);\n    }, selector, value, form, selectorType);\n\n    if (!result) {\n        throw new CasperError(\"Unable to set field '\" + selector + \" to value: \" + value) +\n            ' in setFieldValue().';\n    }\n};\n\n/**\n * Alias to setFieldValue() with implicit type name\n *\n * @param String        name    Name of form field\n * @param Mixed         value   Value being set\n * @param String|Object form    (optional) CSS3 or XPath selector of form\n */\nCasper.prototype.setFieldValueName = function setFieldValueName(name, value, form) {\n    \"use strict\";\n    this.checkStarted();\n    this.setFieldValue(name, value, form, {'selectorType': 'name'});\n};\n\n/**\n * Alias to setFieldValue() with implicit type label\n *\n * @param String        name    Name of form field\n * @param Mixed         value   Value being set\n * @param String|Object form    (optional) CSS3 or XPath selector of form\n */\nCasper.prototype.setFieldValueLabel = function setFieldValueLabel(label, value, form) {\n    \"use strict\";\n    this.checkStarted();\n    this.setFieldValue(label, value, form, {'selectorType': 'label'});\n};\n\n/**\n * Sets current WebPage instance the credentials for HTTP authentication.\n *\n * @param  String  username\n * @param  String  password\n * @return Casper\n */\nCasper.prototype.setHttpAuth = function setHttpAuth(username, password) {\n    \"use strict\";\n    this.checkStarted();\n    this.page.settings.userName = username;\n    this.page.settings.password = password;\n    return this;\n};\n\n/**\n * Configures and starts Casper.\n *\n * @param  String   location  An optional location to open on start\n * @param  function then      Next step function to execute on page loaded (optional)\n * @return Casper\n */\nCasper.prototype.start = function start(location, then) {\n    \"use strict\";\n    /*eslint max-statements:0*/\n    this.emit('starting');\n    this.log('Starting...', \"info\");\n    this.startTime = new Date().getTime();\n    this.currentResponse = {};\n    this.history = [];\n    this.popups = pagestack.create();\n    this.steps = [];\n    this.step = 0;\n    // Option checks\n    if (this.logLevels.indexOf(this.options.logLevel) < 0) {\n        this.log(f(\"Unknown log level '%d', defaulting to 'warning'\", this.options.logLevel), \"warning\");\n        this.options.logLevel = \"warning\";\n    }\n    if (!utils.isWebPage(this.page)) {\n        this.page = this.mainPage = utils.isWebPage(this.options.page) ? this.options.page : createPage(this);\n    }\n    this.page.settings = utils.mergeObjects(this.page.settings, this.options.pageSettings);\n    if (utils.isClipRect(this.options.clipRect)) {\n        this.page.clipRect = this.options.clipRect;\n    }\n    if (utils.isObject(this.options.viewportSize)) {\n        this.page.viewportSize = this.options.viewportSize;\n    }\n    // timeout handling\n    if (utils.isNumber(this.options.timeout) && this.options.timeout > 0) {\n        this.log(f(\"Execution timeout set to %dms\", this.options.timeout), \"info\");\n        setTimeout(function _check(self) {\n            self.emit('timeout');\n            if (utils.isFunction(self.options.onTimeout)) {\n                self.options.onTimeout.call(self, self.options.timeout);\n            }\n        }, this.options.timeout, this);\n    }\n    this.started = true;\n    this.emit('started');\n    if (utils.isString(location) && location.length > 0) {\n        return this.thenOpen(location, utils.isFunction(then) ? then : this.createStep(function _step() {\n            this.log(\"start page is loaded\", \"debug\");\n        }, {skipLog: true}));\n    }\n    return this;\n};\n\n/**\n * Returns the current status of current instance\n *\n * @param  Boolean  asString  Export status object as string\n * @return Object\n */\nCasper.prototype.status = function status(asString) {\n    \"use strict\";\n    var properties = ['currentHTTPStatus', 'loadInProgress', 'navigationRequested',\n                      'options', 'pendingWait', 'requestUrl', 'started', 'step', 'url'];\n    var currentStatus = {};\n    properties.forEach(function(property) {\n        currentStatus[property] = this[property];\n    }.bind(this));\n    return asString === true ? utils.dump(currentStatus) : currentStatus;\n};\n\n/**\n * Schedules the next step in the navigation process.\n *\n * @param  function  step  A function to be called as a step\n * @return Casper\n */\nCasper.prototype.then = function then(step) {\n    \"use strict\";\n    this.checkStarted();\n    if (!utils.isFunction(step)) {\n        throw new CasperError(\"You can only define a step as a function\");\n    }\n    // check if casper is running\n    if (this.checker === null) {\n        // append step to the end of the queue\n        step.level = 0;\n        this.steps.push(step);\n    } else {\n        // insert substep a level deeper\n        try {\n            step.level = this.steps[this.step - 1].level + 1;\n        } catch (e) {\n            step.level = 0;\n        }\n        var insertIndex = this.step;\n        while (this.steps[insertIndex] && step.level === this.steps[insertIndex].level) {\n            insertIndex++;\n        }\n        this.steps.splice(insertIndex, 0, step);\n    }\n    this.emit('step.added', step);\n    return this;\n};\n\n/**\n * Adds a new navigation step for clicking on a provided link selector\n * and execute an optional next step.\n *\n * @param  String   selector        A DOM CSS3 compatible selector\n * @param  Function then            Next step function to execute on page loaded (optional)\n * @return Casper\n * @see    Casper#click\n * @see    Casper#then\n */\nCasper.prototype.thenClick = function thenClick(selector, then) {\n    \"use strict\";\n    this.checkStarted();\n    this.then(function _step() {\n        this.click(selector);\n    });\n    return utils.isFunction(then) ? this.then(then) : this;\n};\n\n/**\n * Adds a new navigation step to perform code evaluation within the\n * current retrieved page DOM.\n *\n * @param  function  fn       The function to be evaluated within current page DOM\n * @param  Array     args...  The rest of arguments passed to fn\n * @return Casper\n * @see    Casper#evaluate\n */\nCasper.prototype.thenEvaluate = function thenEvaluate(fn) {\n    \"use strict\";\n    this.checkStarted();\n    var args = arguments;\n    return this.then(function _step() {\n        this.evaluate.apply(this, args);\n    });\n};\n\n/**\n * Adds a new navigation step for opening the provided location.\n *\n * @param  String   location  The URL to load\n * @param  function then      Next step function to execute on page loaded (optional)\n * @return Casper\n * @see    Casper#open\n */\nCasper.prototype.thenOpen = function thenOpen(location, settings, then) {\n    \"use strict\";\n    this.checkStarted();\n    if (!(settings && !utils.isFunction(settings))) {\n      then = settings;\n      settings = null;\n    }\n    this.then(this.createStep(function _step() {\n        this.open(location, settings);\n    }, {\n        skipLog: true\n    }));\n    return utils.isFunction(then) ? this.then(then) : this;\n};\n\n/**\n * Adds a step which bypasses `nb` steps.\n *\n * @param  Integer  nb  Number of steps to bypass\n */\nCasper.prototype.thenBypass = function thenBypass(nb) {\n    \"use strict\";\n    return this.then(function _thenBypass() {\n        this.bypass(nb);\n    });\n};\n\n/**\n * Bypass `nb` steps if condition is true.\n *\n * @param  Mixed    condition  Test condition\n * @param  Integer  nb         Number of steps to bypass\n */\nCasper.prototype.thenBypassIf = function thenBypassIf(condition, nb) {\n    \"use strict\";\n    return this.then(function _thenBypassIf() {\n        if (utils.isFunction(condition)) {\n            condition = condition.call(this);\n        }\n        if (utils.isTruthy(condition)) {\n            this.bypass(nb);\n        }\n    });\n};\n\n/**\n * Bypass `nb` steps if condition is false.\n *\n * @param Mixed    condition  Test condition\n * @param Integer  nb         Number of tests to bypass\n */\nCasper.prototype.thenBypassUnless = function thenBypassUnless(condition, nb) {\n    \"use strict\";\n    return this.then(function _thenBypassUnless() {\n        if (utils.isFunction(condition)) {\n            condition = condition.call(this);\n        }\n        if (utils.isFalsy(condition)) {\n            this.bypass(nb);\n        }\n    });\n};\n\n/**\n * Adds a new navigation step for opening and evaluate an expression\n * against the DOM retrieved from the provided location.\n *\n * @param  String    location  The url to open\n * @param  function  fn        The function to be evaluated within current page DOM\n * @param  Array     args...   The rest of arguments will passed to the evaluate function\n * @return Casper\n * @see    Casper#evaluate\n * @see    Casper#open\n */\nCasper.prototype.thenOpenAndEvaluate = function thenOpenAndEvaluate(location, fn) {\n    \"use strict\";\n    this.checkStarted();\n    var args = [].slice.call(arguments, 1);\n    return this.thenOpen(location).thenEvaluate.apply(this, args);\n};\n\n/**\n * Returns a string representation of current instance\n *\n * @return String\n */\nCasper.prototype.toString = function toString() {\n    \"use strict\";\n    return '[object Casper], currently at ' + this.getCurrentUrl();\n};\n\n/**\n * Clear all wait processes.\n *\n * @return Casper\n */\nCasper.prototype.unwait = function unwait() {\n    \"use strict\";\n    this.waiters.forEach(function(interval) {\n        if (interval) {\n            clearInterval(interval);\n        }\n    });\n    this.waiters = [];\n    return this;\n};\n\n/**\n * Sets the user-agent string currently used when requesting urls.\n *\n * @param  String  userAgent  User agent string\n * @return String\n */\nCasper.prototype.userAgent = function userAgent(agent) {\n    \"use strict\";\n    this.options.pageSettings.userAgent = agent;\n    if (this.started && this.page) {\n        this.page.settings.userAgent = agent;\n    }\n    return this;\n};\n\n/**\n * Changes the current viewport size. That operation is asynchronous as the page\n * has to reflow its contents accordingly.\n *\n * @param  Number    width   The viewport width, in pixels\n * @param  Number    height  The viewport height, in pixels\n * @param  Function  then    Next step to process (optional)\n * @return Casper\n */\nCasper.prototype.viewport = function viewport(width, height, then) {\n    \"use strict\";\n    this.checkStarted();\n    if (!utils.isNumber(width) || !utils.isNumber(height) || width <= 0 || height <= 0) {\n        throw new CasperError(f(\"Invalid viewport: %dx%d\", width, height));\n    }\n\n    this.page.viewportSize = {\n        width: width,\n        height: height\n    };\n    // setting the viewport could cause a redraw and it can take\n    // time. At least for Gecko, we should wait a bit, even\n    // if this time could not be enough.\n    var time = (phantom.casperEngine === 'slimerjs'?400:100);\n    return this.then(function _step() {\n        this.waitStart();\n        setTimeout(function _check(self) {\n            self.waitDone();\n            self.emit('viewport.changed', [width, height]);\n            if (utils.isFunction(then)){\n                self.then(then);\n            }\n        }, time, this);\n    });\n};\n\n/**\n * Checks if an element matching the provided DOM CSS3/XPath selector is visible\n * current page DOM by checking that offsetWidth and offsetHeight are\n * both non-zero.\n *\n * @param  String  selector  A DOM CSS3/XPath selector\n * @return Boolean\n */\nCasper.prototype.visible = function visible(selector) {\n    \"use strict\";\n    this.checkStarted();\n    return this.callUtils(\"visible\", selector);\n};\n\n/**\n * Checks if all elements matching the provided DOM CSS3/XPath selector are visible\n *\n * @param  String  selector  A DOM CSS3/XPath selector\n * @return Boolean\n */\nCasper.prototype.allVisible = function allVisible(selector) {\n    \"use strict\";\n    this.checkStarted();\n    return this.callUtils(\"allVisible\", selector);\n};\n\n/**\n * Displays a warning message onto the console and logs the event. Also emits a\n * `warn` event with the message passed.\n *\n * @param  String  message\n * @return Casper\n */\nCasper.prototype.warn = function warn(message) {\n    \"use strict\";\n    this.log(message, \"warning\", \"phantom\");\n    var formatted = f.apply(null, [\"⚠  \" + message].concat([].slice.call(arguments, 1)));\n    this.emit('warn', message);\n    return this.echo(formatted, 'COMMENT');\n};\n\n/**\n * Helper functions needed in wait*() methods. Casts timeout argument to integer and checks if next step\n * function is really a function and if it has been given (if required - depending on isThenRequired flag).\n *\n * @param   Number   timeout        The max amount of time to wait, in milliseconds\n * @param   Function then           Next step to process (optional or required, depending on isThenRequired flag)\n * @param   String   methodName     Name of the method, inside of which the helper has been called\n * @param   Number   defaultTimeout The default max amount of time to wait, in milliseconds (optional)\n * @param   Boolean  isThenRequired Determines if the next step function should be considered as required\n * @returns Number\n */\nfunction getTimeoutAndCheckNextStepFunction(timeout, then, methodName, defaultTimeout, isThenRequired) {\n    if (isThenRequired || then) {\n        var isFunction = utils.isFunction(then); // Optimization to perform \"isFunction\" check only once.\n\n        if (isThenRequired && !isFunction) {\n            throw new CasperError(methodName + \"() needs a step function\");\n        } else if (then && !isFunction) {\n            throw new CasperError(methodName + \"() next step definition must be a function\");\n        }\n    }\n\n    timeout = ~~timeout || ~~defaultTimeout;\n    if (timeout < 0) {\n        throw new CasperError(methodName + \"() only accepts an integer >= 0 as a timeout value\");\n    }\n\n    return timeout;\n}\n\n/**\n * Adds a new step that will wait for a given amount of time (expressed\n * in milliseconds) before processing an optional next one.\n *\n * @param  Number    timeout  The max amount of time to wait, in milliseconds\n * @param  Function  then     Next step to process (optional)\n * @return Casper\n */\nCasper.prototype.wait = function wait(timeout, then) {\n    \"use strict\";\n    this.checkStarted();\n    timeout = getTimeoutAndCheckNextStepFunction(timeout, then, 'wait');\n    return this.then(function _step() {\n        this.waitStart();\n        setTimeout(function _check(self) {\n            self.log(f(\"wait() finished waiting for %dms.\", timeout), \"info\");\n            if (then) {\n                try {\n                    then.call(self, self);\n                } catch (error) {\n                    self.emit('wait.error', error);\n                    if (!self.options.silentErrors) {\n                        throw error;\n                    }\n                }\n            }\n            self.waitDone();\n        }, timeout, this);\n    });\n};\n\nCasper.prototype.waitStart = function waitStart() {\n    \"use strict\";\n    this.emit('wait.start');\n    this.pendingWait = true;\n};\n\nCasper.prototype.waitDone = function waitDone() {\n    \"use strict\";\n    this.emit('wait.done');\n    this.pendingWait = false;\n};\n\n/**\n * Waits until a function returns true to process a next step.\n *\n * @param  Function  testFx     A function to be evaluated for returning condition satisfecit\n * @param  Function  then       The next step to perform (optional)\n * @param  Function  onTimeout  A callback function to call on timeout (optional)\n * @param  Number    timeout    The max amount of time to wait, in milliseconds (optional)\n * @param  Object    details    A property bag of information about the condition being waited on (optional)\n * @return Casper\n */\nCasper.prototype.waitFor = function waitFor(testFx, then, onTimeout, timeout, details) {\n    \"use strict\";\n    this.checkStarted();\n    if (!utils.isFunction(testFx)) {\n        throw new CasperError(\"waitFor() needs a test function\");\n    }\n    timeout = getTimeoutAndCheckNextStepFunction(timeout, then, 'waitFor', this.options.waitTimeout);\n    details = details || { testFx: testFx };\n    return this.then(function _step() {\n        this.waitStart();\n        var start = new Date().getTime();\n        var condition = false;\n        var interval = setInterval(function _check(self) {\n            /*eslint max-statements: [1, 20]*/\n            if ((new Date().getTime() - start < timeout) && !condition) {\n                condition = testFx.call(self, self);\n                return;\n            }\n            self.waitDone();\n            if (!condition) {\n                self.log(\"Casper.waitFor() timeout\", \"warning\");\n                var onWaitTimeout = onTimeout ? onTimeout : self.options.onWaitTimeout;\n                self.emit('waitFor.timeout', timeout, details);\n                clearInterval(interval); // refs #383\n                if (!utils.isFunction(onWaitTimeout)) {\n                    throw new CasperError('Invalid timeout function');\n                }\n                try {\n                    return onWaitTimeout.call(self, timeout, details);\n                } catch (error) {\n                    self.emit('waitFor.timeout.error', error);\n                    if (!self.options.silentErrors) {\n                        throw error;\n                    }\n                }\n            } else {\n                self.log(f(\"waitFor() finished in %dms.\", new Date().getTime() - start), \"info\");\n                clearInterval(interval);\n                if (then) {\n                    self.then(then);\n                }\n            }\n        }, this.options.retryTimeout, this);\n        this.waiters.push(interval);\n    });\n};\n\n/**\n * Waits until any alert is triggered.\n *\n * @param  Function  then       The next step to perform (required)\n * @param  Function  onTimeout  A callback function to call on timeout (optional)\n * @param  Number    timeout    The max amount of time to wait, in milliseconds (optional)\n * @return Casper\n */\nCasper.prototype.waitForAlert = function(then, onTimeout, timeout) {\n    \"use strict\";\n    timeout = getTimeoutAndCheckNextStepFunction(timeout, then, 'waitForAlert', undefined, true);\n    var message;\n    function alertCallback(msg) {\n        message = msg;\n    }\n    this.once(\"remote.alert\", alertCallback);\n    return this.waitFor(function isAlertReceived() {\n        return message !== undefined;\n    }, function onAlertReceived() {\n        this.then(this.createStep(then, {data: message}));\n    }, onTimeout, timeout);\n};\n\n/**\n * Waits for a popup page having its url matching the provided pattern to be opened\n * and loaded.\n *\n * @param  String|RegExp  urlPattern  The popup url pattern\n * @param  Function       then        The next step function (optional)\n * @param  Function       onTimeout   Function to call on operation timeout (optional)\n * @param  Number         timeout     Timeout in milliseconds (optional)\n * @return Casper\n */\nCasper.prototype.waitForPopup = function waitForPopup(urlPattern, then, onTimeout, timeout) {\n    \"use strict\";\n    timeout = getTimeoutAndCheckNextStepFunction(timeout, then, 'waitForPopup');\n    return this.waitFor(function() {\n        try {\n            this.popups.find(urlPattern);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }, then, onTimeout, timeout, { popup: urlPattern });\n};\n\n/**\n * Waits until a given resource is loaded\n *\n * @param  String/Function/RegExp  test       A function to test if the resource exists.\n *                                            A string will be matched against the resources url.\n * @param  Function                then       The next step to perform (optional)\n * @param  Function                onTimeout  A callback function to call on timeout (optional)\n * @param  Number                  timeout    The max amount of time to wait, in milliseconds (optional)\n * @return Casper\n */\nCasper.prototype.waitForResource = function waitForResource(test, then, onTimeout, timeout) {\n    \"use strict\";\n    this.checkStarted();\n    timeout = getTimeoutAndCheckNextStepFunction(timeout, then, 'waitForResource', this.options.waitTimeout);\n    return this.waitFor(function _check() {\n        return this.resourceExists(test);\n    }, then, onTimeout, timeout, { resource: test });\n};\n\n/**\n * Waits for a given url to be loaded.\n *\n * @param  String|RegExp  url  The url to wait for\n * @param  Function         then       The next step to perform (optional)\n * @param  Function         onTimeout  A callback function to call on timeout (optional)\n * @return Casper\n */\nCasper.prototype.waitForUrl = function waitForUrl(url, then, onTimeout, timeout) {\n    \"use strict\";\n    this.checkStarted();\n    timeout = getTimeoutAndCheckNextStepFunction(timeout, then, 'waitForUrl', this.options.waitTimeout);\n    return this.waitFor(function _check() {\n        if (utils.isString(url)) {\n            return this.getCurrentUrl().indexOf(url) !== -1;\n        } else if (utils.isRegExp(url)) {\n            return url.test(this.getCurrentUrl());\n        }\n        throw new CasperError('invalid url argument');\n    }, then, onTimeout, timeout, { url: url });\n};\n\n/**\n * Waits until an element matching the provided DOM CSS3/XPath selector exists in\n * remote DOM to process a next step.\n *\n * @param  String    selector   A DOM CSS3/XPath selector\n * @param  Function  then       The next step to perform (optional)\n * @param  Function  onTimeout  A callback function to call on timeout (optional)\n * @param  Number    timeout    The max amount of time to wait, in milliseconds (optional)\n * @return Casper\n */\nCasper.prototype.waitForSelector = function waitForSelector(selector, then, onTimeout, timeout) {\n    \"use strict\";\n    this.checkStarted();\n    timeout = getTimeoutAndCheckNextStepFunction(timeout, then, 'waitForSelector', this.options.waitTimeout);\n    return this.waitFor(function _check() {\n        return this.exists(selector);\n    }, then, onTimeout, timeout, { selector: selector });\n};\n\n/**\n * Waits until the page contains given HTML text or matches a given RegExp.\n *\n * @param  String|RegExp  pattern    Text or RegExp to wait for\n * @param  Function       then       The next step to perform (optional)\n * @param  Function       onTimeout  A callback function to call on timeout (optional)\n * @param  Number         timeout    The max amount of time to wait, in milliseconds (optional)\n * @return Casper\n */\nCasper.prototype.waitForText = function(pattern, then, onTimeout, timeout) {\n    \"use strict\";\n    this.checkStarted();\n    timeout = getTimeoutAndCheckNextStepFunction(timeout, then, 'waitForText', this.options.waitTimeout);\n    return this.waitFor(function _check() {\n        var content = this.getPageContent();\n        if (utils.isRegExp(pattern)) {\n            return pattern.test(content);\n        }\n        return content.indexOf(pattern) !== -1;\n    }, then, onTimeout, timeout, { text: pattern });\n};\n\n/**\n * Waits until the text on an element matching the provided DOM CSS3/XPath selector\n * is changed to a different value.\n *\n * @param String    selector    A DOM CSS3/XPath selector\n * @param Function  then        The next step to preform (optional)\n * @param Function  onTimeout   A callback function to call on timeout (optional)\n * @param Number    timeout     The max amount of time to wait, in milliseconds (optional)\n * @return Casper\n */\nCasper.prototype.waitForSelectorTextChange = function(selector, then, onTimeout, timeout) {\n    \"use strict\";\n    this.checkStarted();\n    timeout = getTimeoutAndCheckNextStepFunction(timeout, then, 'waitForSelectorTextChange', this.options.waitTimeout);\n    var currentSelectorText = this.fetchText(selector);\n    return this.waitFor(function _check() {\n        return currentSelectorText !== this.fetchText(selector);\n    }, then, onTimeout, timeout, { selectorTextChange: selector });\n};\n\n/**\n * Waits until an element matching the provided DOM CSS3/XPath selector does not\n * exist in the remote DOM to process a next step.\n *\n * @param  String    selector   A DOM CSS3/XPath selector\n * @param  Function  then       The next step to perform (optional)\n * @param  Function  onTimeout  A callback function to call on timeout (optional)\n * @param  Number    timeout    The max amount of time to wait, in milliseconds (optional)\n * @return Casper\n */\nCasper.prototype.waitWhileSelector = function waitWhileSelector(selector, then, onTimeout, timeout) {\n    \"use strict\";\n    this.checkStarted();\n    timeout = getTimeoutAndCheckNextStepFunction(timeout, then, 'waitWhileSelector', this.options.waitTimeout);\n    return this.waitFor(function _check() {\n        return !this.exists(selector);\n    }, then, onTimeout, timeout, {\n        selector: selector,\n        waitWhile: true\n    });\n};\n\n/**\n * Waits until an element matching the provided DOM CSS3/XPath selector is\n * visible in the remote DOM to process a next step.\n *\n * @param  String    selector   A DOM CSS3/XPath selector\n * @param  Function  then       The next step to perform (optional)\n * @param  Function  onTimeout  A callback function to call on timeout (optional)\n * @param  Number    timeout    The max amount of time to wait, in milliseconds (optional)\n * @return Casper\n */\nCasper.prototype.waitUntilVisible = function waitUntilVisible(selector, then, onTimeout, timeout) {\n    \"use strict\";\n    this.checkStarted();\n    timeout = getTimeoutAndCheckNextStepFunction(timeout, then, 'waitUntilVisible', this.options.waitTimeout);\n    return this.waitFor(function _check() {\n        return this.visible(selector);\n    }, then, onTimeout, timeout, { visible: selector });\n};\n\n/**\n * Waits until an element matching the provided DOM CSS3/XPath selector is no\n * longer visible in remote DOM to process a next step.\n *\n * @param  String    selector   A DOM CSS3/XPath selector\n * @param  Function  then       The next step to perform (optional)\n * @param  Function  onTimeout  A callback function to call on timeout (optional)\n * @param  Number    timeout    The max amount of time to wait, in milliseconds (optional)\n * @return Casper\n */\nCasper.prototype.waitWhileVisible = function waitWhileVisible(selector, then, onTimeout, timeout) {\n    \"use strict\";\n    this.checkStarted();\n    timeout = getTimeoutAndCheckNextStepFunction(timeout, then, 'waitWhileVisible', this.options.waitTimeout);\n    return this.waitFor(function _check() {\n        return !this.visible(selector);\n    }, then, onTimeout, timeout, {\n        visible: selector,\n        waitWhile: true\n    });\n};\n\n/**\n * Makes the provided frame page as the currently active one. Note that the\n * active page will be reverted when finished.\n *\n * @param  String|Number    frameInfo  Target frame name or number\n * @param  Function  then       Next step function\n * @return Casper\n */\nCasper.prototype.withFrame = function withFrame(frameInfo, then) {\n    \"use strict\";\n    this.then(function _step() {\n        if (utils.isNumber(frameInfo)) {\n            if (frameInfo > this.page.childFramesCount() - 1) {\n                throw new CasperError(f('Frame number \"%d\" is out of bounds.', frameInfo));\n            }\n        } else if (this.page.childFramesName().indexOf(frameInfo) === -1) {\n            throw new CasperError(f('No frame named \"%s\" was found.', frameInfo));\n        }\n        // make the frame page the currently active one\n        this.page.switchToChildFrame(frameInfo);\n    });\n    try {\n        this.then(then);\n    } catch (e) {\n        // revert to main page on error\n        this.warn(\"Error while processing frame step: \" + e);\n        this.page.switchToParentFrame();\n        throw e;\n    }\n    return this.then(function _step() {\n        // revert to main page\n        this.page.switchToParentFrame();\n    });\n};\n\n/**\n * Makes the provided frame page as the currently active one. Note that the\n * active page will be reverted when finished.\n *\n * @param  String|RegExp|WebPage  popup  Target frame page information\n * @param  Function               then   Next step function\n * @return Casper\n */\nCasper.prototype.withPopup = function withPopup(popupInfo, then) {\n    \"use strict\";\n    this.then(function _step() {\n        var popupPage = this.popups.find(popupInfo);\n        if (!utils.isFunction(then)) {\n            throw new CasperError(\"withPopup() requires a step function.\");\n        }\n        // make the popup page the currently active one\n        this.page = popupPage;\n    });\n    try {\n        this.then(then);\n    } catch (e) {\n        // revert to main page on error\n        this.log(\"error while processing popup step: \" + e, \"error\");\n        this.page = this.mainPage;\n        throw e;\n    }\n    return this.then(function _step() {\n        // revert to main page\n        this.page = this.mainPage;\n    });\n};\n\n/**\n* Allow user to create a new page object after calling a casper.page.close()\n* @return WebPage\n*/\n\nCasper.prototype.newPage = function newPage() {\n    \"use strict\";\n    this.checkStarted();\n    this.page.close();\n    this.page = this.mainPage = createPage(this);\n    this.page.settings = utils.mergeObjects(this.page.settings, this.options.pageSettings);\n    if (utils.isClipRect(this.options.clipRect)) {\n        this.page.clipRect = this.options.clipRect;\n    }\n    if (utils.isObject(this.options.viewportSize)) {\n        this.page.viewportSize = this.options.viewportSize;\n    }\n    return this.page;\n};\n\n/**\n * Changes the current page zoom factor.\n *\n * @param  Number  factor  The zoom factor\n * @return Casper\n */\nCasper.prototype.zoom = function zoom(factor) {\n    \"use strict\";\n    this.checkStarted();\n    if (!utils.isNumber(factor) || factor <= 0) {\n        throw new CasperError(\"Invalid zoom factor: \" + factor);\n    }\n    this.page.zoomFactor = factor;\n    return this;\n};\n\n/**\n * Extends Casper's prototype with provided one.\n *\n * @param  Object  proto  Prototype methods to add to Casper\n * @deprecated\n * @since 0.6\n */\nCasper.extend = function(proto) {\n    \"use strict\";\n    this.emit(\"deprecated\", \"Casper.extend() has been deprecated since 0.6; check the docs\");\n    if (!utils.isObject(proto)) {\n        throw new CasperError(\"extends() only accept objects as prototypes\");\n    }\n    utils.mergeObjects(Casper.prototype, proto);\n};\n\nexports.Casper = Casper;\n\n/**\n * Creates a new WebPage instance for Casper use.\n *\n * @param  Casper  casper  A Casper instance\n * @return WebPage\n */\nfunction createPage(casper) {\n    /*eslint max-statements:0*/\n    \"use strict\";\n    var page = require('webpage').create();\n    page.onAlert = function onAlert(message) {\n        casper.log('[alert] ' + message, \"info\", \"remote\");\n        casper.emit('remote.alert', message);\n        if (utils.isFunction(casper.options.onAlert)) {\n            casper.options.onAlert.call(casper, casper, message);\n        }\n    };\n    page.onConfirm = function onConfirm(message) {\n        if ('page.confirm' in casper._filters) {\n            return casper.filter('page.confirm', message);\n        }\n        return true;\n    };\n    page.onConsoleMessage = function onConsoleMessage(msg) {\n        // client utils casper console message\n        var consoleTest = /^\\[casper\\.echo\\]\\s?([\\s\\S]*)/.exec(msg);\n        if (consoleTest && consoleTest.length === 2) {\n            casper.echo(consoleTest[1]);\n            return; // don't trigger remote.message event for these\n        }\n        // client utils log messages\n        var logLevel = \"info\",\n            logTest = /^\\[casper:(\\w+)\\]\\s?([\\s\\S]*)/m.exec(msg);\n        if (logTest && logTest.length === 3) {\n            logLevel = logTest[1];\n            msg = logTest[2];\n            casper.log(msg, logLevel, \"remote\");\n        } else {\n            casper.emit('remote.message', msg);\n        }\n    };\n\n    page.onCallback = function onCallback(data){\n        casper.emit('remote.callback',data);\n    };\n\n    page.onError = function onError(msg, trace) {\n        casper.emit('page.error', msg, trace);\n    };\n    page.onInitialized = function onInitialized() {\n        casper.emit('page.initialized', page);\n        if (utils.isFunction(casper.options.onPageInitialized)) {\n            casper.log(\"Post-configuring WebPage instance\", \"debug\");\n            casper.options.onPageInitialized.call(casper, page);\n        }\n    };\n    page.onLoadStarted = function onLoadStarted() {\n        // in some case, there is no navigation requested event, so\n        // be sure that browserInitializing is false to not block checkStep()\n        casper.browserInitializing = false;\n        casper.loadInProgress = true;\n        casper.emit('load.started');\n    };\n    page.onLoadFinished = function onLoadFinished(status) {\n        /*eslint max-statements:0*/\n        if (status !== \"success\") {\n            casper.emit('load.failed', {\n                status:      status,\n                http_status: casper.currentHTTPStatus,\n                url:         casper.requestUrl\n            });\n            var message = 'Loading resource failed with status=' + status;\n            if (casper.currentHTTPStatus) {\n                message += f(' (HTTP %d)', casper.currentHTTPStatus);\n            }\n            message += ': ' + casper.requestUrl;\n            casper.log(message, \"warning\");\n            casper.navigationRequested = false;\n            casper.browserInitializing = false;\n            if (utils.isFunction(casper.options.onLoadError)) {\n                casper.options.onLoadError.call(casper, casper, casper.requestUrl, status);\n            }\n        }\n        // local client scripts\n        casper.injectClientScripts();\n        // remote client scripts\n        casper.includeRemoteScripts();\n        // Client-side utils injection\n        casper.injectClientUtils();\n        // history\n        casper.history.push(casper.getCurrentUrl());\n        casper.emit('load.finished', status);\n        casper.loadInProgress = false;\n    };\n    page.onNavigationRequested = function onNavigationRequested(url, type, willNavigate, isMainFrame) {\n        casper.log(f('Navigation requested: url=%s, type=%s, willNavigate=%s, isMainFrame=%s',\n                     url, type, willNavigate, isMainFrame), \"debug\");\n        casper.browserInitializing = false;\n        if (isMainFrame && casper.requestUrl !== url) {\n            var currentUrl = casper.requestUrl;\n            var newUrl = url;\n            var pos = currentUrl.indexOf('#');\n            if (pos !== -1) {\n                currentUrl = currentUrl.substring(0, pos);\n            }\n            pos = newUrl.indexOf('#');\n            if (pos !== -1) {\n                newUrl = newUrl.substring(0, pos);\n            }\n            // for URLs that are only different by their hash part\n            // or if navigation locked (willNavigate == false)\n            // don't turn navigationRequested to true, because\n            // there will not be loadStarted, loadFinished events\n            // so it could cause issues (for exemple, checkStep that\n            // do no execute the next step -> infinite loop on checkStep)\n            if (willNavigate && currentUrl !== newUrl)\n                casper.navigationRequested  = true;\n\n            if (willNavigate) {\n                casper.requestUrl = url;\n            }\n        }\n        casper.emit('navigation.requested', url, type, willNavigate, isMainFrame);\n    };\n    page.onPageCreated = function onPageCreated(popupPage) {\n        casper.emit('popup.created', popupPage);\n        popupPage.onLoadFinished = function onLoadFinished() {\n            // SlimerJS needs this line of code because of issue\n            // https://github.com/laurentj/slimerjs/issues/48\n            // else checkStep turns into an infinite loop\n            // after clicking on an <a target=\"_blank\">\n            casper.navigationRequested  = false;\n            casper.popups.push(popupPage);\n            casper.emit('popup.loaded', popupPage);\n        };\n        popupPage.onClosing = function onClosing(closedPopup) {\n            casper.popups.clean();\n            casper.emit('popup.closed', closedPopup);\n        };\n    };\n    page.onPrompt = function onPrompt(message, value) {\n        return casper.filter('page.prompt', message, value);\n    };\n    page.onResourceReceived = function onResourceReceived(resource) {\n        http.augmentResponse(resource);\n        casper.emit('resource.received', resource);\n        if (utils.isFunction(casper.options.onResourceReceived)) {\n            casper.options.onResourceReceived.call(casper, casper, resource);\n        }\n        casper.handleReceivedResource(resource);\n    };\n    page.onResourceRequested = function onResourceRequested(requestData, request) {\n        casper.emit('resource.requested', requestData, request);\n        var checkUrl = ((phantom.casperEngine === 'phantomjs' && utils.ltVersion(phantom.version, '2.1.0')) ||\n                   (phantom.casperEngine === 'slimerjs' && utils.ltVersion(phantom.version, '0.10.0'))) ? utils.decodeUrl(requestData.url) : requestData.url;\n        if (checkUrl === casper.requestUrl) {\n            casper.emit('page.resource.requested', requestData, request);\n        }\n        if (utils.isFunction(casper.options.onResourceRequested)) {\n            casper.options.onResourceRequested.call(casper, casper, requestData, request);\n        }\n    };\n    page.onResourceError = function onResourceError(resourceError) {\n        casper.emit('resource.error', resourceError);\n    };\n    page.onUrlChanged = function onUrlChanged(url) {\n        casper.log(f('url changed to \"%s\"', url), \"debug\");\n        casper.navigationRequested = false;\n        casper.emit('url.changed', url);\n    };\n    casper.emit('page.created', page);\n    return page;\n}\n","/home/travis/build/npmtest/node-npmtest-casperjs/node_modules/casperjs/modules/clientutils.js":"/*!\n * Casper is a navigation utility for PhantomJS.\n *\n * Documentation: http://casperjs.org/\n * Repository:    http://github.com/casperjs/casperjs\n *\n * Copyright (c) 2011-2012 Nicolas Perriault\n *\n * Part of source code is Copyright Joyent, Inc. and other Node contributors.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n/*global escape, NodeList*/\n\n(function(exports) {\n    \"use strict\";\n\n    exports.create = function create(options) {\n        return new this.ClientUtils(options);\n    };\n\n    /**\n     * Casper client-side helpers.\n     */\n    exports.ClientUtils = function ClientUtils(options) {\n        /*eslint max-statements:0, no-multi-spaces:0*/\n        // private members\n        var BASE64_ENCODE_CHARS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n        var BASE64_DECODE_CHARS = [\n            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63,\n            52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1,\n            -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,\n            15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1,\n            -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n            41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1\n        ];\n        var SUPPORTED_SELECTOR_TYPES = ['css', 'xpath'];\n\n        // public members\n        this.options = options || {};\n        this.options.scope = this.options.scope || document;\n\n        /**\n         * Calls a method part of the current prototype, with arguments.\n         *\n         * @param  {String} method Method name\n         * @param  {Array}  args   arguments\n         * @return {Mixed}\n         */\n        this.__call = function __call(method, args) {\n            if (method === \"__call\") {\n                return;\n            }\n            try {\n                return this[method].apply(this, args);\n            } catch (err) {\n                err.__isCallError = true;\n                return err;\n            }\n        };\n\n        /**\n         * Clicks on the DOM element behind the provided selector.\n         *\n         * @param  String  selector  A CSS3 selector to the element to click\n         * @param  {Number} x         X position\n         * @param  {Number} y         Y position\n         * @return Boolean\n         */\n        this.click = function click(selector, x, y) {\n            return this.mouseEvent('click', selector, x, y);\n        };\n\n        /**\n         * Decodes a base64 encoded string. Succeeds where window.atob() fails.\n         *\n         * @param  String  str  The base64 encoded contents\n         * @return string\n         */\n        this.decode = function decode(str) {\n            /*eslint max-statements:0, complexity:0 */\n            var c1, c2, c3, c4, i = 0, len = str.length, out = \"\";\n            while (i < len) {\n                do {\n                    c1 = BASE64_DECODE_CHARS[str.charCodeAt(i++) & 0xff];\n                } while (i < len && c1 === -1);\n                if (c1 === -1) {\n                    break;\n                }\n                do {\n                    c2 = BASE64_DECODE_CHARS[str.charCodeAt(i++) & 0xff];\n                } while (i < len && c2 === -1);\n                if (c2 === -1) {\n                    break;\n                }\n                out += String.fromCharCode(c1 << 2 | (c2 & 0x30) >> 4);\n                do {\n                    c3 = str.charCodeAt(i++) & 0xff;\n                    if (c3 === 61) {\n                        return out;\n                    }\n                    c3 = BASE64_DECODE_CHARS[c3];\n                } while (i < len && c3 === -1);\n                if (c3 === -1) {\n                    break;\n                }\n                out += String.fromCharCode((c2 & 0XF) << 4 | (c3 & 0x3C) >> 2);\n                do {\n                    c4 = str.charCodeAt(i++) & 0xff;\n                    if (c4 === 61) {\n                        return out;\n                    }\n                    c4 = BASE64_DECODE_CHARS[c4];\n                } while (i < len && c4 === -1);\n                if (c4 === -1) {\n                    break;\n                }\n                out += String.fromCharCode((c3 & 0x03) << 6 | c4);\n            }\n            return out;\n        };\n\n        /**\n         * Echoes something to casper console.\n         *\n         * @param  String  message\n         * @return\n         */\n        this.echo = function echo(message) {\n            console.log(\"[casper.echo] \" + message);\n        };\n\n        /**\n         * Checks if a given DOM element is visible in remove page.\n         *\n         * @param  Object   element  DOM element\n         * @return Boolean\n         */\n        this.elementVisible = function elementVisible(elem) {\n            var style;\n            try {\n                style = window.getComputedStyle(elem, null);\n            } catch (e) {\n                return false;\n            }\n            var hidden = style.visibility === 'hidden' || style.display === 'none';\n            if (hidden) {\n                return false;\n            }\n            if (style.display === \"inline\" || style.display === \"inline-block\") {\n                return true;\n            }\n            return elem.clientHeight > 0 && elem.clientWidth > 0;\n        };\n\n        /**\n         * Base64 encodes a string, even binary ones. Succeeds where\n         * window.btoa() fails.\n         *\n         * @param  String  str  The string content to encode\n         * @return string\n         */\n        this.encode = function encode(str) {\n            /*eslint max-statements:0 */\n            var out = \"\", i = 0, len = str.length, c1, c2, c3;\n            while (i < len) {\n                c1 = str.charCodeAt(i++) & 0xff;\n                if (i === len) {\n                    out += BASE64_ENCODE_CHARS.charAt(c1 >> 2);\n                    out += BASE64_ENCODE_CHARS.charAt((c1 & 0x3) << 4);\n                    out += \"==\";\n                    break;\n                }\n                c2 = str.charCodeAt(i++);\n                if (i === len) {\n                    out += BASE64_ENCODE_CHARS.charAt(c1 >> 2);\n                    out += BASE64_ENCODE_CHARS.charAt((c1 & 0x3) << 4 | (c2 & 0xF0) >> 4);\n                    out += BASE64_ENCODE_CHARS.charAt((c2 & 0xF) << 2);\n                    out += \"=\";\n                    break;\n                }\n                c3 = str.charCodeAt(i++);\n                out += BASE64_ENCODE_CHARS.charAt(c1 >> 2);\n                out += BASE64_ENCODE_CHARS.charAt((c1 & 0x3) << 4 | (c2 & 0xF0) >> 4);\n                out += BASE64_ENCODE_CHARS.charAt((c2 & 0xF) << 2 | (c3 & 0xC0) >> 6);\n                out += BASE64_ENCODE_CHARS.charAt(c3 & 0x3F);\n            }\n            return out;\n        };\n\n        /**\n         * Checks if a given DOM element exists in remote page.\n         *\n         * @param  String  selector  CSS3 selector\n         * @return Boolean\n         */\n        this.exists = function exists(selector) {\n            try {\n                return this.findAll(selector).length > 0;\n            } catch (e) {\n                return false;\n            }\n        };\n\n        /**\n         * Fetches innerText within the element(s) matching a given CSS3\n         * selector.\n         *\n         * @param  String  selector  A CSS3 selector\n         * @return String\n         */\n        this.fetchText = function fetchText(selector) {\n            var text = '', elements = this.findAll(selector);\n            if (elements && elements.length) {\n                Array.prototype.forEach.call(elements, function _forEach(element) {\n                    text += element.textContent || element.innerText || element.value || '';\n                });\n            }\n            return text;\n        };\n\n        /**\n         * Fills a form with provided field values, and optionally submits it.\n         *\n         * @param  HTMLElement|String  form      A form element, or a CSS3 selector to a form element\n         * @param  Object              vals      Field values\n         * @param  String              findType  Element finder type (css, names, xpath, labels)\n         * @return Object                        An object containing setting result for each field, including file uploads\n         */\n        this.fill = function fill(form, vals, findType) {\n            findType = findType || \"names\";\n\n            /*eslint complexity:0*/\n            var out = {\n                errors: [],\n                fields: [],\n                files: []\n            };\n\n            if (!(form instanceof HTMLElement) || typeof form === \"string\") {\n                this.log(\"attempting to fetch form element from selector: '\" + form + \"'\", \"info\");\n                try {\n                    form = this.findOne(form);\n                } catch (e) {\n                    if (e.name === \"SYNTAX_ERR\") {\n                        out.errors.push(\"invalid form selector provided: '\" + form + \"'\");\n                        return out;\n                    }\n                }\n            }\n\n            if (!form) {\n                out.errors.push(\"form not found\");\n                return out;\n            }\n\n            for (var fieldSelector in vals) {\n                if (!vals.hasOwnProperty(fieldSelector)) {\n                    continue;\n                }\n                try {\n                    out.fields[fieldSelector] = this.setFieldValue(this.makeSelector(fieldSelector, findType), vals[fieldSelector], form);\n                } catch (err) {\n                    switch (err.name) {\n                        case \"FieldNotFound\":\n                            out.errors.push('Unable to find field element in form: ' + err.toString());\n                        break;\n                        case \"FileUploadError\":\n                            out.files.push({\n                                type: findType,\n                                selector: findType === \"labels\" ? '#' + err.id : fieldSelector,\n                                path: err.path\n                            });\n                        break;\n                        default:\n                            out.errors.push(err.toString());\n                    }\n                }\n            }\n            return out;\n        };\n\n        /**\n         * Finds all DOM elements matching by the provided selector.\n         *\n         * @param  String | Object   selector  CSS3 selector (String only) or XPath object\n         * @param  HTMLElement|null  scope     Element to search child elements within\n         * @return Array|undefined\n         */\n        this.findAll = function findAll(selector, scope) {\n            scope = scope instanceof HTMLElement ? scope : scope && this.findOne(scope) || this.options.scope;\n            try {\n                var pSelector = this.processSelector(selector);\n                if (pSelector.type === 'xpath') {\n                    return this.getElementsByXPath(pSelector.path, scope);\n                } else {\n                    return Array.prototype.slice.call(scope.querySelectorAll(pSelector.path));\n                }\n            } catch (e) {\n                this.log('findAll(): invalid selector provided \"' + selector + '\":' + e, \"error\");\n            }\n        };\n\n        /**\n         * Finds a DOM element by the provided selector.\n         *\n         * @param  String | Object   selector  CSS3 selector (String only) or XPath object\n         * @param  HTMLElement|null  scope     Element to search child elements within\n         * @return HTMLElement|undefined\n         */\n        this.findOne = function findOne(selector, scope) {\n            scope = scope instanceof HTMLElement ? scope : scope && this.findOne(scope) || this.options.scope;\n            try {\n                var pSelector = this.processSelector(selector);\n                if (pSelector.type === 'xpath') {\n                    return this.getElementByXPath(pSelector.path, scope);\n                } else {\n                    return scope.querySelector(pSelector.path);\n                }\n            } catch (e) {\n                this.log('findOne(): invalid selector provided \"' + selector + '\":' + e, \"error\");\n            }\n        };\n\n        /**\n         * Force target on <FORM> and <A> tag.\n         *\n         * @param  String     selector  CSS3 selector\n         * @param  String     A HTML target '_blank','_self','_parent','_top','framename'\n         * @return Boolean\n         */\n        this.forceTarget = function forceTarget(selector, target) {\n            var elem = this.findOne(selector);\n            while (!!elem && elem.tagName !== 'A' &&  elem.tagName !== 'FORM' && elem.tagName !== 'BODY'){\n                elem = elem.parentNode;\n            }\n            if (elem === 'A' || elem === 'FORM') {\n                elem.setAttribute('target', target);\n                return true;\n            }\n            return false;\n        };\n\n        /**\n         * Downloads a resource behind an url and returns its base64-encoded\n         * contents.\n         *\n         * @param  String  url     The resource url\n         * @param  String  method  The request method, optional (default: GET)\n         * @param  Object  data    The request data, optional\n         * @return String          Base64 contents string\n         */\n        this.getBase64 = function getBase64(url, method, data) {\n            return this.encode(this.getBinary(url, method, data));\n        };\n\n        /**\n         * Retrieves string contents from a binary file behind an url. Silently\n         * fails but log errors.\n         *\n         * @param   String   url     Url.\n         * @param   String   method  HTTP method.\n         * @param   Object   data    Request parameters.\n         * @return  String\n         */\n        this.getBinary = function getBinary(url, method, data) {\n            try {\n                return this.sendAJAX(url, method, data, false, {\n                    overrideMimeType: \"text/plain; charset=x-user-defined\"\n                });\n            } catch (e) {\n                if (e.name === \"NETWORK_ERR\" && e.code === 101) {\n                    this.log(\"getBinary(): Unfortunately, casperjs cannot make\"\n                        + \" cross domain ajax requests\", \"warning\");\n                }\n                this.log(\"getBinary(): Error while fetching \" + url + \": \" + e, \"error\");\n                return \"\";\n            }\n        };\n\n        /**\n         * Retrieves total document height.\n         * http://james.padolsey.com/javascript/get-document-height-cross-browser/\n         *\n         * @return {Number}\n         */\n        this.getDocumentHeight = function getDocumentHeight() {\n            return Math.max(\n                Math.max(document.body.scrollHeight, document.documentElement.scrollHeight),\n                Math.max(document.body.offsetHeight, document.documentElement.offsetHeight),\n                Math.max(document.body.clientHeight, document.documentElement.clientHeight)\n            );\n        };\n\n        /**\n         * Retrieves total document width.\n         * http://james.padolsey.com/javascript/get-document-width-cross-browser/\n         *\n         * @return {Number}\n         */\n        this.getDocumentWidth = function getDocumentWidth() {\n            return Math.max(\n                Math.max(document.body.scrollWidth, document.documentElement.scrollWidth),\n                Math.max(document.body.offsetWidth, document.documentElement.offsetWidth),\n                Math.max(document.body.clientWidth, document.documentElement.clientWidth)\n            );\n        };\n\n        /**\n         * Retrieves bounding rect coordinates of the HTML element matching the\n         * provided CSS3 selector in the following form:\n         *\n         * {top: y, left: x, width: w, height:, h}\n         *\n         * @param  String  selector\n         * @return Object or null\n         */\n        this.getElementBounds = function getElementBounds(selector) {\n            try {\n                var clipRect = this.findOne(selector).getBoundingClientRect();\n                return {\n                    top: clipRect.top,\n                    left: clipRect.left,\n                    width: clipRect.width,\n                    height: clipRect.height\n                };\n            } catch (e) {\n                this.log(\"Unable to fetch bounds for element \" + selector, \"warning\");\n            }\n        };\n\n        /**\n         * Retrieves the list of bounding rect coordinates for all the HTML elements matching the\n         * provided CSS3 selector, in the following form:\n         *\n         * [{top: y, left: x, width: w, height:, h},\n         *  {top: y, left: x, width: w, height:, h},\n         *  ...]\n         *\n         * @param  String  selector\n         * @return Array\n         */\n        this.getElementsBounds = function getElementsBounds(selector) {\n            var elements = this.findAll(selector);\n            try {\n                return Array.prototype.map.call(elements, function(element) {\n                    var clipRect = element.getBoundingClientRect();\n                    return {\n                        top: clipRect.top,\n                        left: clipRect.left,\n                        width: clipRect.width,\n                        height: clipRect.height\n                    };\n                });\n            } catch (e) {\n                this.log(\"Unable to fetch bounds for elements matching \" + selector, \"warning\");\n            }\n        };\n\n        /**\n         * Retrieves information about the node matching the provided selector.\n         *\n         * @param  String|Object  selector  CSS3/XPath selector\n         * @return Object\n         */\n        this.getElementInfo = function getElementInfo(selector) {\n            var element = this.findOne(selector);\n            var bounds = this.getElementBounds(selector);\n            var attributes = {};\n            [].forEach.call(element.attributes, function(attr) {\n                attributes[attr.name.toLowerCase()] = attr.value;\n            });\n            return {\n                nodeName: element.nodeName.toLowerCase(),\n                attributes: attributes,\n                tag: element.outerHTML,\n                html: element.innerHTML,\n                text: element.textContent || element.innerText,\n                x: bounds.left,\n                y: bounds.top,\n                width: bounds.width,\n                height: bounds.height,\n                visible: this.visible(selector)\n            };\n        };\n\n        /**\n         * Retrieves information about the nodes matching the provided selector.\n         *\n         * @param  String|Object  selector  CSS3/XPath selector\n         * @return Array\n         */\n        this.getElementsInfo = function getElementsInfo(selector) {\n            var bounds = this.getElementsBounds(selector);\n            var eleVisible = this.elementVisible;\n            return [].map.call(this.findAll(selector), function(element, index) {\n                var attributes = {};\n                [].forEach.call(element.attributes, function(attr) {\n                    attributes[attr.name.toLowerCase()] = attr.value;\n                });\n                return {\n                    nodeName: element.nodeName.toLowerCase(),\n                    attributes: attributes,\n                    tag: element.outerHTML,\n                    html: element.innerHTML,\n                    text: element.textContent || element.innerText,\n                    x: bounds[index].left,\n                    y: bounds[index].top,\n                    width: bounds[index].width,\n                    height: bounds[index].height,\n                    visible: eleVisible(element)\n                };\n            });\n        };\n\n        /**\n         * Retrieves a single DOM element matching a given XPath expression.\n         *\n         * @param  String            expression  The XPath expression\n         * @param  HTMLElement|null  scope       Element to search child elements within\n         * @return HTMLElement or null\n         */\n        this.getElementByXPath = function getElementByXPath(expression, scope) {\n            scope = scope || this.options.scope;\n            var a = document.evaluate(expression, scope, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);\n            if (a.snapshotLength > 0) {\n                return a.snapshotItem(0);\n            }\n        };\n\n        /**\n         * Retrieves all DOM elements matching a given XPath expression.\n         *\n         * @param  String            expression  The XPath expression\n         * @param  HTMLElement|null  scope       Element to search child elements within\n         * @return Array\n         */\n        this.getElementsByXPath = function getElementsByXPath(expression, scope) {\n            scope = scope || this.options.scope;\n            var nodes = [];\n            var a = document.evaluate(expression, scope, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);\n            for (var i = 0; i < a.snapshotLength; i++) {\n                nodes.push(a.snapshotItem(i));\n            }\n            return nodes;\n        };\n\n        /**\n         * Retrieves the value of an element\n         *\n         * @param  String  inputName  The for input name attr value\n         * @param  Object  options    Object with formSelector, optional\n         * @return Mixed\n         */\n        this.getFieldValue = function getFieldValue(selector, scope) {\n            var self = this;\n            var fields = this.findAll(selector, scope);\n            var type;\n\n            // for Backward Compatibility\n            if (!(fields instanceof NodeList || fields instanceof Array)) {\n                this.log(\"attempting to fetch field element from selector: '\" + selector + \"'\", \"info\");\n                fields = this.findAll('[name=\"' + selector + '\"]');\n            }\n\n            if (fields && fields.length > 1) {\n                type = fields[0].hasAttribute('type') ? fields[0].getAttribute('type') : \"other\";\n                fields = [].filter.call(fields, function(elm){\n                    if (elm.nodeName.toLowerCase() === 'input' &&\n                        ['checkbox', 'radio'].indexOf(elm.getAttribute('type')) !== -1) {\n                        return elm.checked;\n                    }\n                    return true;\n                });\n            }\n\n            if (fields.length === 0 ) {\n                return type !== \"radio\" ? [] : undefined;\n            }\n\n            if (fields.length > 1 ) {\n                return [].map.call(fields, function(elm) {\n                    var ret = self.getField(elm);\n                    return ret && type === 'checkbox' ? elm.value : ret;\n                });\n            }\n\n            return this.getField(fields[0]);\n        };\n\n        /**\n         * Retrieves the value of a form field.\n         *\n         * @param  HTMLElement  An html element\n         * @return Mixed\n         */\n        this.getField = function getField(field) {\n            var nodeName, type;\n\n            if (!(field instanceof HTMLElement)) {\n                var error = new Error('getFieldValue: Invalid field ; only HTMLElement is supported');\n                error.name = 'FieldNotFound';\n                throw error;\n            }\n\n            nodeName = field.nodeName.toLowerCase();\n            type = field.hasAttribute('type') ? field.getAttribute('type').toLowerCase() : 'text';\n            if (nodeName === \"select\" && field.multiple) {\n                return [].filter.call(field.options, function(option){\n                    return !!option.selected;\n                }).map(function(option){\n                    return option.value || option.text;\n                });\n            }\n            if (type === 'radio') {\n                return field.checked ? field.value : null;\n            }\n            if (type === 'checkbox') {\n                return field.checked;\n            }\n            return field.value || '';\n        };\n\n        /**\n         * Retrieves a given form all of its field values.\n         *\n         * @param  HTMLElement|String  form      A form element, or a CSS3 selector to a form element\n         * @return Object\n         */\n        this.getFormValues = function getFormValues(form) {\n            var self = this;\n            var values = {}, checked = {};\n\n            if (!(form instanceof HTMLElement) || typeof form === \"string\") {\n                this.log(\"attempting to fetch form element from selector: '\" + form + \"'\", \"info\");\n                try {\n                    form = this.findOne(form);\n                } catch (e) {\n                    this.log(\"invalid form selector provided: '\" + form + \"'\");\n                    return {};\n                }\n            }\n\n            [].forEach.call(form.elements, function(elm) {\n                var name = elm.getAttribute('name');\n                var value = self.getField(elm);\n                var multi = !!value && elm.hasAttribute('type') &&\n                            elm.type === 'checkbox' ? elm.value : value;\n                if (!!name && value !== null && !(elm.type === 'checkbox' && value === false)) {\n                    if (typeof values[name] === \"undefined\") {\n                        values[name] = value;\n                        checked[name] = multi;\n                    } else {\n                        if (!Array.isArray(values[name])) {\n                            values[name] = [checked[name]];\n                        }\n                        values[name].push(multi);\n                    }\n                }\n            });\n            return values;\n        };\n\n        /**\n         * Logs a message. Will format the message a way CasperJS will be able\n         * to log phantomjs side.\n         *\n         * @param  String  message  The message to log\n         * @param  String  level    The log level\n         */\n        this.log = function log(message, level) {\n            console.log(\"[casper:\" + (level || \"debug\") + \"] \" + message);\n        };\n\n        /**\n         * Makes selector by defined type XPath, Name or Label. Function has same result as selectXPath in Casper module for\n         * XPath type - it makes XPath object.\n         * Function also accepts name attribut of the form filed or can select element by its label text.\n         *\n         * @param  String selector Selector of defined type\n         * @param  String|null  type Type of selector, it can have these values:\n         *         css - CSS3 selector - selector is returned trasparently\n         *         xpath - XPath selector - return XPath object\n         *         name|names - select input of specific name, internally covert to CSS3 selector\n         *         label|labels - select input of specific label, internally covert to XPath selector. As selector is label's text used.\n         * @return String|Object\n         */\n        this.makeSelector = function makeSelector(selector, type){\n            type = type || 'xpath'; // default type\n            var ret;\n\n            if (typeof selector === \"object\") { // selector object (CSS3 | XPath) could by passed\n                selector = selector.path;\n            }\n\n            switch (type) {\n                case 'css': // do nothing\n                    ret = selector;\n                    break;\n                case 'name': // convert to css\n                case 'names':\n                    ret = '[name=\"' + selector + '\"]';\n                    break;\n                case 'label': // covert to xpath object\n                case 'labels':\n                    ret = {type: 'xpath', path: '//*[@id=string(//label[text()=\"' + selector + '\"]/@for)]'};\n                    break;\n                case 'xpath': // covert to xpath object\n                    ret = {type: 'xpath', path: selector};\n                    break;\n                default:\n                    throw new Error(\"Unsupported selector type: \" + type);\n            }\n\n            return ret;\n        };\n\n        /**\n         * Dispatches a mouse event to the DOM element behind the provided selector.\n         *\n         * @param  String   type      Type of event to dispatch\n         * @param  String   selector  A CSS3 selector to the element to click\n         * @param  {Number} x         X position\n         * @param  {Number} y         Y position\n         * @return Boolean\n         */\n        this.mouseEvent = function mouseEvent(type, selector, x, y) {\n            var elem = this.findOne(selector);\n            if (!elem || !this.elementVisible(elem)) {\n                this.log(\"mouseEvent(): Couldn't find any element matching '\" +\n                    selector + \"' selector\", \"error\");\n                return false;\n            }\n\n            var convertNumberToIntAndPercentToFloat = function (a, def){\n                return !!a && !isNaN(a) && parseInt(a, 10) ||\n                    !!a && !isNaN(parseFloat(a)) && parseFloat(a) >= 0 &&\n                    parseFloat(a) <= 100 && parseFloat(a) / 100 ||\n                def;\n            };\n            try {\n                var evt = document.createEvent(\"MouseEvents\");\n                var px = convertNumberToIntAndPercentToFloat(x, 0.5),\n                    py = convertNumberToIntAndPercentToFloat(y, 0.5);\n                try {\n                    var bounds = elem.getBoundingClientRect();\n                    px = Math.floor(bounds.width  * (px - (px ^ 0)).toFixed(10)) + (px ^ 0) + bounds.left;\n                    py = Math.floor(bounds.height * (py - (py ^ 0)).toFixed(10)) + (py ^ 0) + bounds.top;\n                } catch (e) {\n                    px = 1; py = 1;\n                }\n                evt.initMouseEvent(type, true, true, window, 1, 1, 1, px, py, false, false, false, false,\n                    type !== \"contextmenu\" ? 0 : 2, elem);\n                // dispatchEvent return value is false if at least one of the event\n                // handlers which handled this event called preventDefault;\n                // so we cannot returns this results as it cannot accurately informs on the status\n                // of the operation\n                // let's assume the event has been sent ok it didn't raise any error\n                elem.dispatchEvent(evt);\n                return true;\n            } catch (e) {\n                this.log(\"Failed dispatching \" + type + \"mouse event on \" + selector + \": \" + e, \"error\");\n                return false;\n            }\n        };\n\n        /**\n         * Processes a selector input, either as a string or an object.\n         *\n         * If passed an object, if must be of the form:\n         *\n         *     selectorObject = {\n         *         type: <'css' or 'xpath'>,\n         *         path: <a string>\n         *     }\n         *\n         * @param  String|Object  selector  The selector string or object\n         *\n         * @return an object containing 'type' and 'path' keys\n         */\n        this.processSelector = function processSelector(selector) {\n            var selectorObject = {\n                toString: function toString() {\n                    return this.type + ' selector: ' + this.path;\n                }\n            };\n            if (typeof selector === \"string\") {\n                // defaults to CSS selector\n                selectorObject.type = \"css\";\n                selectorObject.path = selector;\n                return selectorObject;\n            } else if (typeof selector === \"object\") {\n                // validation\n                if (!selector.hasOwnProperty('type') || !selector.hasOwnProperty('path')) {\n                    throw new Error(\"Incomplete selector object\");\n                } else if (SUPPORTED_SELECTOR_TYPES.indexOf(selector.type) === -1) {\n                    throw new Error(\"Unsupported selector type: \" + selector.type);\n                }\n                if (!selector.hasOwnProperty('toString')) {\n                    selector.toString = selectorObject.toString;\n                }\n                return selector;\n            }\n            throw new Error(\"Unsupported selector type: \" + typeof selector);\n        };\n\n        /**\n         * Removes all DOM elements matching a given XPath expression.\n         *\n         * @param  String  expression  The XPath expression\n         * @return Array\n         */\n        this.removeElementsByXPath = function removeElementsByXPath(expression) {\n            var a = document.evaluate(expression, document, null,\n                XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);\n            for (var i = 0; i < a.snapshotLength; i++) {\n                a.snapshotItem(i).parentNode.removeChild(a.snapshotItem(i));\n            }\n        };\n\n        /**\n         * Scrolls current document to x, y coordinates.\n         *\n         * @param  {Number} x X position\n         * @param  {Number} y Y position\n         */\n        this.scrollTo = function scrollTo(x, y) {\n            window.scrollTo(parseInt(x || 0, 10), parseInt(y || 0, 10));\n        };\n\n        /**\n         * Scrolls current document up to its bottom.\n         */\n        this.scrollToBottom = function scrollToBottom() {\n            this.scrollTo(0, this.getDocumentHeight());\n        };\n\n        /**\n         * Performs an AJAX request.\n         *\n         * @param   String   url      Url.\n         * @param   String   method   HTTP method (default: GET).\n         * @param   Object   data     Request parameters.\n         * @param   Boolean  async    Asynchroneous request? (default: false)\n         * @param   Object   settings Other settings when perform the ajax request\n         * @return  String            Response text.\n         */\n        this.sendAJAX = function sendAJAX(url, method, data, async, settings) {\n            var xhr = new XMLHttpRequest(),\n                dataString = \"\",\n                dataList = [];\n            method = method && method.toUpperCase() || \"GET\";\n            var contentType = settings && settings.contentType || \"application/x-www-form-urlencoded\";\n            xhr.open(method, url, !!async);\n            this.log(\"sendAJAX(): Using HTTP method: '\" + method + \"'\", \"debug\");\n            if (settings && settings.overrideMimeType) {\n                xhr.overrideMimeType(settings.overrideMimeType);\n            }\n            if (method === \"POST\") {\n                if (typeof data === \"object\") {\n                    for (var k in data) {\n                        if (data.hasOwnProperty(k)) {\n                            dataList.push(encodeURIComponent(k) + \"=\" +\n                             encodeURIComponent(data[k].toString()));\n                        }\n                    }\n                    dataString = dataList.join('&');\n                    this.log(\"sendAJAX(): Using request data: '\" + dataString + \"'\", \"debug\");\n                } else if (typeof data === \"string\") {\n                    dataString = data;\n                }\n                xhr.setRequestHeader(\"Content-Type\", contentType);\n            }\n            xhr.send(method === \"POST\" ? dataString : null);\n            return xhr.responseText;\n        };\n\n        /**\n         * Sets a value to form element by CSS3 or XPath selector.\n         *\n         * With makeSelector() helper can by easily used with name or label selector\n         *     @exemple setFieldValue(this.makeSelector('email', 'name'), 'value')\n         *\n         * @param String|Object            CSS3|XPath selector\n         * @param Mixed                    Input value\n         * @param HTMLElement|String|null  scope Element to search child elements within\n         * @return bool\n         */\n        this.setFieldValue = function setFieldValue(selector, value, scope) {\n            var self = this;\n            var fields = this.findAll(selector, scope);\n            var values = value;\n\n            if (!Array.isArray(value)) {\n                values = [value];\n            }\n\n            if (fields && fields.length > 1) {\n                fields = [].filter.call(fields, function(elm){\n                    if (elm.nodeName.toLowerCase() === 'input' &&\n                        ['checkbox', 'radio'].indexOf(elm.getAttribute('type')) !== -1) {\n                        return values.indexOf(elm.getAttribute('value')) !== -1;\n                    }\n                    return true;\n                });\n                [].forEach.call(fields, function(elm) {\n                    self.setField(elm, value);\n                });\n            } else {\n                this.setField(fields[0], value);\n            }\n            return true;\n        };\n\n        /**\n         * Sets a field value. Fails silently, but log\n         * error messages.\n         *\n         * @param  HTMLElement  field  One element defining a field\n         * @param  mixed        value  The field value to set\n         */\n        this.setField = function setField(field, value) {\n            /*eslint complexity:0*/\n            var logValue, out, filter;\n            value = logValue = value || \"\";\n\n            if (!(field instanceof HTMLElement)) {\n                var error = new Error('setField: Invalid field ; only HTMLElement is supported');\n                error.name = 'FieldNotFound';\n                throw error;\n            }\n\n            if (this.options && this.options.safeLogs && field.getAttribute('type') === \"password\") {\n                // obfuscate password value\n                logValue = new Array(('' + value).length + 1).join(\"*\");\n            }\n            this.log('Set \"' + field.getAttribute('name') + '\" field value to ' + logValue, \"debug\");\n\n            try {\n                field.focus();\n            } catch (e) {\n                this.log(\"Unable to focus() input field \" + field.getAttribute('name') + \": \" + e, \"warning\");\n            }\n\n            filter = String(field.getAttribute('type') ? field.getAttribute('type') : field.nodeName).toLowerCase();\n            switch (filter) {\n                case \"checkbox\":\n                case \"radio\":\n                    field.checked = value ? true : false;\n                    break;\n                case \"file\":\n                    throw {\n                        name: \"FileUploadError\",\n                        message: \"File field must be filled using page.uploadFile\",\n                        path: value,\n                        id: field.id || null\n                    };\n                    break;\n                case \"select\":\n                    if (field.multiple) {\n                        [].forEach.call(field.options, function(option) {\n                            option.selected = value.indexOf(option.value) !== -1;\n                        });\n                        // If the values can't be found, try search options text\n                        if (field.value === \"\") {\n                            [].forEach.call(field.options, function(option) {\n                                option.selected = value.indexOf(option.text) !== -1;\n                            });\n                        }\n                    } else {\n                        // PhantomJS 1.x.x can't handle setting value to ''\n                        if (value === \"\") {\n                            field.selectedIndex = -1;\n                        } else {\n                            field.value = value;\n                        }\n\n                        // If the value can't be found, try search options text\n                        if (field.value !== value) {\n                            [].some.call(field.options, function(option) {\n                                option.selected = value === option.text;\n                                return value === option.text;\n                            });\n                        }\n                    }\n                    break;\n                default:\n                    field.value = value;\n            }\n\n            ['change', 'input'].forEach(function(name) {\n                var event = document.createEvent(\"HTMLEvents\");\n                event.initEvent(name, true, true);\n                field.dispatchEvent(event);\n            });\n\n            // blur the field\n            try {\n                field.blur();\n            } catch (err) {\n                this.log(\"Unable to blur() input field \" + field.getAttribute('name') +\n                 \": \" + err, \"warning\");\n            }\n            return out;\n        };\n\n        /**\n         * Checks if any element matching a given selector is visible in remote page.\n         *\n         * @param  String  selector  CSS3 selector\n         * @return Boolean\n         */\n        this.visible = function visible(selector) {\n            return [].some.call(this.findAll(selector), this.elementVisible);\n        };\n\n        /**\n         * Checks if all elements matching a given selector are visible in remote page.\n         *\n         * @param  String  selector  CSS3 selector\n         * @return Boolean\n         */\n        this.allVisible = function allVisible(selector) {\n            return [].every.call(this.findAll(selector), this.elementVisible);\n        };\n    };\n})(typeof exports ===  \"object\" && !(exports instanceof Element) ? exports : window);\n","/home/travis/build/npmtest/node-npmtest-casperjs/node_modules/casperjs/modules/cli.js":"/*!\n * Casper is a navigation utility for PhantomJS.\n *\n * Documentation: http://casperjs.org/\n * Repository:    http://github.com/casperjs/casperjs\n *\n * Copyright (c) 2011-2012 Nicolas Perriault\n *\n * Part of source code is Copyright Joyent, Inc. and other Node contributors.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n/*global CasperError, console, exports, phantom, patchRequire, require:true*/\n\nvar require = patchRequire(require);\nvar utils = require('utils');\nvar system = require('system');\n\n/**\n * Extracts, normalize and organize PhantomJS CLI arguments in a dedicated\n * Object.\n *\n * @param  array  phantomArgs  system.args value\n * @return Object\n */\nexports.parse = function parse(phantomArgs) {\n    \"use strict\";\n    var extract = {\n        args: [],\n        options: {},\n        raw: {\n            args: [],\n            options: {}\n        },\n        drop: function drop(what) {\n            if (utils.isNumber(what)) {\n                // deleting an arg by its position\n                this.args = this.args.filter(function _filter(arg, index) {\n                    return index !== what;\n                });\n                // raw\n                if ('raw' in this) {\n                    this.raw.args = this.raw.args.filter(function _filter(arg, index) {\n                        return index !== what;\n                    });\n                }\n            } else if (utils.isString(what)) {\n                // deleting an arg by its value\n                this.args = this.args.filter(function _filter(arg) {\n                    return arg !== what;\n                });\n                // deleting an option by its name (key)\n                delete this.options[what];\n                // raw\n                if ('raw' in this) {\n                    this.raw.args = this.raw.args.filter(function _filter(arg) {\n                        return arg !== what;\n                    });\n                    delete this.raw.options[what];\n                }\n            } else {\n                throw new CasperError(\"Cannot drop argument of type \" + typeof what);\n            }\n        },\n        has: function has(what) {\n            if (utils.isNumber(what)) {\n                return what in this.args;\n            }\n            if (utils.isString(what)) {\n                return what in this.options;\n            }\n            throw new CasperError(\"Unsupported cli arg tester \" + typeof what);\n        },\n        get: function get(what, def) {\n            if (utils.isNumber(what)) {\n                return what in this.args ? this.args[what] : def;\n            }\n            if (utils.isString(what)) {\n                return what in this.options ? this.options[what] : def;\n            }\n            throw new CasperError(\"Unsupported cli arg getter \" + typeof what);\n        }\n    };\n    phantomArgs.forEach(function _forEach(arg) {\n        if (arg.indexOf('--') === 0) {\n            // named option\n            var optionMatch = arg.match(/^--(.*?)=(.*)/i);\n            if (optionMatch) {\n                extract.options[optionMatch[1]] = castArgument(optionMatch[2]);\n                extract.raw.options[optionMatch[1]] = optionMatch[2];\n            } else {\n                // flag\n                var flagMatch = arg.match(/^--(.*)/);\n                if (flagMatch) {\n                    extract.options[flagMatch[1]] = extract.raw.options[flagMatch[1]] = true;\n                }\n            }\n        } else {\n            // positional arg\n            extract.args.push(castArgument(arg));\n            extract.raw.args.push(arg);\n        }\n    });\n    extract.raw = utils.mergeObjects(extract.raw, {\n        drop: function() {\n            return extract.drop.apply(extract, arguments);\n        },\n        has: extract.has,\n        get: extract.get\n    });\n    return extract;\n};\n\n/**\n * Cast a string argument to its typed equivalent.\n *\n * @param  String  arg\n * @return Mixed\n */\nfunction castArgument(arg) {\n    \"use strict\";\n    if (arg.match(/^-?\\d+$/)) {\n        return parseInt(arg, 10);\n    } else if (arg.match(/^-?\\d+\\.\\d+$/)) {\n        return parseFloat(arg);\n    } else if (arg.match(/^(true|false)$/i)) {\n        return arg.trim().toLowerCase() === \"true\" ? true : false;\n    } else {\n        return arg;\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-casperjs/node_modules/casperjs/modules/colorizer.js":"/*!\n * Casper is a navigation utility for PhantomJS.\n *\n * Documentation: http://casperjs.org/\n * Repository:    http://github.com/casperjs/casperjs\n *\n * Copyright (c) 2011-2012 Nicolas Perriault\n *\n * Part of source code is Copyright Joyent, Inc. and other Node contributors.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n/*global exports, console, patchRequire, require:true*/\n\nvar require = patchRequire(require);\nvar fs = require('fs');\nvar utils = require('utils');\nvar env = require('system').env;\n\nexports.create = function create(type) {\n    \"use strict\";\n    if (!type) {\n        return;\n    }\n    if (!(type in exports)) {\n        throw new Error(utils.format('Unsupported colorizer type \"%s\"', type));\n    }\n    return new exports[type]();\n};\n\n/**\n * This is a port of lime colorizer.\n * http://trac.symfony-project.org/browser/tools/lime/trunk/lib/lime.php\n *\n * (c) Fabien Potencier, Symfony project, MIT license\n */\nvar Colorizer = function Colorizer() {\n    \"use strict\";\n    /*eslint no-multi-spaces:0*/\n    var options    = { bold: 1, underscore: 4, blink: 5, reverse: 7, conceal: 8 };\n    var foreground = { black: 30, red: 31, green: 32, yellow: 33, blue: 34, magenta: 35, cyan: 36, white: 37 };\n    var background = { black: 40, red: 41, green: 42, yellow: 43, blue: 44, magenta: 45, cyan: 46, white: 47 };\n    var styles     = {\n        'ERROR':     { bg: 'red', fg: 'white', bold: true },\n        'INFO':      { fg: 'green', bold: true },\n        'TRACE':     { fg: 'green', bold: true },\n        'PARAMETER': { fg: 'cyan' },\n        'COMMENT':   { fg: 'yellow' },\n        'WARNING':   { fg: 'red', bold: true },\n        'GREEN_BAR': { fg: 'white', bg: 'green', bold: true },\n        'RED_BAR':   { fg: 'white', bg: 'red', bold: true },\n        'INFO_BAR':  { bg: 'cyan', fg: 'white', bold: true },\n        'WARN_BAR':  { bg: 'yellow', fg: 'white', bold: true },\n        'SKIP':      { fg: 'magenta', bold: true },\n        'SKIP_BAR':  { bg: 'magenta', fg: 'white', bold: true }\n    };\n\n    /**\n     * Adds a style to provided text.\n     *\n     * @param   String  text\n     * @param   String  styleName\n     * @return  String\n     */\n    this.colorize = function colorize(text, styleName, pad) {\n        if ((fs.isWindows() && (!env['ANSICON'] && env['ConEmuANSI'] !== 'ON')) || !(styleName in styles)) {\n            return text;\n        }\n        return this.format(text, styles[styleName], pad);\n    };\n\n    /**\n     * Formats a text using a style declaration object.\n     *\n     * @param  String  text\n     * @param  Object  style\n     * @return String\n     */\n    this.format = function format(text, style, pad) {\n        if ((fs.isWindows() && (!env['ANSICON'] && env['ConEmuANSI'] !== 'ON')) || !utils.isObject(style)) {\n            return text;\n        }\n        var codes = [];\n        if (style.fg && foreground[style.fg]) {\n            codes.push(foreground[style.fg]);\n        }\n        if (style.bg && background[style.bg]) {\n            codes.push(background[style.bg]);\n        }\n        for (var option in options) {\n            if (option in style && style[option] === true) {\n                codes.push(options[option]);\n            }\n        }\n        // pad\n        if (typeof pad === \"number\" && text.length < pad) {\n            text += new Array(pad - text.length + 1).join(' ');\n        }\n        return \"\\u001b[\" + codes.join(';') + 'm' + text + \"\\u001b[0m\";\n    };\n};\nexports.Colorizer = Colorizer;\n\n/**\n * Dummy colorizer. Does basically nothing.\n *\n */\nvar Dummy = function Dummy() {\n    \"use strict\";\n    this.colorize = function colorize(text, styleName, pad) {\n        return text;\n    };\n    this.format = function format(text, style, pad){\n        return text;\n    };\n};\nexports.Dummy = Dummy;\n","/home/travis/build/npmtest/node-npmtest-casperjs/node_modules/casperjs/modules/events.js":"/*!\n * Casper is a navigation utility for PhantomJS.\n *\n * Documentation: http://casperjs.org/\n * Repository:    http://github.com/casperjs/casperjs\n *\n * Copyright (c) 2011-2012 Nicolas Perriault\n *\n * Part of source code is Copyright Joyent, Inc. and other Node contributors.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n/*global CasperError*/\n\nvar isArray = Array.isArray;\n\nfunction EventEmitter() {\n  this._filters = {};\n}\nexports.EventEmitter = EventEmitter;\n\n// By default EventEmitters will print a warning if more than\n// 10 listeners are added to it. This is a useful default which\n// helps finding memory leaks.\n//\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nvar defaultMaxListeners = 10;\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!this._events) this._events = {};\n  this._maxListeners = n;\n};\n\n\nEventEmitter.prototype.emit = function emit() {\n  var type = arguments[0];\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events || !this._events.error ||\n        (isArray(this._events.error) && !this._events.error.length))\n    {\n      if (arguments[1] instanceof Error) {\n        throw arguments[1]; // Unhandled 'error' event\n      } else {\n        throw new CasperError(\"Uncaught, unspecified 'error' event.\");\n      }\n    }\n  }\n\n  if (!this._events) return false;\n  var handler = this._events[type];\n  if (!handler) return false;\n\n  if (typeof handler === 'function') {\n    try {\n      switch (arguments.length) {\n        // fast cases\n        case 1:\n          handler.call(this);\n          break;\n        case 2:\n          handler.call(this, arguments[1]);\n          break;\n        case 3:\n          handler.call(this, arguments[1], arguments[2]);\n          break;\n        // slower\n        default:\n          var l = arguments.length;\n          var args = new Array(l - 1);\n          for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n          handler.apply(this, args);\n      }\n    } catch (err) {\n      this.emit('event.error', err);\n    }\n    return true;\n\n  } else if (isArray(handler)) {\n    var l = arguments.length;\n    var args = new Array(l - 1);\n    for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\n    var listeners = handler.slice();\n    for (var i = 0, l = listeners.length; i < l; i++) {\n      listeners[i].apply(this, args);\n    }\n    return true;\n\n  } else {\n    return false;\n  }\n};\n\n// EventEmitter is defined in src/node_events.cc\n// EventEmitter.prototype.emit() is also defined there.\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  if ('function' !== typeof listener) {\n    throw new CasperError('addListener only takes instances of Function');\n  }\n\n  if (!this._events) this._events = {};\n\n  // To avoid recursion in the case that type == \"newListeners\"! Before\n  // adding it to the listeners, first emit \"newListeners\".\n  this.emit('newListener', type, listener);\n\n  if (!this._events[type]) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  } else if (isArray(this._events[type])) {\n\n    // If we've already got an array, just append.\n    this._events[type]['fail' === type ? 'unshift' : 'push'](listener);\n\n    // Check for listener leak\n    if (!this._events[type].warned) {\n      var m;\n      if (this._maxListeners !== undefined) {\n        m = this._maxListeners;\n      } else {\n        m = defaultMaxListeners;\n      }\n\n      if (m && m > 0 && this._events[type].length > m) {\n        this._events[type].warned = true;\n        console.error('(node) warning: possible EventEmitter memory ' +\n                      'leak detected. %d listeners added. ' +\n                      'Use emitter.setMaxListeners() to increase limit.',\n                      this._events[type].length);\n        console.trace();\n      }\n    }\n  } else {\n    // Adding the second element, need to change to array.\n    this._events[type] = 'fail' === type ? [listener, this._events[type]] : [this._events[type], listener];\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.prependListener = function prependListener(type, listener) {\n  if ('function' !== typeof listener) {\n    throw new CasperError('addListener only takes instances of Function');\n  }\n\n  if (!this._events) this._events = {};\n\n  // To avoid recursion in the case that type == \"newListeners\"! Before\n  // adding it to the listeners, first emit \"newListeners\".\n  this.emit('newListener', type, listener);\n\n  if (!this._events[type]) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  } else if (isArray(this._events[type])) {\n\n    // If we've already got an array, just append.\n    this._events[type].unshift(listener);\n\n    // Check for listener leak\n    if (!this._events[type].warned) {\n      var m;\n      if (this._maxListeners !== undefined) {\n        m = this._maxListeners;\n      } else {\n        m = defaultMaxListeners;\n      }\n\n      if (m && m > 0 && this._events[type].length > m) {\n        this._events[type].warned = true;\n        console.error('(node) warning: possible EventEmitter memory ' +\n                      'leak detected. %d listeners added. ' +\n                      'Use emitter.setMaxListeners() to increase limit.',\n                      this._events[type].length);\n        console.trace();\n      }\n    }\n  } else {\n    // Adding the second element, need to change to array.\n    this._events[type] = [listener, this._events[type]];\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if ('function' !== typeof listener) {\n    throw new CasperError('.once only takes instances of Function');\n  }\n\n  var self = this;\n  function g() {\n    self.removeListener(type, g);\n    listener.apply(this, arguments);\n  }\n\n  g.listener = listener;\n  self.on(type, g);\n\n  return this;\n};\n\nEventEmitter.prototype.removeListener = function removeListener(type, listener) {\n  if ('function' !== typeof listener) {\n    throw new CasperError('removeListener only takes instances of Function');\n  }\n\n  // does not use listeners(), so no side effect of creating _events[type]\n  if (!this._events || !this._events[type]) return this;\n\n  var list = this._events[type];\n\n  if (isArray(list)) {\n    var position = -1;\n    for (var i = 0, length = list.length; i < length; i++) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener))\n      {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0) return this;\n    list.splice(position, 1);\n    if (list.length === 0)\n      delete this._events[type];\n  } else if (list === listener ||\n             (list.listener && list.listener === listener))\n  {\n    delete this._events[type];\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {\n  if (arguments.length === 0) {\n    this._events = {};\n    return this;\n  }\n\n  // does not use listeners(), so no side effect of creating _events[type]\n  if (type && this._events && this._events[type]) this._events[type] = null;\n  return this;\n};\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  if (!this._events) this._events = {};\n  if (!this._events[type]) this._events[type] = [];\n  if (!isArray(this._events[type])) {\n    this._events[type] = [this._events[type]];\n  }\n  return this._events[type];\n};\n\n// Added for CasperJS: filters a value attached to an event\nEventEmitter.prototype.filter = function filter() {\n  var type = arguments[0];\n  if (!this._filters) {\n    this._filters = {};\n    return;\n  }\n\n  var _filter = this._filters[type];\n  if (typeof _filter !== 'function') {\n    return;\n  }\n  return _filter.apply(this, Array.prototype.splice.call(arguments, 1));\n};\n\nEventEmitter.prototype.removeAllFilters = function removeAllFilters(type) {\n  if (arguments.length === 0) {\n    this._filters = {};\n    return this;\n  }\n  if (type && this._filters && this._filters[type]) {\n    this._filters[type] = null;\n  }\n  return this;\n};\n\nEventEmitter.prototype.setFilter = function setFilter(type, filterFn) {\n  if (!this._filters) {\n    this._filters = {};\n  }\n  if ('function' !== typeof filterFn) {\n    throw new CasperError('setFilter only takes instances of Function');\n  }\n  if (!this._filters[type]) {\n    this._filters[type] = filterFn;\n    return true;\n  }\n  // TODO: process multiple filters? in which order? disallow?\n  return false;\n};\n","/home/travis/build/npmtest/node-npmtest-casperjs/node_modules/casperjs/modules/http.js":"/*!\n * Casper is a navigation utility for PhantomJS.\n *\n * Documentation: http://casperjs.org/\n * Repository:    http://github.com/casperjs/casperjs\n *\n * Copyright (c) 2011-2012 Nicolas Perriault\n *\n * Part of source code is Copyright Joyent, Inc. and other Node contributors.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\nvar require = patchRequire(require);\nvar utils = require('utils');\n\n/*\n * Building an Array subclass\n */\nfunction responseHeaders(){}\nresponseHeaders.prototype = [];\n\n/**\n * Retrieves a given header based on its name\n *\n * @param   String  name    A case-insensitive response header name\n * @return  mixed   A header string or `null` if not found\n */\nresponseHeaders.prototype.get = function get(name){\n    \"use strict\";\n    var headerValue = null;\n    name = name.toLowerCase();\n    this.some(function(header){\n        if (header.name.toLowerCase() === name){\n            headerValue = header.value;\n            return true;\n        }\n    });\n    return headerValue;\n};\n\n/**\n * Augments the response with proper prototypes.\n *\n * @param  Mixed  response  Phantom response or undefined (generally with local files)\n * @return Object           Augmented response\n */\nexports.augmentResponse = function(response) {\n    \"use strict\";\n    if (!utils.isHTTPResource(response)) {\n        return;\n    }\n    response.headers.__proto__ = responseHeaders.prototype;\n    return response;\n};\n","/home/travis/build/npmtest/node-npmtest-casperjs/node_modules/casperjs/modules/mouse.js":"/*!\n * Casper is a navigation utility for PhantomJS.\n *\n * Documentation: http://casperjs.org/\n * Repository:    http://github.com/casperjs/casperjs\n *\n * Copyright (c) 2011-2012 Nicolas Perriault\n *\n * Part of source code is Copyright Joyent, Inc. and other Node contributors.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n/*global CasperError, exports, patchRequire, require:true*/\n\nvar require = patchRequire(require);\nvar utils = require('utils');\n\nvar Mouse = function Mouse(casper) {\n    \"use strict\";\n    if (!utils.isCasperObject(casper)) {\n        throw new CasperError('Mouse() needs a Casper instance');\n    }\n\n    var slice = Array.prototype.slice,\n        nativeEvents = ['mouseup', 'mousedown', 'click', 'mousemove'],\n        nativeButtons = ['left', 'middle', 'right'];\n    if (utils.gteVersion(phantom.version, '1.8.0')) {\n        nativeEvents.push('doubleclick');\n    }\n    if (utils.gteVersion(phantom.version, '2.1.0')) {\n        nativeEvents.push('contextmenu');\n    }\n    var emulatedEvents = ['mouseover', 'mouseout', 'mouseenter', 'mouseleave'],\n        supportedEvents = nativeEvents.concat(emulatedEvents);\n\n    var computeCenter = function computeCenter(selector) {\n        var bounds = casper.getElementBounds(selector);\n        if (utils.isClipRect(bounds)) {\n            var x = Math.round(bounds.left + bounds.width / 2),\n                y = Math.round(bounds.top + bounds.height / 2);\n            return [x, y];\n        }\n        return [0, 0];\n    };\n\n    var getPointFromViewPort = function getPointFromViewPort(page, x, y){\n        var px = x - x % page.viewportSize.width;\n        var py = y - y % page.viewportSize.height;\n        var max = casper.evaluate(function() {\n                return [__utils__.getDocumentWidth(), __utils__.getDocumentHeight()];\n            });\n        if (py > max[0] - page.viewportSize.width && max[0] > page.viewportSize.width){\n            px = max[0] - page.viewportSize.width;\n        }\n        if (py > max[1] - page.viewportSize.height && max[1] > page.viewportSize.height){\n            py = max[1] - page.viewportSize.height;\n        }\n        page.scrollPosition = { 'left': px, 'top': py };\n        return [ x - px, y - py ];\n    };\n\n    var getPointFromSelectorCoords = function getPointFromSelectorCoords(selector, clientX, clientY){\n        var convertNumberToIntAndPercentToFloat = function convertNumberToIntAndPercentToFloat(a, def){\n            return !!a && !isNaN(a) && parseInt(a, 10) ||\n            !!a && !isNaN(parseFloat(a)) && parseFloat(a) >= 0 &&\n              parseFloat(a) <= 100 && parseFloat(a) / 100 ||\n            def;\n        };\n        var bounds = casper.getElementBounds(selector),\n            px = convertNumberToIntAndPercentToFloat(clientX, 0.5),\n            py = convertNumberToIntAndPercentToFloat(clientY, 0.5);\n\n        if (utils.isClipRect(bounds)) {\n            return [ bounds.left + (px ^ 0) + Math.round(bounds.width * (px - (px ^ 0)).toFixed(10)),\n                     bounds.top + (py ^ 0) + Math.round(bounds.height * (py - (py ^ 0)).toFixed(10)) ];\n        }\n        return [1, 1];\n    };\n\n    var processEvent = function processEvent(type, args) {\n        var button = nativeButtons[0], selector = 'html', index = 0, point,\n            scroll = casper.page.scrollPosition;\n        if (!utils.isString(type) || supportedEvents.indexOf(type) === -1) {\n            throw new CasperError('Mouse.processEvent(): Unsupported mouse event type: ' + type);\n        }\n        if (emulatedEvents.indexOf(type) > -1) {\n            casper.log(\"Mouse.processEvent(): no native fallback for type \" + type, \"warning\");\n        }\n        args = [].slice.call(args); // cast Arguments -> Array\n        if (args.length === 0) {\n            throw new CasperError('Mouse.processEvent(): Too few arguments');\n        }\n        if (isNaN(parseInt(args[0], 10)) && casper.exists(args[0])) {\n            selector = args[0];\n            index++;\n        }\n        if (args.length >= index + 2) {\n            point = getPointFromSelectorCoords(selector, args[index], args[index + 1]);\n        } else {\n            point = computeCenter(selector);\n        }\n        index = nativeButtons.indexOf(args[args.length - 1]);\n        if (index > -1) {\n            button = nativeButtons[index];\n        }\n        casper.emit('mouse.' + type.replace('mouse', ''), args);\n        point = getPointFromViewPort(casper.page, point[0], point[1]);\n        casper.page.sendEvent.apply(casper.page, [type].concat(point).concat([button]));\n        casper.page.scrollPosition = scroll;\n    };\n\n    this.click = function click() {\n        processEvent('click', arguments);\n    };\n\n    this.doubleclick = function doubleclick() {\n        processEvent('doubleclick', arguments);\n    };\n\n    this.down = function down() {\n        processEvent('mousedown', arguments);\n    };\n\n    this.move = function move() {\n        processEvent('mousemove', arguments);\n    };\n\n    this.processEvent = function() {\n        processEvent(arguments[0], [].slice.call(arguments, 1));\n    };\n\n    this.rightclick = function rightclick() {\n        try {\n            processEvent('contextmenu', arguments);\n        } catch (e) {\n            var args = slice.call(arguments);\n        switch (args.length) {\n                case 0:\n                    throw new CasperError('Mouse.rightclick(): Too few arguments');\n                case 1:\n                    casper.mouseEvent('contextmenu', args[0]);\n                    break;\n                case 2:\n                    if (!utils.isNumber(args[0]) || !utils.isNumber(args[1])) {\n                       throw new CasperError('Mouse.rightclick(): No valid coordinates passed: ' + args);\n                    }\n                    var struct = casper.page.evaluate(function (clientX, clientY) {\n                        var xpath = function xpath(el) {\n                            if (typeof el === \"string\") {\n                                return document.evaluate(el, document, null, 0, null);\n                            }\n                            if (!el || el.nodeType !== 1) {\n                                return '';\n                            }\n                            if (el.id) {\n                                return \"//*[@id='\" + el.id + \"']\";\n                            }\n                            var sames = [].filter.call(el.parentNode.children, function (x) {\n                                return x.tagName === el.tagName;\n                            });\n                            return xpath(el.parentNode) + '/' + el.tagName.toLowerCase() +\n                                (sames.length > 1 ? '[' + ([].indexOf.call(sames, el) + 1) + ']' : '');\n                        };\n                        try {\n                           var elem = document.elementFromPoint(clientX, clientY);\n                           var rec = elem.getBoundingClientRect();\n                           return { \"selector\": {\"type\": \"xpath\", \"path\": xpath(elem)},\n                                    \"relX\": clientX - rec.left, \"relY\": clientY - rec.top };\n                        } catch (ex) {\n                        return { \"selector\": {\"type\": \"xpath\", \"path\": \"//html\"},\n                                 \"relX\": clientX, \"relY\": clientY };\n                       }\n                    }, args[0], args[1]);\n                    casper.mouseEvent('contextmenu', struct.selector, struct.relX, struct.relY);\n                    break;\n                default:\n                    throw new CasperError('Mouse.rightclick(): Too many arguments');\n            }\n        }\n    };\n\n    this.up = function up() {\n        processEvent('mouseup', arguments);\n    };\n};\n\nexports.create = function create(casper) {\n    \"use strict\";\n    return new Mouse(casper);\n};\n\nexports.Mouse = Mouse;\n","/home/travis/build/npmtest/node-npmtest-casperjs/node_modules/casperjs/modules/pagestack.js":"/*!\n * Casper is a navigation utility for PhantomJS.\n *\n * Documentation: http://casperjs.org/\n * Repository:    http://github.com/casperjs/casperjs\n *\n * Copyright (c) 2011-2012 Nicolas Perriault\n *\n * Part of source code is Copyright Joyent, Inc. and other Node contributors.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n/*global CasperError, console, exports, phantom, patchRequire, require:true*/\n\nvar require = patchRequire(require);\nvar utils = require('utils');\nvar f = utils.format;\n\nfunction create() {\n    \"use strict\";\n    return new Stack();\n}\nexports.create = create;\n\n/**\n * Popups container. Implements Array prototype.\n *\n */\nvar Stack = function Stack(){};\nexports.Stack = Stack;\n\nStack.prototype = [];\n\n/**\n * Cleans the stack from any closed popups.\n *\n * @return Number           New stack length\n */\nStack.prototype.clean = function clean() {\n    \"use strict\";\n    var self = this;\n\n    this.forEach(function(popup, index) {\n        // window references lose the parent attribute when they are no longer valid\n        if (popup.parent === null || typeof popup.parent === \"undefined\") {\n            self.splice(index, 1);\n        }\n    });\n    return this.length;\n};\n\n/**\n * Finds a popup matching the provided information. Information can be:\n *\n * - RegExp: matching page url\n * - String: strict page url value\n * - WebPage: a direct WebPage instance\n *\n * @param  Mixed  popupInfo\n * @return WebPage\n */\nStack.prototype.find = function find(popupInfo) {\n    \"use strict\";\n    var popup, type = utils.betterTypeOf(popupInfo);\n    switch (type) {\n        case \"regexp\":\n            popup = this.findByRegExp(popupInfo);\n            break;\n        case \"string\":\n            popup = this.findByURL(popupInfo);\n            break;\n        case \"qtruntimeobject\": // WebPage\n            popup = popupInfo;\n            if (!utils.isWebPage(popup) || !this.some(function(popupPage) {\n                if (popupInfo.id && popupPage.id) {\n                    return popupPage.id === popup.id;\n                }\n                return popupPage.url === popup.url;\n            })) {\n                throw new CasperError(\"Invalid or missing popup.\");\n            }\n            break;\n        default:\n            throw new CasperError(f(\"Invalid popupInfo type: %s.\", type));\n    }\n    return popup;\n};\n\n/**\n * Finds the first popup which url matches a given RegExp.\n *\n * @param  RegExp  regexp\n * @return WebPage\n */\nStack.prototype.findByRegExp = function findByRegExp(regexp) {\n    \"use strict\";\n    var popup = this.filter(function(popupPage) {\n        return regexp.test(popupPage.url);\n    })[0];\n    if (!popup) {\n        throw new CasperError(f(\"Couldn't find popup with url matching pattern %s\", regexp));\n    }\n    return popup;\n};\n\n/**\n * Finds the first popup matching a given url.\n *\n * @param  String  url  The child WebPage url\n * @return WebPage\n */\nStack.prototype.findByURL = function findByURL(string) {\n    \"use strict\";\n    var popup = this.filter(function(popupPage) {\n        return popupPage.url.indexOf(string) !== -1;\n    })[0];\n    if (!popup) {\n        throw new CasperError(f(\"Couldn't find popup with url containing '%s'\", string));\n    }\n    return popup;\n};\n\n/**\n * Returns a human readable list of current active popup urls.\n *\n * @return Array  Mapped stack.\n */\nStack.prototype.list = function list() {\n    \"use strict\";\n    return this.map(function(popup) {\n        try {\n            return popup.url;\n        } catch (e) {\n            return '<deleted>';\n        }\n    });\n};\n\n/**\n * String representation of current instance.\n *\n * @return String\n */\nStack.prototype.toString = function toString() {\n    \"use strict\";\n    return f(\"[Object Stack], having %d popup(s)\" % this.length);\n};\n","/home/travis/build/npmtest/node-npmtest-casperjs/node_modules/casperjs/modules/querystring.js":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Query String Utilities\n\nvar QueryString = exports;\n\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n\nfunction charCode(c) {\n  return c.charCodeAt(0);\n}\n\n\n// a safe fast alternative to decodeURIComponent\nQueryString.unescapeBuffer = function(s, decodeSpaces) {\n  var out = new Buffer(s.length);\n  var state = 'CHAR'; // states: CHAR, HEX0, HEX1\n  var n, m, hexchar;\n\n  for (var inIndex = 0, outIndex = 0; inIndex <= s.length; inIndex++) {\n    var c = s.charCodeAt(inIndex);\n    switch (state) {\n      case 'CHAR':\n        switch (c) {\n          case charCode('%'):\n            n = 0;\n            m = 0;\n            state = 'HEX0';\n            break;\n          case charCode('+'):\n            if (decodeSpaces) c = charCode(' ');\n            // pass thru\n          default:\n            out[outIndex++] = c;\n            break;\n        }\n        break;\n\n      case 'HEX0':\n        state = 'HEX1';\n        hexchar = c;\n        if (charCode('0') <= c && c <= charCode('9')) {\n          n = c - charCode('0');\n        } else if (charCode('a') <= c && c <= charCode('f')) {\n          n = c - charCode('a') + 10;\n        } else if (charCode('A') <= c && c <= charCode('F')) {\n          n = c - charCode('A') + 10;\n        } else {\n          out[outIndex++] = charCode('%');\n          out[outIndex++] = c;\n          state = 'CHAR';\n          break;\n        }\n        break;\n\n      case 'HEX1':\n        state = 'CHAR';\n        if (charCode('0') <= c && c <= charCode('9')) {\n          m = c - charCode('0');\n        } else if (charCode('a') <= c && c <= charCode('f')) {\n          m = c - charCode('a') + 10;\n        } else if (charCode('A') <= c && c <= charCode('F')) {\n          m = c - charCode('A') + 10;\n        } else {\n          out[outIndex++] = charCode('%');\n          out[outIndex++] = hexchar;\n          out[outIndex++] = c;\n          break;\n        }\n        out[outIndex++] = 16 * n + m;\n        break;\n    }\n  }\n\n  // TODO support returning arbitrary buffers.\n\n  return out.slice(0, outIndex - 1);\n};\n\n\nQueryString.unescape = function(s, decodeSpaces) {\n  return QueryString.unescapeBuffer(s, decodeSpaces).toString();\n};\n\n\nQueryString.escape = function(str) {\n  return encodeURIComponent(str);\n};\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\n\nQueryString.stringify = QueryString.encode = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return Object.keys(obj).map(function(k) {\n      var ks = QueryString.escape(stringifyPrimitive(k)) + eq;\n      if (Array.isArray(obj[k])) {\n        return obj[k].map(function(v) {\n          return ks + QueryString.escape(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + QueryString.escape(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return QueryString.escape(stringifyPrimitive(name)) + eq +\n         QueryString.escape(stringifyPrimitive(obj));\n};\n\n// Parse a key=val string.\nQueryString.parse = QueryString.decode = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    try {\n      k = decodeURIComponent(kstr);\n      v = decodeURIComponent(vstr);\n    } catch (e) {\n      k = QueryString.unescape(kstr, true);\n      v = QueryString.unescape(vstr, true);\n    }\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (Array.isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n","/home/travis/build/npmtest/node-npmtest-casperjs/node_modules/casperjs/modules/tester.js":"/*!\n * Casper is a navigation utility for PhantomJS.\n *\n * Documentation: http://casperjs.org/\n * Repository:    http://github.com/casperjs/casperjs\n *\n * Copyright (c) 2011-2012 Nicolas Perriault\n *\n * Part of source code is Copyright Joyent, Inc. and other Node contributors.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\nvar require = patchRequire(require);\nvar fs = require('fs');\nvar events = require('events');\nvar utils = require('utils');\nvar f = utils.format;\n\nfunction AssertionError(msg, result) {\n    \"use strict\";\n    Error.call(this);\n    this.message = msg;\n    this.name = 'AssertionError';\n    this.result = result;\n}\nAssertionError.prototype = new Error();\nexports.AssertionError = AssertionError;\n\nfunction TerminationError(msg) {\n    \"use strict\";\n    Error.call(this);\n    this.message = msg;\n    this.name = 'TerminationError';\n}\nTerminationError.prototype = new Error();\nexports.TerminationError = TerminationError;\n\nfunction TimedOutError(msg) {\n    \"use strict\";\n    Error.call(this);\n    this.message = msg;\n    this.name = 'TimedOutError';\n}\nTimedOutError.prototype = new Error();\nexports.TimedOutError = TimedOutError;\n\n/**\n * Creates a tester instance.\n *\n * @param  Casper  casper   A Casper instance\n * @param  Object  options  Tester options\n * @return Tester\n */\nexports.create = function create(casper, options) {\n    \"use strict\";\n    return new Tester(casper, options);\n};\n\n/**\n * Casper tester: makes assertions, stores test results and display then.\n *\n * @param  Casper       casper   A valid Casper instance\n * @param  Object|null  options  Options object\n */\nvar Tester = function Tester(casper, options) {\n    \"use strict\";\n    /*eslint max-statements:0*/\n    if (!utils.isCasperObject(casper)) {\n        throw new CasperError(\"Tester needs a Casper instance\");\n    }\n\n    // self reference\n    var self = this;\n\n    // casper reference\n    this.casper = casper;\n\n    // public properties\n    this._setUp = undefined;\n    this._tearDown = undefined;\n    this.aborted = false;\n    this.executed = 0;\n    this.currentTestFile = null;\n    this.currentTestStartTime = new Date();\n    this.currentSuite = undefined;\n    this.currentSuiteNum = 0;\n    this.lastAssertTime = 0;\n    this.loadIncludes = {\n        includes: [],\n        pre:      [],\n        post:     []\n    };\n    this.options = utils.mergeObjects({\n        concise:  false,  // concise output?\n        failFast: false,  // terminates a suite as soon as a test fails?\n        failText: \"FAIL\", // text to use for a failed test\n        passText: \"PASS\", // text to use for a succesful test\n        skipText: \"SKIP\", // text to use for a skipped test\n        pad:      80    , // maximum number of chars for a result line\n        warnText: \"WARN\"  // text to use for a dubious test\n    }, options);\n    this.queue = [];\n    this.running = false;\n    this.started = false;\n    this.suiteResults = new TestSuiteResult();\n\n    this.on('success', function onSuccess(success) {\n        var timeElapsed = new Date() - this.currentTestStartTime;\n        this.currentSuite.addSuccess(success, timeElapsed - this.lastAssertTime);\n        this.lastAssertTime = timeElapsed;\n    });\n\n    this.on('skipped', function onSkipped(skipped) {\n        var timeElapsed = new Date() - this.currentTestStartTime;\n        this.currentSuite.addSkip(skipped, timeElapsed - this.lastAssertTime);\n        this.lastAssertTime = timeElapsed;\n    });\n\n    this.on('fail', function onFail(failure) {\n        // export\n        var valueKeys = Object.keys(failure.values),\n            timeElapsed = new Date() - this.currentTestStartTime;\n        this.currentSuite.addFailure(failure, timeElapsed - this.lastAssertTime);\n        this.lastAssertTime = timeElapsed;\n        // special printing\n        if (failure.type) {\n            this.comment('   type: ' + failure.type);\n        }\n        if (failure.file) {\n            this.comment('   file: ' + failure.file + (failure.line ? ':' + failure.line : ''));\n        }\n        if (failure.lineContents) {\n            this.comment('   code: ' + failure.lineContents);\n        }\n        if (!failure.values || valueKeys.length === 0) {\n            return;\n        }\n        valueKeys.forEach(function(name) {\n            this.comment(f('   %s: %s', name, utils.formatTestValue(failure.values[name], name)));\n        }.bind(this));\n        // check for fast failing\n        if (this.options.failFast) {\n            return this.terminate('--fail-fast: aborted all remaining tests');\n        }\n    });\n\n    function errorHandler(error, backtrace) {\n        self.casper.unwait();\n        if (error instanceof Error) {\n            self.processError(error);\n            return;\n        }\n        if (utils.isString(error) && /^(Assertion|Termination|TimedOut)Error/.test(error)) {\n            return;\n        }\n        var line = 0;\n        try {\n            line = (backtrace || []).filter(function(entry) {\n                return self.currentTestFile === entry.file;\n            })[0].line;\n        } catch (e) {}\n        self.uncaughtError(error, self.currentTestFile, line, backtrace);\n    }\n\n    function errorHandlerAndDone(error, backtrace) {\n        errorHandler(error, backtrace);\n        self.done();\n    }\n\n    // casper events\n    this.casper.on('error', function onCasperError(msg, backtrace) {\n        self.processPhantomError(msg, backtrace);\n    });\n\n    [\n        'wait.error',\n        'waitFor.timeout.error',\n        'event.error',\n        'complete.error'\n    ].forEach(function(event) {\n        self.casper.on(event, errorHandlerAndDone);\n    });\n\n    self.casper.on('step.error', errorHandler);\n\n    this.casper.on('warn', function(warning) {\n        if (self.currentSuite) {\n            self.currentSuite.addWarning(warning);\n        }\n    });\n\n    // Do not hook casper if we're not testing\n    if (!phantom.casperTest) {\n        return;\n    }\n\n    // specific timeout callbacks\n    this.casper.options.onStepTimeout = function test_onStepTimeout(timeout, step) {\n        throw new TimedOutError(f(\"Step timeout occured at step %s (%dms)\", step, timeout));\n    };\n\n    this.casper.options.onTimeout = function test_onTimeout(timeout) {\n        throw new TimedOutError(f(\"Timeout occured (%dms)\", timeout));\n    };\n\n    this.casper.options.onWaitTimeout = function test_onWaitTimeout(timeout, details) {\n        /*eslint complexity:0*/\n        var message = f(\"Wait timeout occured (%dms)\", timeout);\n        details = details || {};\n\n        if (details.selector) {\n            message = f(details.waitWhile ? '\"%s\" never went away in %dms' : '\"%s\" still did not exist in %dms', details.selector, timeout);\n        }\n        else if (details.visible) {\n            message = f(details.waitWhile ? '\"%s\" never disappeared in %dms' : '\"%s\" never appeared in %dms', details.visible, timeout);\n        }\n        else if (details.url || details.resource) {\n            message = f('%s did not load in %dms', details.url || details.resource, timeout);\n        }\n        else if (details.popup) {\n            message = f('%s did not pop up in %dms', details.popup, timeout);\n        }\n        else if (details.text) {\n            message = f('\"%s\" did not appear in the page in %dms', details.text, timeout);\n        }\n        else if (details.selectorTextChange) {\n            message = f('\"%s\" did not have a text change in %dms', details.selectorTextChange, timeout);\n        }\n        else if (utils.isFunction(details.testFx)) {\n            message = f('\"%s\" did not evaluate to something truthy in %dms', details.testFx.toString(), timeout);\n        }\n\n        errorHandlerAndDone(new TimedOutError(message));\n    };\n};\n\n// Tester class is an EventEmitter\nutils.inherits(Tester, events.EventEmitter);\nexports.Tester = Tester;\n\n/**\n * Aborts current test suite.\n *\n * @param  String  message Warning message (optional)\n */\nTester.prototype.abort = function abort(message) {\n    \"use strict\";\n    throw new TerminationError(message || 'test suite aborted');\n};\n\n/**\n * Skip `nb` tests.\n *\n * @param  Integer  nb       Number of tests to skip\n * @param  String   message  Message to display\n * @return Object\n */\nTester.prototype.skip = function skip(nb, message) {\n    \"use strict\";\n    return this.processAssertionResult({\n        success: null,\n        standard: f(\"%d test%s skipped\", nb, nb > 1 ? \"s\" : \"\"),\n        message: message,\n        type: \"skip\",\n        number: nb,\n        skipped: true\n    });\n};\n\n/**\n * Skip `nb` test on specific engine(s).\n *\n * A skip specifier is an object of the form:\n * {\n *     name: 'casperjs' | 'phantomjs',\n *     version: {\n *         min:   Object,\n *         max:   Object\n *     },\n *     message: String\n * }\n *\n * Minimal and maximal versions to be skipped are determined using\n * utils.matchEngine.\n *\n * @param  Integer  nb        Number of tests to skip\n * @param  Mixed    skipSpec  a single skip specifier object or\n *                            an Array of skip specifier objects\n * @return Object\n */\nTester.prototype.skipIfEngine = function skipIfEngine(nb, skipSpec) {\n    skipSpec = utils.matchEngine(skipSpec);\n    if (skipSpec) {\n        var message = skipSpec.name;\n        var version = skipSpec.version;\n        var skipMessage = skipSpec.message;\n        if (version) {\n            var min = version.min;\n            var max = version.max;\n            if (min && min === max) {\n                message += ' ' + min;\n            } else {\n                if (min) {\n                    message += ' from ' + min;\n                }\n                if (max) {\n                    message += ' to ' + max;\n                }\n            }\n        }\n        if (skipMessage) {\n            message += ' ' + skipMessage;\n        }\n        return this.skip(nb, message);\n    }\n    return false;\n};\n\n/**\n * Asserts that a condition strictly resolves to true. Also returns an\n * \"assertion object\" containing useful informations about the test case\n * results.\n *\n * This method is also used as the base one used for all other `assert*`\n * family methods; supplementary informations are then passed using the\n * `context` argument.\n *\n * Note: an AssertionError is thrown if the assertion fails.\n *\n * @param  Boolean      subject  The condition to test\n * @param  String       message  Test description\n * @param  Object|null  context  Assertion context object (Optional)\n * @return Object                An assertion result object if test passed\n * @throws AssertionError in case the test failed\n */\nTester.prototype.assert =\nTester.prototype.assertTrue = function assert(subject, message, context) {\n    \"use strict\";\n    this.executed++;\n    var result = utils.mergeObjects({\n        success: subject === true,\n        type: \"assert\",\n        standard: \"Subject is strictly true\",\n        message: message,\n        file: this.currentTestFile,\n        doThrow: true,\n        values: {\n            subject: utils.getPropertyPath(context, 'values.subject') || subject\n        }\n    }, context || {});\n    if (!result.success && result.doThrow) {\n        throw new AssertionError(message || result.standard, result);\n    }\n    return this.processAssertionResult(result);\n};\n\n/**\n * Asserts that two values are strictly equals.\n *\n * @param  Mixed   subject   The value to test\n * @param  Mixed   expected  The expected value\n * @param  String  message   Test description (Optional)\n * @return Object            An assertion result object\n */\nTester.prototype.assertEquals =\nTester.prototype.assertEqual = function assertEquals(subject, expected, message) {\n    \"use strict\";\n    return this.assert(utils.equals(subject, expected), message, {\n        type: \"assertEquals\",\n        standard: \"Subject equals the expected value\",\n        values: {\n            subject:  subject,\n            expected: expected\n        }\n    });\n};\n\n/**\n * Asserts that two values are strictly not equals.\n *\n * @param  Mixed        subject   The value to test\n * @param  Mixed        expected  The unwanted value\n * @param  String|null  message   Test description (Optional)\n * @return Object                 An assertion result object\n */\nTester.prototype.assertNotEquals = function assertNotEquals(subject, shouldnt, message) {\n    \"use strict\";\n    return this.assert(!this.testEquals(subject, shouldnt), message, {\n        type: \"assertNotEquals\",\n        standard: \"Subject doesn't equal what it shouldn't be\",\n        values: {\n            subject:  subject,\n            shouldnt: shouldnt\n        }\n    });\n};\n\n/**\n * Asserts that a selector expression matches n elements.\n *\n * @param  Mixed   selector  A selector expression\n * @param  Number  count     Expected number of matching elements\n * @param  String  message   Test description (Optional)\n * @return Object            An assertion result object\n */\nTester.prototype.assertElementCount = function assertElementCount(selector, count, message) {\n    \"use strict\";\n    if (!utils.isNumber(count) || count < 0) {\n        throw new CasperError('assertElementCount() needs a positive integer count');\n    }\n    var elementCount = this.casper.evaluate(function(selector) {\n        try {\n            return __utils__.findAll(selector).length;\n        } catch (e) {\n            return -1;\n        }\n    }, selector);\n    return this.assert(elementCount === count, message, {\n        type: \"assertElementCount\",\n        standard: f('%d element%s matching selector \"%s\" found',\n                    count,\n                    count > 1 ? 's' : '',\n                    selector),\n        values: {\n            selector: selector,\n            expected: count,\n            obtained: elementCount\n        }\n    });\n};\n\n/**\n * Asserts that a code evaluation in remote DOM resolves to true.\n *\n * @param  Function  fn       A function to be evaluated in remote DOM\n * @param  String    message  Test description\n * @param  Object    params   Object/Array containing the parameters to inject into\n *                            the function (optional)\n * @return Object             An assertion result object\n */\nTester.prototype.assertEval =\nTester.prototype.assertEvaluate = function assertEval(fn, message, params) {\n    \"use strict\";\n    return this.assert(this.casper.evaluate(fn, params), message, {\n        type: \"assertEval\",\n        standard: \"Evaluated function returns true\",\n        values: {\n            fn: fn,\n            params: params\n        }\n    });\n};\n\n/**\n * Asserts that the result of a code evaluation in remote DOM equals\n * an expected value.\n *\n * @param  Function     fn        The function to be evaluated in remote DOM\n * @param  Boolean      expected  The expected value\n * @param  String|null  message   Test description\n * @param  Object|null  params    Object containing the parameters to inject into the\n *                                function (optional)\n * @return Object                 An assertion result object\n */\nTester.prototype.assertEvalEquals =\nTester.prototype.assertEvalEqual = function assertEvalEquals(fn, expected, message, params) {\n    \"use strict\";\n    var subject = this.casper.evaluate(fn, params);\n    return this.assert(utils.equals(subject, expected), message, {\n        type: \"assertEvalEquals\",\n        standard: \"Evaluated function returns the expected value\",\n        values: {\n            fn: fn,\n            params: params,\n            subject:  subject,\n            expected: expected\n        }\n    });\n};\n\nfunction baseFieldAssert(inputName, expected, actual, message) {\n    \"use strict\";\n\n    return this.assert(utils.equals(actual, expected),  message, {\n        type: 'assertField',\n        standard: f('\"%s\" input field has the value \"%s\"', inputName, expected),\n        values: {\n            inputName: inputName,\n            actual: actual,\n            expected: expected\n         }\n    });\n}\n\n/**\n * Asserts that the provided assertion fails (used for internal testing).\n *\n * @param  Function     fn       A closure calling an assertion\n * @param  String|null  message  Test description\n * @return Object                An assertion result object\n */\nTester.prototype.assertFail = function assertFail(fn, message) {\n    \"use strict\";\n    var failed = false;\n    try {\n        fn();\n    } catch (e) {\n        failed = true;\n    }\n    return this.assert(failed, message, {\n        type: \"assertFail\",\n        standard: \"Assertion fails as expected\"\n    });\n};\n\n/**\n * Asserts that a given input field has the provided value.\n *\n * @param  String|Object   input      The name attribute of the input element\n *                                    or an object with the selector\n * @param  String          expected   The expected value of the input element\n * @param  String          message    Test description\n * @param  Object          options    ClientUtils#getFieldValue options (optional)\n * @return Object                     An assertion result object\n */\nTester.prototype.assertField = function assertField(input, expected, message, options) {\n    \"use strict\";\n\n    if (typeof input === 'object') {\n        switch (input.type) {\n            case 'css':\n                return this.assertFieldCSS(input.path, expected, message);\n            case 'xpath':\n                return this.assertFieldXPath(input.path, expected, message);\n            default:\n                throw new CasperError('Invalid regexp.');\n            // no default\n        }\n    }\n\n    var actual = this.casper.evaluate(function(inputName) {\n        return __utils__.getFieldValue(__utils__.makeSelector(inputName,'name'));\n    }, input);\n\n    return baseFieldAssert.call(this, input, expected, actual, message);\n};\n\n/**\n * Asserts that a given input field by CSS selector has the provided value.\n *\n * @param  Object   cssSelector The CSS selector to use for the assert field value\n * @param  String   expected    The expected value of the input element\n * @param  String   message     Test description\n * @return Object               An assertion result object\n */\nTester.prototype.assertFieldCSS = function assertFieldCSS(cssSelector, expected, message) {\n    \"use strict\";\n    var actual = this.casper.evaluate(function(inputName) {\n        return __utils__.getFieldValue(__utils__.makeSelector(inputName,'css'));\n    }, cssSelector);\n\n    return baseFieldAssert.call(this, null, expected, actual, message);\n};\n\n/**\n * Asserts that a given input field by XPath selector has the provided value.\n *\n * @param  Object   xPathSelector The XPath selector to use for the assert field value\n * @param  String   expected      The expected value of the input element\n * @param  String   message       Test description\n * @return Object                 An assertion result object\n */\nTester.prototype.assertFieldXPath = function assertFieldXPath(xPathSelector, expected, message) {\n    \"use strict\";\n    var actual = this.casper.evaluate(function(inputName) {\n        return __utils__.getFieldValue(__utils__.makeSelector(inputName,'xpath'));\n    }, xPathSelector);\n\n    return baseFieldAssert.call(this, null, expected, actual, message);\n};\n\n/**\n * Asserts that an element matching the provided selector expression exists in\n * remote DOM.\n *\n * @param  String   selector  Selector expression\n * @param  String   message   Test description\n * @return Object             An assertion result object\n */\nTester.prototype.assertExists =\nTester.prototype.assertExist =\nTester.prototype.assertSelectorExists =\nTester.prototype.assertSelectorExist = function assertExists(selector, message) {\n    \"use strict\";\n    return this.assert(this.casper.exists(selector), message, {\n        type: \"assertExists\",\n        standard: f(\"Find an element matching: %s\", selector),\n        values: {\n            selector: selector\n        }\n    });\n};\n\n/**\n * Asserts that an element matching the provided selector expression does not\n * exist in remote DOM.\n *\n * @param  String   selector  Selector expression\n * @param  String   message   Test description\n * @return Object             An assertion result object\n */\nTester.prototype.assertDoesntExist =\nTester.prototype.assertNotExists = function assertDoesntExist(selector, message) {\n    \"use strict\";\n    return this.assert(!this.casper.exists(selector), message, {\n        type: \"assertDoesntExist\",\n        standard: f(\"Fail to find element matching selector: %s\", selector),\n        values: {\n            selector: selector\n        }\n    });\n};\n\n/**\n * Asserts that current HTTP status is the one passed as argument.\n *\n * @param  Number  status   HTTP status code\n * @param  String  message  Test description\n * @return Object           An assertion result object\n */\nTester.prototype.assertHttpStatus = function assertHttpStatus(status, message) {\n    \"use strict\";\n    var currentHTTPStatus = this.casper.currentHTTPStatus;\n    return this.assert(utils.equals(this.casper.currentHTTPStatus, status), message, {\n        type: \"assertHttpStatus\",\n        standard: f(\"HTTP status code is: %s\", status),\n        values: {\n            current: currentHTTPStatus,\n            expected: status\n        }\n    });\n};\n\n/**\n * Asserts that a provided string matches a provided RegExp pattern.\n *\n * @param  String   subject  The string to test\n * @param  RegExp   pattern  A RegExp object instance\n * @param  String   message  Test description\n * @return Object            An assertion result object\n */\nTester.prototype.assertMatch =\nTester.prototype.assertMatches = function assertMatch(subject, pattern, message) {\n    \"use strict\";\n    if (utils.betterTypeOf(pattern) !== \"regexp\") {\n        throw new CasperError('Invalid regexp.');\n    }\n    return this.assert(pattern.test(subject), message, {\n        type: \"assertMatch\",\n        standard: \"Subject matches the provided pattern\",\n        values:  {\n            subject: subject,\n            pattern: pattern.toString()\n        }\n    });\n};\n\n/**\n * Asserts a condition resolves to false.\n *\n * @param  Boolean  condition  The condition to test\n * @param  String   message    Test description\n * @return Object              An assertion result object\n */\nTester.prototype.assertNot =\nTester.prototype.assertFalse = function assertNot(condition, message) {\n    \"use strict\";\n    return this.assert(!condition, message, {\n        type: \"assertNot\",\n        standard: \"Subject is falsy\",\n        values: {\n            condition: condition\n        }\n    });\n};\n\n/**\n * Asserts that a selector expression is not currently visible.\n *\n * @param  String  expected  selector expression\n * @param  String  message   Test description\n * @return Object            An assertion result object\n */\nTester.prototype.assertNotVisible =\nTester.prototype.assertInvisible = function assertNotVisible(selector, message) {\n    \"use strict\";\n    return this.assert(!this.casper.visible(selector), message, {\n        type: \"assertNotVisible\",\n        standard: \"Selector is not visible\",\n        values: {\n            selector: selector\n        }\n    });\n};\n\n/**\n * Asserts that the provided function called with the given parameters\n * will raise an exception.\n *\n * @param  Function  fn       The function to test\n * @param  Array     args     The arguments to pass to the function\n * @param  String    message  Test description\n * @return Object             An assertion result object\n */\nTester.prototype.assertRaises =\nTester.prototype.assertRaise =\nTester.prototype.assertThrows = function assertRaises(fn, args, message) {\n    \"use strict\";\n    var error, thrown = false, context = {\n        type: \"assertRaises\",\n        standard: \"Function raises an error\"\n    };\n    try {\n        fn.apply(null, args);\n    } catch (err) {\n        thrown = true;\n        error = err;\n    }\n    this.assert(thrown, message, utils.mergeObjects(context, {\n        values: {\n            error: error\n        }\n    }));\n};\n\n/**\n * Asserts that the current page has a resource that matches the provided test\n *\n * @param  Function/String  test     A test function that is called with every response\n * @param  String           message  Test description\n * @return Object                    An assertion result object\n */\nTester.prototype.assertResourceExists =\nTester.prototype.assertResourceExist = function assertResourceExists(test, message) {\n    \"use strict\";\n    return this.assert(this.casper.resourceExists(test), message, {\n        type: \"assertResourceExists\",\n        standard: \"Confirm page has resource\",\n        values: {\n            test: test\n        }\n    });\n};\n\n/**\n * Asserts that given text doesn't exist in the document body.\n *\n * @param  String  text     Text not to be found\n * @param  String  message  Test description\n * @return Object           An assertion result object\n */\nTester.prototype.assertTextDoesntExist =\nTester.prototype.assertTextDoesntExist = function assertTextDoesntExist(text, message) {\n    \"use strict\";\n    var textFound = (this.casper.evaluate(function _evaluate() {\n        return document.body.textContent || document.body.innerText;\n    }).indexOf(text) === -1);\n    return this.assert(textFound, message, {\n        type: \"assertTextDoesntExists\",\n        standard: \"Text doesn't exist within the document body\",\n        values: {\n            text: text\n        }\n    });\n};\n\n/**\n * Asserts that given text exists in the document body.\n *\n * @param  String  text     Text to be found\n * @param  String  message  Test description\n * @return Object           An assertion result object\n */\nTester.prototype.assertTextExists =\nTester.prototype.assertTextExist = function assertTextExists(text, message) {\n    \"use strict\";\n    var textFound = (this.casper.evaluate(function _evaluate() {\n        return document.body.textContent || document.body.innerText;\n    }).indexOf(text) !== -1);\n    return this.assert(textFound, message, {\n        type: \"assertTextExists\",\n        standard: \"Find text within the document body\",\n        values: {\n            text: text\n        }\n    });\n};\n\n/**\n * Asserts a subject is truthy.\n *\n * @param  Mixed   subject  Test subject\n * @param  String  message  Test description\n * @return Object           An assertion result object\n */\nTester.prototype.assertTruthy = function assertTruthy(subject, message) {\n    \"use strict\";\n    /*eslint eqeqeq:0*/\n    return this.assert(utils.isTruthy(subject), message, {\n        type: \"assertTruthy\",\n        standard: \"Subject is truthy\",\n        values: {\n            subject: subject\n        }\n    });\n};\n\n/**\n * Asserts a subject is falsy.\n *\n * @param  Mixed   subject  Test subject\n * @param  String  message  Test description\n * @return Object           An assertion result object\n */\nTester.prototype.assertFalsy = function assertFalsy(subject, message) {\n    \"use strict\";\n    /*eslint eqeqeq:0*/\n    return this.assert(utils.isFalsy(subject), message, {\n        type: \"assertFalsy\",\n        standard: \"Subject is falsy\",\n        values: {\n            subject: subject\n        }\n    });\n};\n\n/**\n * Asserts that given text exists in the provided selector.\n *\n * @param  String   selector  Selector expression\n * @param  String   text      Text to be found\n * @param  String   message   Test description\n * @return Object             An assertion result object\n */\nTester.prototype.assertSelectorHasText =\nTester.prototype.assertSelectorContains = function assertSelectorHasText(selector, text, message) {\n    \"use strict\";\n    var got = this.casper.fetchText(selector);\n    var textFound = got.indexOf(text) !== -1;\n    return this.assert(textFound, message, {\n        type: \"assertSelectorHasText\",\n        standard: f('Find \"%s\" within the selector \"%s\"', text, selector),\n        values: {\n            selector: selector,\n            text: text,\n            actualContent: got\n        }\n    });\n};\n\n/**\n * Asserts that given text does not exist in the provided selector.\n *\n * @param  String   selector  Selector expression\n * @param  String   text      Text not to be found\n * @param  String   message   Test description\n * @return Object             An assertion result object\n */\nTester.prototype.assertSelectorDoesntHaveText =\nTester.prototype.assertSelectorDoesntContain = function assertSelectorDoesntHaveText(selector, text, message) {\n    \"use strict\";\n    var textFound = this.casper.fetchText(selector).indexOf(text) === -1;\n    return this.assert(textFound, message, {\n        type: \"assertSelectorDoesntHaveText\",\n        standard: f('Did not find \"%s\" within the selector \"%s\"', text, selector),\n        values: {\n            selector: selector,\n            text: text\n        }\n    });\n};\n\n/**\n * Asserts that title of the remote page equals to the expected one.\n *\n * @param  String  expected  The expected title string\n * @param  String  message   Test description\n * @return Object            An assertion result object\n */\nTester.prototype.assertTitle = function assertTitle(expected, message) {\n    \"use strict\";\n    var currentTitle = this.casper.getTitle();\n    return this.assert(utils.equals(currentTitle, expected), message, {\n        type: \"assertTitle\",\n        standard: f('Page title is: \"%s\"', expected),\n        values: {\n            subject: currentTitle,\n            expected: expected\n        }\n    });\n};\n\n/**\n * Asserts that title of the remote page matched the provided pattern.\n *\n * @param  RegExp  pattern  The pattern to test the title against\n * @param  String  message  Test description\n * @return Object           An assertion result object\n */\nTester.prototype.assertTitleMatch =\nTester.prototype.assertTitleMatches = function assertTitleMatch(pattern, message) {\n    \"use strict\";\n    if (utils.betterTypeOf(pattern) !== \"regexp\") {\n        throw new CasperError('Invalid regexp.');\n    }\n    var currentTitle = this.casper.getTitle();\n    return this.assert(pattern.test(currentTitle), message, {\n        type: \"assertTitle\",\n        details: \"Page title does not match the provided pattern\",\n        values: {\n            subject: currentTitle,\n            pattern: pattern.toString()\n        }\n    });\n};\n\n/**\n * Asserts that the provided subject is of the given type.\n *\n * @param  mixed   subject  The value to test\n * @param  String  type     The javascript type name\n * @param  String  message  Test description\n * @return Object           An assertion result object\n */\nTester.prototype.assertType = function assertType(subject, type, message) {\n    \"use strict\";\n    var actual = utils.betterTypeOf(subject);\n    return this.assert(utils.equals(actual, type), message, {\n        type: \"assertType\",\n        standard: f('Subject type is: \"%s\"', type),\n        values: {\n            subject: subject,\n            type: type,\n            actual: actual\n        }\n    });\n};\n\n/**\n * Asserts that the provided subject has the provided constructor in its prototype hierarchy.\n *\n * @param  mixed   subject       The value to test\n * @param  Function constructor  The javascript type name\n * @param  String  message       Test description\n * @return Object                An assertion result object\n */\nTester.prototype.assertInstanceOf = function assertInstanceOf(subject, constructor, message) {\n    \"use strict\";\n    if (utils.betterTypeOf(constructor) !== \"function\") {\n        throw new CasperError('Subject is null or undefined.');\n    }\n    return this.assert(utils.betterInstanceOf(subject, constructor), message, {\n        type: \"assertInstanceOf\",\n        standard: f('Subject is instance of: \"%s\"', constructor.name),\n        values: {\n            subject: subject,\n            constructorName: constructor.name\n        }\n    });\n};\n\n/**\n * Asserts that a the current page url matches a given pattern. A pattern may be\n * either a RegExp object or a String. The method will test if the URL matches\n * the pattern or contains the String.\n *\n * @param  RegExp|String  pattern  The test pattern\n * @param  String         message  Test description\n * @return Object                  An assertion result object\n */\nTester.prototype.assertUrlMatch =\nTester.prototype.assertUrlMatches = function assertUrlMatch(pattern, message) {\n    \"use strict\";\n    var currentUrl = this.casper.getCurrentUrl(),\n        patternType = utils.betterTypeOf(pattern),\n        result;\n    if (patternType === \"regexp\") {\n        result = pattern.test(currentUrl);\n    } else if (patternType === \"string\") {\n        result = currentUrl.indexOf(pattern) !== -1;\n    } else {\n        throw new CasperError(\"assertUrlMatch() only accepts strings or regexps\");\n    }\n    return this.assert(result, message, {\n        type: \"assertUrlMatch\",\n        standard: \"Current url matches the provided pattern\",\n        values: {\n            currentUrl: currentUrl,\n            pattern: pattern.toString()\n        }\n    });\n};\n\n/**\n * Asserts that a selector expression is currently visible.\n *\n * @param  String  expected  selector expression\n * @param  String  message   Test description\n * @return Object            An assertion result object\n */\nTester.prototype.assertVisible = function assertVisible(selector, message) {\n    \"use strict\";\n    return this.assert(this.casper.visible(selector), message, {\n        type: \"assertVisible\",\n        standard: \"Selector is visible\",\n        values: {\n            selector: selector\n        }\n    });\n};\n\n/**\n * Asserts that all elements matching selector expression are currently visible.\n * Fails if even one element is not visible.\n *\n * @param  String  expected  selector expression\n * @param  String  message   Test description\n * @return Object            An assertion result object\n */\nTester.prototype.assertAllVisible = function assertAllVisible(selector, message) {\n    \"use strict\";\n    return this.assert(this.casper.allVisible(selector), message, {\n        type: \"assertAllVisible\",\n        standard: \"All elements matching selector are visible\",\n        values: {\n            selector: selector\n        }\n    });\n};\n\n/**\n * Prints out a colored bar onto the console.\n *\n */\nTester.prototype.bar = function bar(text, style) {\n    \"use strict\";\n    this.casper.echo(text, style, this.options.pad);\n};\n\n/**\n * Defines a function which will be executed before every test.\n *\n * @param  Function  fn\n */\nTester.prototype.setUp = function setUp(fn) {\n    \"use strict\";\n    this._setUp = fn;\n};\n\n/**\n * Defines a function which will be executed after every test.\n *\n * @param  Function  fn\n */\nTester.prototype.tearDown = function tearDown(fn) {\n    \"use strict\";\n    this._tearDown = fn;\n};\n\n/**\n * Starts a suite.\n *\n * Can be invoked different ways:\n *\n *     casper.test.begin(\"suite description\", plannedTests, function(test){})\n *     casper.test.begin(\"suite description\", function(test){})\n */\nTester.prototype.begin = function begin() {\n    \"use strict\";\n    if (this.started && this.running)\n        return this.queue.push(arguments);\n\n    function getConfig(args) {\n        var config = {\n            setUp: function(){},\n            tearDown: function(){}\n        };\n\n        if (utils.isFunction(args[1])) {\n            config.test = args[1];\n        } else if (utils.isObject(args[1])) {\n            config = utils.mergeObjects(config, args[1]);\n        } else if (utils.isNumber(args[1]) && utils.isFunction(args[2])) {\n            config.planned = ~~args[1] || undefined;\n            config.test = args[2];\n        } else if (utils.isNumber(args[1]) && utils.isObject(args[2])) {\n            config.config = utils.mergeObjects(config, args[2]);\n            config.planned = ~~args[1] || undefined;\n        } else {\n            throw new CasperError('Invalid call');\n        }\n\n        if (!utils.isFunction(config.test))\n            throw new CasperError('begin() is missing a mandatory test function');\n\n        return config;\n    }\n\n    var description = arguments[0] || f(\"Untitled suite in %s\", this.currentTestFile),\n        config = getConfig([].slice.call(arguments)),\n        next = function() {\n            config.test(this, this.casper);\n            if (!this.options.concise) {\n                this.casper.echo([\n                    this.colorize('PASS', 'INFO'),\n                    this.formatMessage(description),\n                    this.colorize(f('(%d test%s)',\n                                    config.planned,\n                                    config.planned > 1 ? 's' : ''), 'INFO')\n                ].join(' '));\n            }\n        }.bind(this);\n\n    if (!this.options.concise)\n        this.comment(description);\n\n    this.currentSuite = new TestCaseResult({\n        name: description,\n        file: this.currentTestFile,\n        config: config,\n        planned: config.planned || undefined\n    });\n\n    this.executed = 0;\n    this.running = this.started = true;\n\n    try {\n        if (config.setUp)\n            config.setUp(this, this.casper);\n\n        if (!this._setUp)\n            return next();\n\n        if (this._setUp.length > 0)\n            return this._setUp.call(this, next); // async\n\n        this._setUp.call(this);                  // sync\n        next();\n    } catch (err) {\n        this.processError(err);\n        this.done();\n    }\n};\n\n/**\n * Render a colorized output. Basically a proxy method for\n * `Casper.Colorizer#colorize()`.\n *\n * @param  String  message\n * @param  String  style    The style name\n * @return String\n */\nTester.prototype.colorize = function colorize(message, style) {\n    \"use strict\";\n    return this.casper.getColorizer().colorize(message, style);\n};\n\n/**\n * Writes a comment-style formatted message to stdout.\n *\n * @param  String  message\n */\nTester.prototype.comment = function comment(message) {\n    \"use strict\";\n    this.casper.echo('# ' + message, 'COMMENT');\n};\n\n/**\n * Declares the current test suite done.\n *\n */\nTester.prototype.done = function done() {\n    \"use strict\";\n    /*eslint max-statements:0, complexity:0*/\n    var planned, config = this.currentSuite && this.currentSuite.config || {};\n\n    if (arguments.length && utils.isNumber(arguments[0])) {\n        this.casper.warn('done() `planned` arg is deprecated as of 1.1');\n        planned = arguments[0];\n    }\n\n    if (config && config.tearDown && utils.isFunction(config.tearDown)) {\n        try {\n            config.tearDown(this, this.casper);\n        } catch (error) {\n            this.processError(error);\n        }\n    }\n\n    var next = function() {\n        if (this.currentSuite && this.currentSuite.planned &&\n            this.currentSuite.planned !== this.executed + this.currentSuite.skipped &&\n            !this.currentSuite.failed) {\n            this.dubious(this.currentSuite.planned, this.executed, this.currentSuite.name);\n        } else if (planned && planned !== this.executed) {\n            // BC\n            this.dubious(planned, this.executed);\n        }\n        if (this.currentSuite) {\n            this.suiteResults.push(this.currentSuite);\n            this.currentSuite = undefined;\n            this.executed = 0;\n        }\n        this.emit('test.done');\n        this.casper.currentHTTPResponse = {};\n        this.running = this.started = false;\n        var nextTest = this.queue.shift();\n        if (nextTest) {\n            this.begin.apply(this, nextTest);\n        }\n    }.bind(this);\n\n    if (!this._tearDown) {\n        return next();\n    }\n\n    try {\n        if (this._tearDown.length > 0) {\n            // async\n            this._tearDown.call(this, next);\n        } else {\n            // sync\n            this._tearDown.call(this);\n            next();\n        }\n    } catch (error) {\n        this.processError(error);\n    }\n};\n\n/**\n * Marks a test as dubious, when the number of planned tests doesn't match the\n * number of actually executed one.\n *\n * @param  String  message\n */\nTester.prototype.dubious = function dubious(planned, executed, suite) {\n    \"use strict\";\n    var message = f('%s: %d tests planned, %d tests executed', suite || 'global', planned, executed);\n    this.casper.warn(message);\n    if (!this.currentSuite) return;\n    this.currentSuite.addFailure({\n        type:     \"dubious\",\n        file:     this.currentTestFile,\n        standard: message\n    });\n};\n\n/**\n * Writes an error-style formatted message to stdout.\n *\n * @param  String  message\n */\nTester.prototype.error = function error(message) {\n    \"use strict\";\n    this.casper.echo(message, 'ERROR');\n};\n\n/**\n * Executes a file, wraping and evaluating its code in an isolated\n * environment where only the current `casper` instance is passed.\n *\n * @param  String  file  Absolute path to some js/coffee file\n */\nTester.prototype.exec = function exec(file) {\n    \"use strict\";\n    file = this.filter('exec.file', file) || file;\n    if (!fs.isFile(file) || !utils.isJsFile(file)) {\n        var e = new CasperError(f(\"Cannot exec %s: can only exec() files with .js or .coffee extensions\",\n                                  file));\n        e.fileName = e.file = e.sourceURL = file;\n        throw e;\n    }\n    this.currentTestFile = file;\n    phantom.injectJs(file);\n};\n\n/**\n * Adds a failed test entry to the stack.\n *\n * @param  String  message\n * @param  Object  Failure context (optional)\n */\nTester.prototype.fail = function fail(message, context) {\n    \"use strict\";\n    context = context || {};\n    return this.assert(false, message, utils.mergeObjects({\n        type:    \"fail\",\n        standard: \"explicit call to fail()\"\n    }, context));\n};\n\n/**\n * Recursively finds all test files contained in a given directory.\n *\n * @param  String  dir  Path to some directory to scan\n */\nTester.prototype.findTestFiles = function findTestFiles(dir) {\n    \"use strict\";\n    var self = this;\n    if (!fs.isDirectory(dir)) {\n        return [];\n    }\n    var entries = fs.list(dir).filter(function _filter(entry) {\n        return entry !== '.' && entry !== '..';\n    }).map(function _map(entry) {\n        return fs.absolute(fs.pathJoin(dir, entry));\n    });\n    entries.forEach(function _forEach(entry) {\n        if (fs.isDirectory(entry)) {\n            entries = entries.concat(self.findTestFiles(entry));\n        }\n    });\n    return entries.filter(function _filter(entry) {\n        return utils.isJsFile(entry);\n    }).sort();\n};\n\n/**\n * Computes current suite identifier.\n *\n * @return String\n */\nTester.prototype.getCurrentSuiteId = function getCurrentSuiteId() {\n    \"use strict\";\n    return this.casper.test.currentSuiteNum + \"-\" + this.casper.step;\n};\n\n/**\n * Formats a message to highlight some parts of it.\n *\n * @param  String  message\n * @param  String  style\n */\nTester.prototype.formatMessage = function formatMessage(message, style) {\n    \"use strict\";\n    var parts = /^([a-z0-9_\\.]+\\(\\))(.*)/i.exec(message);\n    if (!parts) {\n        return message;\n    }\n    return this.colorize(parts[1], 'PARAMETER') + this.colorize(parts[2], style);\n};\n\n/**\n * Writes an info-style formatted message to stdout.\n *\n * @param  String  message\n */\nTester.prototype.info = function info(message) {\n    \"use strict\";\n    this.casper.echo(message, 'PARAMETER');\n};\n\n/**\n * Adds a succesful test entry to the stack.\n *\n * @param  String  message\n */\nTester.prototype.pass = function pass(message) {\n    \"use strict\";\n    return this.assert(true, message, {\n        type:    \"pass\",\n        standard: \"explicit call to pass()\"\n    });\n};\n\nfunction getStackEntry(error, testFile) {\n    \"use strict\";\n    if (\"stackArray\" in error) {\n        // PhantomJS has changed the API of the Error object :-/\n        // https://github.com/ariya/phantomjs/commit/c9cf14f221f58a3daf585c47313da6fced0276bc\n        return error.stackArray.filter(function(entry) {\n            return testFile === entry.sourceURL;\n        })[0];\n    }\n\n    if (! ('stack' in error))\n        return null;\n\n    var r = /\\r?\\n\\s*(.*?)(at |@)([^:]*?):(\\d+):?(\\d*)/g;\n    var m;\n    while ((m = r.exec(error.stack))) {\n        var sourceURL = m[3];\n        if (sourceURL.indexOf('->') !== -1) {\n            sourceURL = sourceURL.split('->')[1].trim();\n        }\n        if (sourceURL === testFile) {\n            return { sourceURL: sourceURL, line: m[4], column: m[5]};\n        }\n    }\n    return null;\n}\n\n/**\n * Processes an assertion error.\n *\n * @param  AssertionError  error\n */\nTester.prototype.processAssertionError = function(error) {\n    \"use strict\";\n    var result = error && error.result || {},\n        testFile = this.currentTestFile,\n        stackEntry;\n    try {\n        stackEntry = getStackEntry(error, testFile);\n    } catch (e) {}\n    if (stackEntry) {\n        result.line = stackEntry.line;\n        try {\n            result.lineContents = fs.read(this.currentTestFile).split('\\n')[result.line - 1].trim();\n        } catch (e) {}\n    }\n    return this.processAssertionResult(result);\n};\n\n/**\n * Processes an assertion result by emitting the appropriate event and\n * printing result onto the console.\n *\n * @param  Object  result  An assertion result object\n * @return Object          The passed assertion result Object\n */\nTester.prototype.processAssertionResult = function processAssertionResult(result) {\n    \"use strict\";\n    if (!this.currentSuite) {\n        // this is for BC when begin() didn't exist\n        this.currentSuite = new TestCaseResult({\n            name: \"Untitled suite in \" + this.currentTestFile,\n            file: this.currentTestFile,\n            planned: undefined\n        });\n    }\n    var eventName = 'success',\n        message = result.message || result.standard,\n        style = 'INFO',\n        status = this.options.passText;\n    if (null === result.success) {\n        eventName = 'skipped';\n        style = 'SKIP';\n        status = this.options.skipText;\n    } else if (!result.success) {\n        eventName = 'fail';\n        style = 'RED_BAR';\n        status = this.options.failText;\n    }\n    if (!this.options.concise) {\n        this.casper.echo([this.colorize(status, style), this.formatMessage(message)].join(' '));\n    }\n    this.emit(eventName, result);\n    return result;\n};\n\n/**\n * Processes an error.\n *\n * @param  Error  error\n */\nTester.prototype.processError = function processError(error) {\n    \"use strict\";\n    if (error instanceof AssertionError) {\n        return this.processAssertionError(error);\n    }\n    if (error instanceof TerminationError) {\n        return this.terminate(error.message);\n    }\n    return this.uncaughtError(error, this.currentTestFile, error.line);\n};\n\n/**\n * Processes a PhantomJS error, which is an error message and a backtrace.\n *\n * @param  String  message\n * @param  Array   backtrace\n */\nTester.prototype.processPhantomError = function processPhantomError(msg, backtrace) {\n    \"use strict\";\n    if (/^AssertionError/.test(msg)) {\n        this.casper.warn('looks like you did not use begin(), which is mandatory since 1.1');\n    }\n    var termination = /^TerminationError:?\\s?(.*)/.exec(msg);\n    if (termination) {\n        var message = termination[1];\n        if (backtrace && backtrace[0]) {\n            message += ' at ' + backtrace[0].file + backtrace[0].line;\n        }\n        return this.terminate(message);\n    }\n    this.fail(msg, {\n        type: \"error\",\n        doThrow: false,\n        values: {\n            error: msg,\n            stack: backtrace\n        }\n    });\n    this.done();\n};\n\n/**\n * Renders a detailed report for each failed test.\n *\n */\nTester.prototype.renderFailureDetails = function renderFailureDetails() {\n    \"use strict\";\n    if (!this.suiteResults.isFailed()) {\n        return;\n    }\n    var failures = this.suiteResults.getAllFailures();\n    this.casper.echo(f(\"\\nDetails for the %d failed test%s:\\n\",\n                       failures.length, failures.length > 1 ? \"s\" : \"\"), \"PARAMETER\");\n    failures.forEach(function _forEach(failure) {\n        this.casper.echo(f('In %s%s', failure.file, ~~failure.line ? ':' + ~~failure.line : ''));\n        if (failure.suite) {\n            this.casper.echo(f('  %s', failure.suite), \"PARAMETER\");\n        }\n        this.casper.echo(f('    %s: %s', failure.type || \"unknown\",\n            failure.message || failure.standard || \"(no message was entered)\"), \"COMMENT\");\n    }.bind(this));\n};\n\n/**\n * Render tests results, an optionally exit phantomjs.\n *\n * @param  Boolean  exit    Exit casper after results have been rendered?\n * @param  Number   status  Exit status code (default: 0)\n * @param  String   save    Optional path to file where to save the results log\n */\nTester.prototype.renderResults = function renderResults(exit, status, save) {\n    \"use strict\";\n    /*eslint max-statements:0*/\n    save = save || this.options.save;\n    var exitStatus = 0,\n        failed = this.suiteResults.countFailed(),\n        total = this.suiteResults.countExecuted(),\n        statusText,\n        style,\n        result;\n    if (total === 0) {\n        exitStatus = 1;\n        statusText = this.options.warnText;\n        style = 'WARN_BAR';\n        result = f(\"%s Looks like you didn't run any tests.\", statusText);\n    } else {\n        if (this.suiteResults.isFailed()) {\n            exitStatus = 1;\n            statusText = this.options.failText;\n            style = 'RED_BAR';\n        } else {\n            statusText = this.options.passText;\n            style = 'GREEN_BAR';\n        }\n        result = f('%s %d test%s executed in %ss, %d passed, %d failed, %d dubious, %d skipped.',\n                   statusText,\n                   total,\n                   total > 1 ? \"s\" : \"\",\n                   utils.ms2seconds(this.suiteResults.calculateDuration()),\n                   this.suiteResults.countPassed(),\n                   failed,\n                   this.suiteResults.countDubious(),\n                   this.suiteResults.countSkipped());\n    }\n    this.casper.echo(result, style, this.options.pad);\n    this.renderFailureDetails();\n    if (save) {\n        this.saveResults(save);\n    }\n    if (exit === true) {\n        this.emit(\"exit\");\n        this.casper.exit(status ? ~~status : exitStatus);\n    }\n};\n\n/**\n * Runs all suites contained in the paths passed as arguments.\n *\n */\nTester.prototype.runSuites = function runSuites() {\n    \"use strict\";\n    var testFiles = [], self = this;\n    if (arguments.length === 0) {\n        throw new CasperError(\"runSuites() needs at least one path argument\");\n    }\n    this.loadIncludes.includes.forEach(function _forEachInclude(include) {\n        phantom.injectJs(include);\n    });\n    this.loadIncludes.pre.forEach(function _forEachPreTest(preTestFile) {\n        testFiles = testFiles.concat(preTestFile);\n    });\n    Array.prototype.forEach.call(arguments, function _forEachArgument(path) {\n        if (!fs.exists(path)) {\n            self.bar(f(\"Path %s doesn't exist\", path), \"RED_BAR\");\n        }\n        if (fs.isDirectory(path)) {\n            testFiles = testFiles.concat(self.findTestFiles(path));\n        } else if (fs.isFile(path)) {\n            testFiles.push(path);\n        }\n    });\n    this.loadIncludes.post.forEach(function _forEachPostTest(postTestFile) {\n        testFiles = testFiles.concat(postTestFile);\n    });\n    if (testFiles.length === 0) {\n        this.bar(f(\"No test file found in %s, terminating.\",\n                   Array.prototype.slice.call(arguments)), \"RED_BAR\");\n        this.casper.exit(1);\n    }\n    self.currentSuiteNum = 0;\n    self.currentTestStartTime = new Date();\n    self.lastAssertTime = 0;\n    var interval = setInterval(function _check(self) {\n        if (self.running) {\n            return;\n        }\n        if (self.currentSuiteNum === testFiles.length || self.aborted) {\n            self.emit('tests.complete');\n            clearInterval(interval);\n            self.aborted = false;\n        } else {\n            self.runTest(testFiles[self.currentSuiteNum]);\n            self.currentSuiteNum++;\n        }\n    }, 20, this);\n};\n\n/**\n * Runs a test file\n *\n */\nTester.prototype.runTest = function runTest(testFile) {\n    \"use strict\";\n    this.bar(f('Test file: %s', testFile), 'INFO_BAR');\n    this.running = true; // this.running is set back to false with done()\n    this.executed = 0;\n    this.exec(testFile);\n};\n\n/**\n * Terminates current suite.\n *\n */\nTester.prototype.terminate = function(message) {\n    \"use strict\";\n    if (message) {\n        this.casper.warn(message);\n    }\n    this.done();\n    this.aborted = true;\n    this.emit('tests.complete');\n};\n\n/**\n * Saves results to file.\n *\n * @param  String  filename  Target file path.\n */\nTester.prototype.saveResults = function saveResults(filepath) {\n    \"use strict\";\n    var exporter = require('xunit').create();\n    exporter.setResults(this.suiteResults);\n    try {\n        fs.write(filepath, exporter.getSerializedXML(), 'w');\n        this.casper.echo(f('Result log stored in %s', filepath), 'INFO', 80);\n    } catch (e) {\n        this.casper.echo(f('Unable to write results to %s: %s', filepath, e), 'ERROR', 80);\n    }\n};\n\n/**\n * Tests equality between the two passed arguments.\n *\n * @param  Mixed  v1\n * @param  Mixed  v2\n * @param  Boolean\n */\nTester.prototype.testEquals = Tester.prototype.testEqual = function testEquals(v1, v2) {\n    \"use strict\";\n    return utils.equals(v1, v2);\n};\n\n/**\n * Processes an error caught while running tests contained in a given test\n * file.\n *\n * @param  Error|String  error      The error\n * @param  String        file       Test file where the error occurred\n * @param  Number        line       Line number (optional)\n * @param  Array         backtrace  Error stack trace (optional)\n */\nTester.prototype.uncaughtError = function uncaughtError(error, file, line, backtrace) {\n    \"use strict\";\n    // XXX: this is NOT an assertion scratch that\n    return this.processAssertionResult({\n        success: false,\n        type: \"uncaughtError\",\n        file: file,\n        line: ~~line,\n        message: utils.isObject(error) ? error.message : error,\n        values: {\n            error: error,\n            stack: backtrace\n        }\n    });\n};\n\n/**\n * Test suites array.\n *\n */\nfunction TestSuiteResult() {}\nTestSuiteResult.prototype = [];\nexports.TestSuiteResult = TestSuiteResult;\n\n/**\n * Returns the number of tests.\n *\n * @return Number\n */\nTestSuiteResult.prototype.countTotal = function countTotal() {\n    \"use strict\";\n    return this.countPassed() + this.countFailed() + this.countDubious();\n};\n\n/**\n * Returns the number of dubious results.\n *\n * @return Number\n */\nTestSuiteResult.prototype.countDubious = function countDubious() {\n    \"use strict\";\n    return this.map(function(result) {\n        return result.dubious;\n    }).reduce(function(a, b) {\n        return a + b;\n    }, 0);\n};\n\n/**\n * Returns the number of executed tests.\n *\n * @return Number\n */\nTestSuiteResult.prototype.countExecuted = function countTotal() {\n    \"use strict\";\n    return this.countTotal() - this.countDubious();\n};\n\n/**\n * Returns the number of errors.\n *\n * @return Number\n */\nTestSuiteResult.prototype.countErrors = function countErrors() {\n    \"use strict\";\n    return this.map(function(result) {\n        return result.crashed;\n    }).reduce(function(a, b) {\n        return a + b;\n    }, 0);\n};\n\n/**\n * Returns the number of failed tests.\n *\n * @return Number\n */\nTestSuiteResult.prototype.countFailed = function countFailed() {\n    \"use strict\";\n    return this.map(function(result) {\n        return result.failed - result.dubious;\n    }).reduce(function(a, b) {\n        return a + b;\n    }, 0);\n};\n\n/**\n * Returns the number of succesful tests.\n *\n * @return Number\n */\nTestSuiteResult.prototype.countPassed = function countPassed() {\n    \"use strict\";\n    return this.map(function(result) {\n        return result.passed;\n    }).reduce(function(a, b) {\n        return a + b;\n    }, 0);\n};\n\n/**\n * Returns the number of skipped tests.\n *\n * @return Number\n */\nTestSuiteResult.prototype.countSkipped = function countSkipped() {\n    \"use strict\";\n    return this.map(function(result) {\n        return result.skipped;\n    }).reduce(function(a, b) {\n        return a + b;\n    }, 0);\n};\n\n/**\n * Returns the number of warnings.\n *\n * @return Number\n */\nTestSuiteResult.prototype.countWarnings = function countWarnings() {\n    \"use strict\";\n    return this.map(function(result) {\n        return result.warned;\n    }).reduce(function(a, b) {\n        return a + b;\n    }, 0);\n};\n\n/**\n * Checks if the suite has failed.\n *\n * @return Number\n */\nTestSuiteResult.prototype.isFailed = function isFailed() {\n    \"use strict\";\n    return this.countErrors() + this.countFailed() + this.countDubious() > 0;\n};\n\n/**\n * Checks if the suite has skipped tests.\n *\n * @return Number\n */\nTestSuiteResult.prototype.isSkipped = function isSkipped() {\n    \"use strict\";\n    return this.countSkipped() > 0;\n};\n\n/**\n * Returns all failures from this suite.\n *\n * @return Array\n */\nTestSuiteResult.prototype.getAllFailures = function getAllFailures() {\n    \"use strict\";\n    var failures = [];\n    this.forEach(function(result) {\n        failures = failures.concat(result.failures);\n    });\n    return failures;\n};\n\n/**\n * Returns all succesful tests from this suite.\n *\n * @return Array\n */\nTestSuiteResult.prototype.getAllPasses = function getAllPasses() {\n    \"use strict\";\n    var passes = [];\n    this.forEach(function(result) {\n        passes = passes.concat(result.passes);\n    });\n    return passes;\n};\n\n/**\n * Returns all skipped tests from this suite.\n *\n * @return Array\n */\nTestSuiteResult.prototype.getAllSkips = function getAllSkips() {\n    \"use strict\";\n    var skipped = [];\n    this.forEach(function(result) {\n        skipped = skipped.concat(result.skipped);\n    });\n    return skipped;\n};\n\n/**\n * Returns all results from this suite.\n *\n * @return Array\n */\nTestSuiteResult.prototype.getAllResults = function getAllResults() {\n    \"use strict\";\n    return this.getAllPasses().concat(this.getAllFailures());\n};\n\n/**\n * Computes the sum of all durations of the tests which were executed in the\n * current suite.\n *\n * @return Number\n */\nTestSuiteResult.prototype.calculateDuration = function calculateDuration() {\n    \"use strict\";\n    return this.getAllResults().map(function(result) {\n        return ~~result.time;\n    }).reduce(function add(a, b) {\n        return a + b;\n    }, 0);\n};\n\n/**\n * Test suite results object.\n *\n * @param Object  options\n */\nfunction TestCaseResult(options) {\n    \"use strict\";\n    this.name = options && options.name;\n    this.file = options && options.file;\n    this.planned = ~~(options && options.planned) || undefined;\n    this.errors = [];\n    this.failures = [];\n    this.passes = [];\n    this.skips = [];\n    this.warnings = [];\n    this.config = options && options.config;\n    this.__defineGetter__(\"assertions\", function() {\n        return this.passed + this.failed;\n    });\n    this.__defineGetter__(\"crashed\", function() {\n        return this.errors.length;\n    });\n    this.__defineGetter__(\"failed\", function() {\n        return this.failures.length;\n    });\n    this.__defineGetter__(\"dubious\", function() {\n        return this.failures.filter(function(failure) {\n            return failure.type === \"dubious\";\n        }).length;\n    });\n    this.__defineGetter__(\"passed\", function() {\n        return this.passes.length;\n    });\n    this.__defineGetter__(\"skipped\", function() {\n        return this.skips.map(function(skip) {\n            return skip.number;\n        }).reduce(function(a, b) {\n            return a + b;\n        }, 0);\n    });\n}\nexports.TestCaseResult = TestCaseResult;\n\n/**\n * Adds a failure record and its execution time.\n *\n * @param Object  failure\n * @param Number  time\n */\nTestCaseResult.prototype.addFailure = function addFailure(failure, time) {\n    \"use strict\";\n    failure.suite = this.name;\n    failure.time = time;\n    this.failures.push(failure);\n};\n\n/**\n * Adds an error record.\n *\n * @param Object  failure\n */\nTestCaseResult.prototype.addError = function addFailure(error) {\n    \"use strict\";\n    error.suite = this.name;\n    this.errors.push(error);\n};\n\n/**\n * Adds a success record and its execution time.\n *\n * @param Object  success\n * @param Number  time\n */\nTestCaseResult.prototype.addSuccess = function addSuccess(success, time) {\n    \"use strict\";\n    success.suite = this.name;\n    success.time = time;\n    this.passes.push(success);\n};\n\n/**\n * Adds a success record and its execution time.\n *\n * @param Object  success\n * @param Number  time\n */\nTestCaseResult.prototype.addSkip = function addSkip(skipped, time) {\n    \"use strict\";\n    skipped.suite = this.name;\n    skipped.time = time;\n    this.skips.push(skipped);\n};\n\n\n/**\n * Adds a warning message.\n * NOTE: quite contrary to addError, addSuccess, and addSkip\n * this adds a String value, NOT an Object\n *\n * @param String  warning\n */\nTestCaseResult.prototype.addWarning = function addWarning(warning) {\n    \"use strict\";\n    this.warnings.push(warning);\n};\n\n/**\n * Computes total duration for this suite.\n *\n * @return  Number\n */\nTestCaseResult.prototype.calculateDuration = function calculateDuration() {\n    \"use strict\";\n    function add(a, b) {\n        return a + b;\n    }\n    var passedTimes = this.passes.map(function(success) {\n        return ~~success.time;\n    }).reduce(add, 0);\n    var failedTimes = this.failures.map(function(failure) {\n        return ~~failure.time;\n    }).reduce(add, 0);\n    return passedTimes + failedTimes;\n};\n","/home/travis/build/npmtest/node-npmtest-casperjs/node_modules/casperjs/modules/utils.js":"/*!\n * Casper is a navigation utility for PhantomJS.\n *\n * Documentation: http://casperjs.org/\n * Repository:    http://github.com/casperjs/casperjs\n *\n * Copyright (c) 2011-2012 Nicolas Perriault\n *\n * Part of source code is Copyright Joyent, Inc. and other Node contributors.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n\nvar require = patchRequire(require);\n\n/**\n * Provides a better typeof operator equivalent, able to retrieve the array\n * type.\n *\n * CAVEAT: this function does not necessarilly map to classical js \"type\" names,\n * notably a `null` will map to \"null\" instead of \"object\".\n *\n * @param  mixed  input\n * @return String\n * @see    http://javascriptweblog.wordpress.com/2011/08/08/fixing-the-javascript-typeof-operator/\n */\nfunction betterTypeOf(input) {\n    \"use strict\";\n    switch (input) {\n        case undefined:\n            return 'undefined';\n        case null:\n            return 'null';\n        default:\n        try {\n            var type = Object.prototype.toString.call(input).match(/^\\[object\\s(.*)\\]$/)[1].toLowerCase();\n            if (type === 'object' &&\n                phantom.casperEngine !== \"phantomjs\" &&\n                '__type' in input) {\n                type = input.__type;\n            }\n            // gecko returns window instead of domwindow\n            else if (type === 'window') {\n                return 'domwindow';\n            }\n            return type;\n        } catch (e) {\n            return typeof input;\n        }\n    }\n}\nexports.betterTypeOf = betterTypeOf;\n\n/**\n * Provides a better instanceof operator, capable of checking against the full object prototype hierarchy.\n *\n * @param  mixed  input\n * @param  function constructor\n * @return String\n * @see    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Details_of_the_Object_Model\n */\nfunction betterInstanceOf(input, constructor) {\n    \"use strict\";\n    /*eslint eqeqeq:0 */\n    if (typeof input == 'undefined' || input == null) {\n      return false;\n    }\n    var inputToTest = input;\n    while (inputToTest != null) {\n      if (inputToTest == constructor.prototype) {\n        return true;\n      }\n      if (typeof inputToTest == 'xml') {\n        return constructor.prototype == document.prototype;\n      }\n      if (typeof inputToTest == 'undefined') {\n        return false;\n      }\n      inputToTest = inputToTest.__proto__;\n    }\n    return equals(input.constructor.name, constructor.name);\n}\nexports.betterInstanceOf = betterInstanceOf;\n\n/**\n * Cleans a passed URL.\n *\n * @param  String  url An HTTP URL\n * @return String\n */\nfunction cleanUrl(url) {\n    \"use strict\";\n    if (url.toLowerCase().indexOf('http') !== 0) {\n        return url;\n    }\n    var a = document.createElement('a');\n    a.href = url;\n    return a.href;\n}\nexports.cleanUrl = cleanUrl;\n\n/**\n * Clones an object.\n *\n * @param  Mixed  o\n * @return Mixed\n */\nfunction clone(o) {\n    \"use strict\";\n    return JSON.parse(JSON.stringify(o));\n}\nexports.clone = clone;\n\n/**\n * Computes a modifier string to its PhantomJS equivalent. A modifier string is\n * in the form \"ctrl+alt+shift\".\n *\n * @param  String  modifierString  Modifier string, eg. \"ctrl+alt+shift\"\n * @param  Object  modifiers       Modifiers definitions\n * @return Number\n */\nfunction computeModifier(modifierString, modifiers) {\n    \"use strict\";\n    var modifier = 0,\n        checkKey = function(key) {\n            if (key in modifiers) return;\n            throw new CasperError(format('%s is not a supported key modifier', key));\n        };\n    if (!modifierString) return modifier;\n    var keys = modifierString.split('+');\n    keys.forEach(checkKey);\n    return keys.reduce(function(acc, key) {\n        return acc | modifiers[key];\n    }, modifier);\n}\nexports.computeModifier = computeModifier;\n\n/**\n * Decodes a URL.\n * @param  String  url\n * @return String\n */\nfunction decodeUrl(url) {\n    \"use strict\";\n    try {\n        return decodeURIComponent(url);\n    } catch (e) {\n        /*global unescape*/\n        return unescape(url);\n    }\n}\nexports.decodeUrl = decodeUrl;\n\n/**\n * Dumps a JSON representation of passed value to the console. Used for\n * debugging purpose only.\n *\n * @param  Mixed  value\n */\nfunction dump(value) {\n    \"use strict\";\n    console.log(serialize(value, 4));\n}\nexports.dump = dump;\n\n/**\n * Tests equality between the two passed arguments.\n *\n * @param  Mixed  v1\n * @param  Mixed  v2\n * @param  Boolean\n */\nfunction equals(v1, v2) {\n    \"use strict\";\n    if (isFunction(v1)) {\n        return v1.toString() === v2.toString();\n    }\n    // with Gecko, instanceof is not enough to test object\n    if (v1 instanceof Object || isObject(v1)) {\n        if (!(v2 instanceof Object || isObject(v2)) ||\n            Object.keys(v1).length !== Object.keys(v2).length) {\n            return false;\n        }\n        for (var k in v1) {\n            if (!equals(v1[k], v2[k])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return v1 === v2;\n}\nexports.equals = equals;\n\n/**\n * Returns the file extension in lower case.\n *\n * @param  String  file  File path\n * @return string\n */\nfunction fileExt(file) {\n    \"use strict\";\n    try {\n        return file.split('.').pop().toLowerCase().trim();\n    } catch(e) {\n        return '';\n    }\n}\nexports.fileExt = fileExt;\n\n/**\n * Takes a string and append blanks until the pad value is reached.\n *\n * @param  String  text\n * @param  Number  pad   Pad value (optional; default: 80)\n * @return String\n */\nfunction fillBlanks(text, pad) {\n    \"use strict\";\n    pad = pad || 80;\n    if (text.length < pad) {\n        text += new Array(pad - text.length + 1).join(' ');\n    }\n    return text;\n}\nexports.fillBlanks = fillBlanks;\n\n/**\n * Formats a string with passed parameters. Ported from nodejs `util.format()`.\n *\n * @return String\n */\nfunction format(f) {\n    \"use strict\";\n    var i = 1;\n    var args = arguments;\n    var len = args.length;\n    var str = String(f).replace(/%[sdj%]/g, function _replace(x) {\n        if (i >= len) return x;\n        switch (x) {\n        case '%s':\n            return String(args[i++]);\n        case '%d':\n            return Number(args[i++]);\n        case '%j':\n            return JSON.stringify(args[i++]);\n        case '%%':\n            return '%';\n        default:\n            return x;\n        }\n    });\n    for (var x = args[i]; i < len; x = args[++i]) {\n        if (x === null || typeof x !== 'object') {\n            str += ' ' + x;\n        } else {\n            str += '[obj]';\n        }\n    }\n    return str;\n}\nexports.format = format;\n\n/**\n * Formats a test value.\n *\n * @param  Mixed  value\n * @return String\n */\nfunction formatTestValue(value, name) {\n    \"use strict\";\n    var formatted = '';\n    if (value instanceof Error) {\n        formatted += value.message + '\\n';\n        if (value.stack) {\n            formatted += indent(value.stack, 12, '#');\n        }\n    } else if (name === 'stack') {\n        if (isArray(value)) {\n            formatted += value.map(function(entry) {\n                return format('in %s() in %s:%d', (entry['function'] || \"anonymous\"), entry.file, entry.line);\n            }).join('\\n');\n        } else {\n            formatted += 'not provided';\n        }\n    } else {\n        try {\n            formatted += serialize(value);\n        } catch (e) {\n            try {\n                formatted += serialize(value.toString());\n            } catch (e2) {\n                formatted += '(unserializable value)';\n            }\n        }\n    }\n    return formatted;\n}\nexports.formatTestValue = formatTestValue;\n\n/**\n * Retrieves the value of an Object foreign property using a dot-separated\n * path string.\n *\n * Beware, this function doesn't handle object key names containing a dot.\n *\n * @param  Object  obj   The source object\n * @param  String  path  Dot separated path, eg. \"x.y.z\"\n */\nfunction getPropertyPath(obj, path) {\n    \"use strict\";\n    if (!isObject(obj) || !isString(path)) {\n        return undefined;\n    }\n    var value = obj;\n    path.split('.').forEach(function(property) {\n        if (typeof value === \"object\" && property in value) {\n            value = value[property];\n        } else {\n            value = undefined;\n        }\n    });\n    return value;\n}\nexports.getPropertyPath = getPropertyPath;\n\n/**\n * Indents a string.\n *\n * @param  String  string\n * @param  Number  nchars\n * @param  String  prefix\n * @return String\n */\nfunction indent(string, nchars, prefix) {\n    \"use strict\";\n    return string.split('\\n').map(function(line) {\n        return (prefix || '') + new Array(nchars).join(' ') + line;\n    }).join('\\n');\n}\nexports.indent = indent;\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nfunction inherits(ctor, superCtor) {\n    \"use strict\";\n    ctor.super_ = ctor.__super__ = superCtor;\n    ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n            value: ctor,\n            enumerable: false,\n            writable: true,\n            configurable: true\n        }\n    });\n}\nexports.inherits = inherits;\n\n/**\n * Checks if value is a javascript Array\n *\n * @param  mixed  value\n * @return Boolean\n */\nfunction isArray(value) {\n    \"use strict\";\n    return Array.isArray(value) || isType(value, \"array\");\n}\nexports.isArray = isArray;\n\n/**\n * Checks if passed argument is an instance of Capser object.\n *\n * @param  mixed  value\n * @return Boolean\n */\nfunction isCasperObject(value) {\n    \"use strict\";\n    return value instanceof require('casper').Casper;\n}\nexports.isCasperObject = isCasperObject;\n\n/**\n * Checks if value is a phantomjs clipRect-compatible object\n *\n * @param  mixed  value\n * @return Boolean\n */\nfunction isClipRect(value) {\n    \"use strict\";\n    return isType(value, \"cliprect\") || (\n        isObject(value) &&\n        isNumber(value.top) && isNumber(value.left) &&\n        isNumber(value.width) && isNumber(value.height)\n    );\n}\nexports.isClipRect = isClipRect;\n\n/**\n * Checks that the subject is falsy.\n *\n * @param  Mixed  subject  Test subject\n * @return Boolean\n */\nfunction isFalsy(subject) {\n    \"use strict\";\n    /*eslint eqeqeq:0*/\n    return !subject;\n}\nexports.isFalsy = isFalsy;\n/**\n * Checks if value is a javascript Function\n *\n * @param  mixed  value\n * @return Boolean\n */\nfunction isFunction(value) {\n    \"use strict\";\n    return isType(value, \"function\");\n}\nexports.isFunction = isFunction;\n\n/**\n * Checks if passed resource involves an HTTP url.\n *\n * @param  Object  resource The PhantomJS HTTP resource object\n * @return Boolean\n */\nfunction isHTTPResource(resource) {\n    \"use strict\";\n    return isObject(resource) && /^http/i.test(resource.url);\n}\nexports.isHTTPResource = isHTTPResource;\n\n/**\n * Checks if a file is apparently javascript compatible (.js or .coffee).\n *\n * @param  String  file  Path to the file to test\n * @return Boolean\n */\nfunction isJsFile(file) {\n    \"use strict\";\n    var ext = fileExt(file);\n    var valid = Object.keys(require.extensions).map(function(val) {\n        return val.replace(/^\\./, '');\n    }).filter(function(ext) {\n        return ext === 'js' || ext === 'coffee';\n    });\n    return isString(ext, \"string\") && valid.indexOf(ext) !== -1;\n}\nexports.isJsFile = isJsFile;\n\n/**\n * Checks if the provided value is null\n *\n * @return Boolean\n */\nfunction isNull(value) {\n    \"use strict\";\n    return isType(value, \"null\");\n}\nexports.isNull = isNull;\n\n/**\n * Checks if value is a javascript Number\n *\n * @param  mixed  value\n * @return Boolean\n */\nfunction isNumber(value) {\n    \"use strict\";\n    return isType(value, \"number\");\n}\nexports.isNumber = isNumber;\n\n/**\n * Checks if value is a javascript Object\n *\n * @param  mixed  value\n * @return Boolean\n */\nfunction isObject(value) {\n    \"use strict\";\n    var objectTypes = [\"array\", \"object\", \"qtruntimeobject\"];\n    return objectTypes.indexOf(betterTypeOf(value)) >= 0;\n}\nexports.isObject = isObject;\n\n/**\n * Checks if value is a RegExp\n *\n * @param  mixed  value\n * @return Boolean\n */\nfunction isRegExp(value) {\n    \"use strict\";\n    return isType(value, \"regexp\");\n}\nexports.isRegExp = isRegExp;\n\n/**\n * Checks if value is a javascript String\n *\n * @param  mixed  value\n * @return Boolean\n */\nfunction isString(value) {\n    \"use strict\";\n    return isType(value, \"string\");\n}\nexports.isString = isString;\n\n/**\n * Checks that the subject is truthy.\n *\n * @param  Mixed  subject  Test subject\n * @return Boolean\n */\nfunction isTruthy(subject) {\n    \"use strict\";\n    /*eslint eqeqeq:0*/\n    return !!subject;\n}\nexports.isTruthy = isTruthy;\n\n/**\n * Shorthands for checking if a value is of the given type. Can check for\n * arrays.\n *\n * @param  mixed   what      The value to check\n * @param  String  typeName  The type name (\"string\", \"number\", \"function\", etc.)\n * @return Boolean\n */\nfunction isType(what, typeName) {\n    \"use strict\";\n    if (typeof typeName !== \"string\" || !typeName) {\n        throw new CasperError(\"You must pass isType() a typeName string\");\n    }\n    return betterTypeOf(what).toLowerCase() === typeName.toLowerCase();\n}\nexports.isType = isType;\n\n/**\n * Checks if the provided value is undefined\n *\n * @return Boolean\n */\nfunction isUndefined(value) {\n    \"use strict\";\n    return isType(value, \"undefined\");\n}\nexports.isUndefined = isUndefined;\n\n/**\n * Checks if value is a valid selector Object.\n *\n * @param  mixed  value\n * @return Boolean\n */\nfunction isValidSelector(value) {\n    \"use strict\";\n    if (isString(value)) {\n        try {\n            // phantomjs env has a working document object, let's use it\n            document.querySelector(value);\n        } catch(e) {\n            if ('name' in e && (e.name === 'SYNTAX_ERR' || e.name === 'SyntaxError')) {\n                return false;\n            }\n        }\n        return true;\n    } else if (isObject(value)) {\n        if (!value.hasOwnProperty('type')) {\n            return false;\n        }\n        if (!value.hasOwnProperty('path')) {\n            return false;\n        }\n        if (['css', 'xpath'].indexOf(value.type) === -1) {\n            return false;\n        }\n        return true;\n    }\n    return false;\n}\nexports.isValidSelector = isValidSelector;\n\n/**\n * Checks if the provided var is a WebPage instance\n *\n * @param  mixed  what\n * @return Boolean\n */\nfunction isWebPage(what) {\n    \"use strict\";\n    return betterTypeOf(what) === \"qtruntimeobject\" && what.objectName === 'WebPage';\n}\nexports.isWebPage = isWebPage;\n\n\n\nfunction isPlainObject(obj) {\n    \"use strict\";\n    if (!obj || typeof(obj) !== 'object')\n        return false;\n    var type = Object.prototype.toString.call(obj).match(/^\\[object\\s(.*)\\]$/)[1].toLowerCase();\n    return (type === 'object');\n}\n\n/**\n * Object recursive merging utility for use in the SlimerJS environment\n *\n * @param  Object  origin  the origin object\n * @param  Object  add     the object to merge data into origin\n * @param  Object  opts    optional options to be passed in\n * @return Object\n */\nfunction mergeObjectsInGecko(origin, add, opts) {\n    \"use strict\";\n\n    var options = opts || {},\n        keepReferences = options.keepReferences;\n\n    for (var p in add) {\n        if (isPlainObject(add[p])) {\n            if (isPlainObject(origin[p])) {\n                origin[p] = mergeObjects(origin[p], add[p]);\n            } else {\n                origin[p] = keepReferences ? add[p] : clone(add[p]);\n            }\n        } else {\n            // if a property is only a getter, we could have a Javascript error\n            // in strict mode \"TypeError: setting a property that has only a getter\"\n            // when setting the value to the new object (gecko 25+).\n            // To avoid it, let's define the property on the new object, do not set\n            // directly the value\n            var prop = Object.getOwnPropertyDescriptor(add, p);\n            if (prop.get && !prop.set) {\n                Object.defineProperty(origin, p, prop);\n            }\n            else {\n                origin[p] = add[p];\n            }\n        }\n    }\n    return origin;\n}\n\n/**\n * Object recursive merging utility.\n *\n * @param  Object  origin  the origin object\n * @param  Object  add     the object to merge data into origin\n * @param  Object  opts    optional options to be passed in\n * @return Object\n */\nfunction mergeObjects(origin, add, opts) {\n    \"use strict\";\n\n    var options = opts || {},\n        keepReferences = options.keepReferences;\n\n    if (phantom.casperEngine === 'slimerjs') {\n        // Because of an issue in the module system of slimerjs (security membranes?)\n        // constructor is undefined.\n        // let's use an other algorithm\n        return mergeObjectsInGecko(origin, add, options);\n    }\n\n    for (var p in add) {\n        if (add[p] && add[p].constructor === Object) {\n            if (origin[p] && origin[p].constructor === Object) {\n                origin[p] = mergeObjects(origin[p], add[p]);\n            } else {\n                origin[p] = keepReferences ? add[p] : clone(add[p]);\n            }\n        } else {\n            origin[p] = add[p];\n        }\n    }\n    return origin;\n}\nexports.mergeObjects = mergeObjects;\n\n/**\n * Converts milliseconds to seconds and rounds the results to 3 digits accuracy.\n *\n * @param  Number  milliseconds\n * @return Number  seconds\n */\nfunction ms2seconds(milliseconds) {\n    \"use strict\";\n    return Math.round(milliseconds / 1000 * 1000) / 1000;\n}\nexports.ms2seconds = ms2seconds;\n\n/**\n * Creates an (SG|X)ML node element.\n *\n * @param  String  name        The node name\n * @param  Object  attributes  Optional attributes\n * @return HTMLElement\n */\nfunction node(name, attributes) {\n    \"use strict\";\n    var _node   = document.createElementNS('', name);\n    for (var attrName in attributes) {\n        var value = attributes[attrName];\n        if (attributes.hasOwnProperty(attrName) && isString(attrName)) {\n            _node.setAttribute(attrName, value);\n        }\n    }\n    return _node;\n}\nexports.node = node;\n\n/**\n * Maps an object to an array made from its values.\n *\n * @param  Object  obj\n * @return Array\n */\nfunction objectValues(obj) {\n    \"use strict\";\n    return Object.keys(obj).map(function(arg) {\n        return obj[arg];\n    });\n}\nexports.objectValues = objectValues;\n\n/**\n * Prepares a string for xpath expression with the condition [text()=].\n *\n * @param  String  string\n * @return String\n */\nfunction quoteXPathAttributeString(string) {\n    \"use strict\";\n    if (/\"/g.test(string)) {\n        return 'concat(\"' + string.toString().replace(/\"/g, '\", \\'\"\\', \"') + '\")';\n    } else {\n        return '\"' + string + '\"';\n    }\n}\nexports.quoteXPathAttributeString = quoteXPathAttributeString;\n\n/**\n * Serializes a value using JSON.\n *\n * @param  Mixed  value\n * @return String\n */\nfunction serialize(value, indent) {\n    \"use strict\";\n    if (isArray(value)) {\n        value = value.map(function _map(prop) {\n            return isFunction(prop) ? prop.toString().replace(/\\s{2,}/, '') : prop;\n        });\n    }\n    return JSON.stringify(value, null, indent);\n}\nexports.serialize = serialize;\n\n/**\n * Returns unique values from an array.\n *\n * Note: ugly code is ugly, but efficient: http://jsperf.com/array-unique2/8\n *\n * @param  Array  array\n * @return Array\n */\nfunction unique(array) {\n    \"use strict\";\n    var o = {},\n        r = [];\n    for (var i = 0, len = array.length; i !== len; i++) {\n        var d = array[i];\n        if (o[d] !== 1) {\n            o[d] = 1;\n            r[r.length] = d;\n        }\n    }\n    return r;\n}\nexports.unique = unique;\n\n/**\n * Convert a version object to a string.\n *\n * @param  Mixed version  a version string or object\n */\nfunction versionToString(version) {\n    if (isObject(version)) {\n        try {\n            return [version.major, version.minor, version.patch].join('.');\n        } catch (e) {}\n    }\n    return version;\n}\nexports.versionToString = versionToString;\n\n/**\n * Compare two version numbers represented as strings.\n *\n * @param  String  a  Version a\n * @param  String  b  Version b\n * @return Number\n */\nfunction cmpVersion(a, b) {\n    \"use strict\";\n    var i, cmp, len, re = /(\\.0)+[^\\.]*$/;\n    a = versionToString(a);\n    b = versionToString(b);\n    a = (a + '').replace(re, '').split('.');\n    b = (b + '').replace(re, '').split('.');\n    len = Math.min(a.length, b.length);\n    for (i = 0; i < len; i++) {\n        cmp = parseInt(a[i], 10) - parseInt(b[i], 10);\n        if (cmp !== 0) {\n            return cmp;\n        }\n    }\n    return a.length - b.length;\n}\nexports.cmpVersion = cmpVersion;\n\n/**\n * Checks if a version number string is greater or equals another.\n *\n * @param  String  a  Version a\n * @param  String  b  Version b\n * @return Boolean\n */\nfunction gteVersion(a, b) {\n    \"use strict\";\n    return cmpVersion(a, b) >= 0;\n}\nexports.gteVersion = gteVersion;\n\n/**\n * Checks if a version number string is less than another.\n *\n * @param  String  a  Version a\n * @param  String  b  Version b\n * @return Boolean\n */\nfunction ltVersion(a, b) {\n    \"use strict\";\n    return cmpVersion(a, b) < 0;\n}\nexports.ltVersion = ltVersion;\n\n/**\n * Checks if the engine matches a specifier.\n *\n * A match specifier is an object of the form:\n * {\n *     name: 'casperjs' | 'phantomjs',\n *     version: {\n *         min:   Object,\n *         max:   Object\n *     },\n *     message: String\n * }\n *\n * Minimal and maximal versions to be matched are determined using\n * utils.cmpVersion.\n *\n * @param  Mixed    matchSpec  a single match specifier object or\n *                             an Array of match specifier objects\n * @return Boolean\n */\nfunction matchEngine(matchSpec) {\n    if (Array !== matchSpec.constructor) {\n        matchSpec = [matchSpec];\n    }\n    var idx;\n    var len = matchSpec.length;\n\n    var engineName = phantom.casperEngine;\n    var engineVersion = phantom.version;\n\n    for (idx = 0; idx < len; ++idx) {\n        var match = matchSpec[idx];\n        var version = match.version;\n        var min = version && version.min;\n        var max = version && version.max;\n        if ('*' === min) {\n            min = null;\n        }\n        if ('*' === max) {\n            max = null;\n        }\n        if (match.name === engineName &&\n            (!min || gteVersion(engineVersion, min)) &&\n            (!max || !ltVersion(max, engineVersion))\n        ) {\n            return match;\n        }\n    }\n    return false;\n}\nexports.matchEngine = matchEngine;\n","/home/travis/build/npmtest/node-npmtest-casperjs/node_modules/casperjs/modules/xunit.js":"/*!\n * Casper is a navigation utility for PhantomJS.\n *\n * Documentation: http://casperjs.org/\n * Repository:    http://github.com/casperjs/casperjs\n *\n * Copyright (c) 2011-2012 Nicolas Perriault\n *\n * Part of source code is Copyright Joyent, Inc. and other Node contributors.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n/*global CasperError, console, exports, phantom, patchRequire, require:true*/\n\nvar require = patchRequire(require);\nvar utils = require('utils');\nvar fs = require('fs');\nvar TestSuiteResult = require('tester').TestSuiteResult;\n\n/**\n * Generates a value for 'classname' attribute of the JUnit XML report.\n *\n * Uses the (relative) file name of the current casper script without file\n * extension as classname.\n *\n * @param  String  classname\n * @return String\n */\nfunction generateClassName(classname) {\n    \"use strict\";\n    classname = (classname || \"\").replace(phantom.casperPath, \"\").trim();\n    var script = classname || phantom.casperScript || \"\";\n    if (script.indexOf(fs.workingDirectory) === 0) {\n        script = script.substring(fs.workingDirectory.length + 1);\n    }\n    if (script.indexOf('/') === 0) {\n        script = script.substring(1, script.length);\n    }\n    if (~script.indexOf('.')) {\n        script = script.substring(0, script.lastIndexOf('.'));\n    }\n    // If we have trimmed our string down to nothing, default to script name\n    if (!script && phantom.casperScript) {\n        script = phantom.casperScript;\n    }\n    return script || \"unknown\";\n}\n\n/**\n * Creates a XUnit instance\n *\n * @return XUnit\n */\nexports.create = function create() {\n    \"use strict\";\n    return new XUnitExporter();\n};\n\n/**\n * JUnit XML (xUnit) exporter for test results.\n *\n */\nfunction XUnitExporter() {\n    \"use strict\";\n\n    this.setupDocument();\n\n    // Initialize state\n    this.results = undefined;\n    this.rendered = false;\n}\nexports.XUnitExporter = XUnitExporter;\n\n/**\n * Retrieves generated XML object - actually an HTMLElement.\n *\n * @return HTMLElement\n */\nXUnitExporter.prototype.getXML = function getXML() {\n    \"use strict\";\n\n    var self = this;\n\n    if (!(this.results instanceof TestSuiteResult)) {\n        throw new CasperError('Results not set, cannot get XML.');\n    }\n    this.results.forEach(function(result) {\n        var suiteNode = utils.node('testsuite', {\n            name: result.name,\n            tests: result.assertions,\n            failures: result.failed,\n            errors: result.crashed,\n            time: utils.ms2seconds(result.calculateDuration()),\n            timestamp: (new Date()).toISOString(),\n            'package': generateClassName(result.file)\n        });\n        // successful test cases\n        result.passes.forEach(function(success) {\n            var testCase = utils.node('testcase', {\n                name: success.message || success.standard,\n                classname: generateClassName(success.file),\n                time: utils.ms2seconds(~~success.time)\n            });\n            suiteNode.appendChild(testCase);\n        });\n        // failed test cases\n        result.failures.forEach(function(failure) {\n            var testCase = utils.node('testcase', {\n                name: failure.name || failure.message || failure.standard,\n                classname: generateClassName(failure.file),\n                time: utils.ms2seconds(~~failure.time)\n            });\n            var failureNode = utils.node('failure', {\n                type: failure.type || \"failure\"\n            });\n            failureNode.appendChild(self._xmlDocument.createCDATASection(failure.message || \"no message left\"));\n            if (failure.values && failure.values.error instanceof Error) {\n                var errorNode = utils.node('error', {\n                    type: utils.betterTypeOf(failure.values.error)\n                });\n                errorNode.appendChild(self._xmlDocument.createCDATASection(failure.values.error.stack));\n                testCase.appendChild(errorNode);\n            }\n            testCase.appendChild(failureNode);\n            suiteNode.appendChild(testCase);\n        });\n        // errors\n        result.errors.forEach(function(error) {\n            var errorNode = utils.node('error', {\n                type: error.name\n            });\n            errorNode.appendChild(self._xmlDocument.createCDATASection(error.stack ? error.stack : error.message));\n            suiteNode.appendChild(errorNode);\n        });\n        // warnings\n        var warningNode = utils.node('system-out');\n        warningNode.appendChild(self._xmlDocument.createCDATASection(result.warnings.join('\\n')));\n        suiteNode.appendChild(warningNode);\n        this._xml.appendChild(suiteNode);\n    }.bind(this));\n\n    this._xml.setAttribute('time', utils.ms2seconds(this.results.calculateDuration()));\n\n    this.rendered = true;\n\n    return this._xmlDocument;\n};\n\n/**\n * Retrieves generated Xunit XML\n *\n * @return string\n */\nXUnitExporter.prototype.getSerializedXML = function getSerializedXML() {\n    \"use strict\";\n    var serializer = new XMLSerializer(),\n        document;\n\n    if ( !this.rendered ) {\n        document = this.getXML();\n    }\n    return '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + serializer.serializeToString(document);\n};\n\n/**\n * Sets test results.\n *\n * @param TestSuite  results\n */\nXUnitExporter.prototype.setResults = function setResults(results) {\n    \"use strict\";\n    if (!(results instanceof TestSuiteResult)) {\n        throw new CasperError('Invalid results type.');\n    }\n    this.results = results;\n\n    // New results let's re-initialize\n    this.setupDocument();\n    this.rendered = false;\n\n    return results;\n};\n\n/**\n * Initializes the XML to an empty document\n *\n * @return void\n */\nXUnitExporter.prototype.setupDocument = function() {\n    // Note that we do NOT use a documentType here, because validating\n    // parsers try to fetch the (non-existing) DTD and fail #1528\n    this._xmlDocument = document.implementation.createDocument(\"\", \"\");\n    this._xml = this._xmlDocument.appendChild(this._xmlDocument.createElement(\"testsuites\"));\n};\n","/home/travis/build/npmtest/node-npmtest-casperjs/node_modules/casperjs/samples/bbcshots.js":"/*eslint strict:0*/\n/*global CasperError, console*/\n\n/**\n * Create a mosaic image from all headline photos on BBC homepage\n */\nvar casper = require(\"casper\").create();\nvar nbLinks = 0;\nvar currentLink = 1;\nvar images = [];\nvar buildPage, next;\n\n// helper to hide some element from remote DOM\ncasper.hide = function(selector) {\n    this.evaluate(function(selector) {\n        document.querySelector(selector).style.display = \"none\";\n    }, selector);\n};\n\ncasper.start(\"http://www.bbc.co.uk/\", function() {\n    nbLinks = this.evaluate(function() {\n        return __utils__.findAll('#promo2_carousel_items_items li').length;\n    });\n    this.echo(nbLinks + \" items founds\");\n    // hide navigation arrows\n    this.hide(\".nav_left\");\n    this.hide(\".nav_right\");\n    this.mouse.move(\"#promo2_carousel\");\n});\n\ncasper.waitUntilVisible(\".autoplay.nav_pause\", function() {\n    this.echo(\"Moving over pause button\");\n    this.mouse.move(\".autoplay.nav_pause\");\n    this.click(\".autoplay.nav_pause\");\n    this.echo(\"Clicked on pause button\");\n    this.waitUntilVisible(\".autoplay.nav_play\", function() {\n        this.echo(\"Carousel has been paused\");\n        // hide play button\n        this.hide(\".autoplay\");\n    });\n});\n\n// Capture carrousel area\nnext = function() {\n    var image;\n    image = \"bbcshot\" + currentLink + \".png\";\n    images.push(image);\n    this.echo(\"Processing image \" + currentLink);\n    this.captureSelector(image, '.carousel_viewport');\n    if (currentLink < nbLinks) {\n        this.click(\".carousel_itemList_li[rel='\" + currentLink + \"']\");\n        this.wait(1000, function() {\n            this.then(next);\n            currentLink++;\n        });\n    } else {\n        this.then(buildPage);\n    }\n};\n\n// Building resulting page and image\nbuildPage = function() {\n    var fs, pageHtml;\n    this.echo(\"Build result page\");\n    fs = require(\"fs\");\n    this.viewport(624, 400);\n    pageHtml = \"<html><body style='background:black;margin:0;padding:0'>\";\n    images.forEach(function(image) {\n        pageHtml += \"<img src='file://\" + fs.workingDirectory + \"/\" + image + \"'><br>\";\n    });\n    pageHtml += \"</body></html>\";\n    fs.write(\"result.html\", pageHtml, 'w');\n    this.thenOpen(\"file://\" + fs.workingDirectory + \"/result.html\", function() {\n        this.echo(\"Resulting image saved to result.png\");\n        this.capture(\"result.png\");\n    });\n};\n\ncasper.then(next);\n\ncasper.run();\n","/home/travis/build/npmtest/node-npmtest-casperjs/node_modules/casperjs/samples/cliplay.js":"/*eslint strict:0*/\n/*global CasperError, console, phantom, require*/\n\nvar casper = require(\"casper\").create();\nvar dump = require(\"utils\").dump;\n\n// removing default options passed by the Python executable\ncasper.cli.drop(\"cli\");\ncasper.cli.drop(\"casper-path\");\n\nif (casper.cli.args.length === 0 && Object.keys(casper.cli.options).length === 0) {\n    casper\n        .echo(\"Pass some args and options to see how they are handled by CasperJS\")\n        .exit(1)\n    ;\n}\n\ncasper.echo(\"Casper CLI passed args:\");\ndump(casper.cli.args);\n\ncasper.echo(\"Casper CLI passed options:\");\ndump(casper.cli.options);\n\ncasper.echo(\"Casper CLI passed RAW args:\");\ndump(casper.cli.raw.args);\n\ncasper.echo(\"Casper CLI passed RAW options:\");\ndump(casper.cli.raw.options);\n\ncasper.exit();\n","/home/travis/build/npmtest/node-npmtest-casperjs/node_modules/casperjs/samples/customevents.js":"/*eslint strict:0*/\n/*global CasperError, console, phantom, require*/\n\nvar casper = require(\"casper\").create();\n\n// listening to a custom event\ncasper.on(\"google.loaded\", function(title) {\n    this.echo(\"Google page title is \" + title);\n});\n\ncasper.start(\"http://google.com/\", function() {\n    // emitting a custom event\n    this.emit(\"google.loaded\", this.getTitle());\n});\n\ncasper.run();\n","/home/travis/build/npmtest/node-npmtest-casperjs/node_modules/casperjs/samples/customlogging.js":"/*eslint strict:0*/\n/*global CasperError, console, phantom, require*/\n\n/**\n * A basic custom logging implementation. The idea is to (extremely) verbosely\n * log every received resource.\n */\nvar casper = require(\"casper\").create({\n    verbose: true,\n    logLevel: \"verbose\"\n});\n\n/**\n * Every time a resource is received, a new log entry is added to the stack at\n * the 'verbose' level.\n */\ncasper.on('resource.received', function(resource) {\n    var infos = [];\n    var props = [\n        \"url\",\n        \"status\",\n        \"statusText\",\n        \"redirectURL\",\n        \"bodySize\"\n    ];\n    props.forEach(function(prop) {\n        infos.push(resource[prop]);\n    });\n    resource.headers.forEach(function(header) {\n        infos.push(\"[\" + header.name + \": \" + header.value + \"]\");\n    });\n    this.log(infos.join(\", \"), \"verbose\");\n});\n\n// add a new 'verbose' logging level at the lowest priority\ncasper.logLevels = [\"verbose\"].concat(casper.logLevels);\n\n// test our new logger with google\ncasper.start(\"http://www.google.com/\").run(function() {\n    this.exit();\n});\n","/home/travis/build/npmtest/node-npmtest-casperjs/node_modules/casperjs/samples/download.js":"/*eslint strict:0*/\n/*global CasperError, console, phantom, require*/\n\n/**\n * download the google logo image onto the local filesystem\n */\n\nvar casper = require(\"casper\").create();\n\ncasper.start(\"http://www.google.fr/\", function() {\n    this.download(\"http://www.google.fr/images/srpr/logo3w.png\", \"logo.png\");\n});\n\ncasper.run();\n","/home/travis/build/npmtest/node-npmtest-casperjs/node_modules/casperjs/samples/dynamic.js":"/*eslint strict:0*/\n/*global CasperError, console, phantom, require*/\n\nvar casper = require(\"casper\").create({\n    verbose: true\n});\n\n// The base links array\nvar links = [\n    \"http://google.com/\",\n    \"http://yahoo.com/\",\n    \"http://bing.com/\"\n];\n\n// If we don't set a limit, it could go on forever\nvar upTo = ~~casper.cli.get(0) || 10;\n\nvar currentLink = 0;\n\n// Get the links, and add them to the links array\n// (It could be done all in one step, but it is intentionally splitted)\nfunction addLinks(link) {\n    this.then(function() {\n        var found = this.evaluate(searchLinks);\n        this.echo(found.length + \" links found on \" + link);\n        links = links.concat(found);\n    });\n}\n\n// Fetch all <a> elements from the page and return\n// the ones which contains a href starting with 'http://'\nfunction searchLinks() {\n    var filter, map;\n    filter = Array.prototype.filter;\n    map = Array.prototype.map;\n    return map.call(filter.call(document.querySelectorAll(\"a\"), function(a) {\n        return (/^http:\\/\\/.*/i).test(a.getAttribute(\"href\"));\n    }), function(a) {\n        return a.getAttribute(\"href\");\n    });\n}\n\n// Just opens the page and prints the title\nfunction start(link) {\n    this.start(link, function() {\n        this.echo('Page title: ' + this.getTitle());\n    });\n}\n\n// As long as it has a next link, and is under the maximum limit, will keep running\nfunction check() {\n    if (links[currentLink] && currentLink < upTo) {\n        this.echo('--- Link ' + currentLink + ' ---');\n        start.call(this, links[currentLink]);\n        addLinks.call(this, links[currentLink]);\n        currentLink++;\n        this.run(check);\n    } else {\n        this.echo(\"All done.\");\n        this.exit();\n    }\n}\n\ncasper.start().then(function() {\n    this.echo(\"Starting\");\n});\n\ncasper.run(check);\n","/home/travis/build/npmtest/node-npmtest-casperjs/node_modules/casperjs/samples/each.js":"/*eslint strict:0*/\n/*global CasperError, console, phantom, require*/\n\nvar casper = require(\"casper\").create();\n\nvar links = [\n    \"http://google.com/\",\n    \"http://yahoo.com/\",\n    \"http://bing.com/\"\n];\n\ncasper.start();\n\ncasper.each(links, function(self, link) {\n    this.thenOpen(link, function() {\n        this.echo(this.getTitle() + \" - \" + link);\n    });\n});\n\ncasper.run();\n","/home/travis/build/npmtest/node-npmtest-casperjs/node_modules/casperjs/samples/extends.js":"/*eslint strict:0*/\n/*global CasperError, console, phantom, require*/\n\nvar casper = require(\"casper\").create({\n    loadImages: false,\n    logLevel:   \"debug\",\n    verbose:    true\n});\n\nvar links = {\n    \"http://edition.cnn.com/\": 0,\n    \"http://www.nytimes.com/\": 0,\n    \"http://www.bbc.co.uk/\": 0,\n    \"http://www.guardian.co.uk/\": 0\n};\n\nvar fantomas = Object.create(casper);\n\nfantomas.countLinks = function() {\n    return this.evaluate(function() {\n        return __utils__.findAll(\"a[href]\").length;\n    });\n};\n\nfantomas.renderJSON = function(what) {\n    this.echo(JSON.stringify(what, null, \"  \"));\n};\n\nfantomas.start();\n\nObject.keys(links).forEach(function(url) {\n    fantomas.thenOpen(url, function() {\n        links[url] = this.countLinks();\n    });\n});\n\nfantomas.run(function() {\n    this.renderJSON(links);\n    this.exit();\n});\n","/home/travis/build/npmtest/node-npmtest-casperjs/node_modules/casperjs/samples/googlelinks.js":"/*eslint strict:0*/\n/*global CasperError, console, phantom, require*/\n\nvar links = [];\nvar casper = require(\"casper\").create();\n\nfunction getLinks() {\n    var links = document.querySelectorAll(\"h3.r a\");\n    return Array.prototype.map.call(links, function(e) {\n        try {\n            // google handles redirects hrefs to some script of theirs\n            return (/url\\?q=(.*)&sa=U/).exec(e.getAttribute(\"href\"))[1];\n        } catch (err) {\n            return e.getAttribute(\"href\");\n        }\n    });\n}\n\ncasper.start(\"http://google.fr/\", function() {\n    // search for 'casperjs' from google form\n    this.fill('form[action=\"/search\"]', { q: \"casperjs\" }, true);\n});\n\ncasper.then(function() {\n    // aggregate results for the 'casperjs' search\n    links = this.evaluate(getLinks);\n    // now search for 'phantomjs' by fillin the form again\n    this.fill('form[action=\"/search\"]', { q: \"phantomjs\" }, true);\n});\n\ncasper.then(function() {\n    // aggregate results for the 'phantomjs' search\n    links = links.concat(this.evaluate(getLinks));\n});\n\ncasper.run(function() {\n    // echo results in some pretty fashion\n    this.echo(links.length + \" links found:\");\n    this.echo(\" - \" + links.join(\"\\n - \"));\n    this.exit();\n});\n","/home/travis/build/npmtest/node-npmtest-casperjs/node_modules/casperjs/samples/googlematch.js":"/*eslint strict:0*/\n/*global CasperError, console, phantom, require*/\n\n/**\n * Takes provided terms passed as arguments and query google for the number of\n * estimated results each have.\n *\n * Usage:\n *     $ casperjs googlematch.js nicolas chuck borris\n *     nicolas: 69600000\n *     chuck:   49500000\n *     borris:  2370000\n *     winner is \"nicolas\" with 69600000 results\n */\n\nvar casper = require(\"casper\").create({\n    verbose: true\n});\n\ncasper.fetchScore = function() {\n    return this.evaluate(function() {\n        var result = __utils__.findOne('#resultStats').innerText;\n        return parseInt(/Environ ([0-9\\s]{1,}).*/.exec(result)[1].replace(/\\s/g, ''), 10);\n    });\n};\n\nvar terms = casper.cli.args;\n\nif (terms.length < 2) {\n    casper\n        .echo(\"Usage: $ casperjs googlematch.js term1 term2 [term3]...\")\n        .exit(1)\n    ;\n}\n\nvar scores = [];\n\ncasper.echo(\"Let the match begin between \\\"\" + (terms.join('\", \"')) + \"\\\"!\");\n\ncasper.start(\"http://google.fr/\");\n\ncasper.each(terms, function(casper, term, i) {\n    this.echo('Fetching score for ' + term);\n    this.then(function() {\n        this.fill('form[action=\"/search\"]', {q: '\"' + term + '\"'}, true);\n    });\n    this.then(function() {\n        var score = this.fetchScore();\n        scores.push({\n            term: term,\n            score: score\n        });\n        this.echo(term + ': ' + score);\n    });\n});\n\ncasper.run(function() {\n    if (scores.length === 0) {\n        this.echo(\"No result found\");\n    } else {\n        scores.sort(function(a, b) {\n            return b.score - a.score;\n        });\n        var winner = scores[0];\n        this.echo(\"Winner is \\\"\" + winner.term + \"\\\" with \" + winner.score + \" results\");\n    }\n    this.exit();\n});\n","/home/travis/build/npmtest/node-npmtest-casperjs/node_modules/casperjs/samples/googlepagination.js":"/*eslint strict:0*/\n/*global CasperError, console, phantom, require*/\n\n/**\n * Capture multiple pages of google search results\n *\n * Usage: $ casperjs googlepagination.coffee my search terms\n *\n * (all arguments will be used as the query)\n */\n\nvar casper = require(\"casper\").create({\n    waitTimeout: 1000,\n    pageSettings: {\n        userAgent: \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:23.0) Gecko/20130404 Firefox/23.0\"\n    }\n});\nvar currentPage = 1;\n\nif (casper.cli.args.length === 0) {\n    casper\n        .echo(\"Usage: $ casperjs googlepagination.js my search terms\")\n        .exit(1)\n    ;\n}\n\nvar terminate = function() {\n    this.echo(\"that's all, folks.\").exit();\n};\n\nvar processPage = function() {\n    var url;\n    this.echo(\"capturing page \" + currentPage);\n    this.capture(\"google-results-p\" + currentPage + \".png\");\n\n    // don't go too far down the rabbit hole\n    if (currentPage >= 5 || !this.exists(\"#pnnext\")) {\n        return terminate.call(casper);\n    }\n\n    currentPage++;\n    this.echo(\"requesting next page: \" + currentPage);\n    url = this.getCurrentUrl();\n    this.thenClick(\"#pnnext\").then(function() {\n        this.waitFor(function() {\n            return url !== this.getCurrentUrl();\n        }, processPage, terminate);\n    });\n};\n\ncasper.start(\"http://google.fr/\", function() {\n    this.fill('form[action=\"/search\"]', {\n        q: casper.cli.args.join(\" \")\n    }, true);\n});\n\ncasper.waitForSelector('#pnnext', processPage, terminate);\n\ncasper.run();\n","/home/travis/build/npmtest/node-npmtest-casperjs/node_modules/casperjs/samples/googletesting.js":"/*eslint strict:0*/\n/*global CasperError, casper, console, phantom, require*/\n/**\n * Google sample testing.\n *\n * Usage:\n *\n *     $ casperjs test googletesting.js\n */\ncasper.test.begin('Google search retrieves 10 or more results', 5, function suite(test) {\n    casper.start(\"http://www.google.fr/\", function() {\n        test.assertTitle(\"Google\", \"google homepage title is the one expected\");\n        test.assertExists('form[action=\"/search\"]', \"main form is found\");\n        this.fill('form[action=\"/search\"]', {\n            q: \"casperjs\"\n        }, true);\n    });\n\n    casper.then(function() {\n        test.assertTitle(\"casperjs - Recherche Google\", \"google title is ok\");\n        test.assertUrlMatch(/q=casperjs/, \"search term has been submitted\");\n        test.assertEval(function() {\n            return __utils__.findAll(\"h3.r\").length >= 10;\n        }, \"google search for \\\"casperjs\\\" retrieves 10 or more results\");\n    });\n\n    casper.run(function() {\n        test.done();\n    });\n});\n\ncasper.test.begin('Casperjs.org is first ranked', 1, function suite(test) {\n    casper.start(\"http://www.google.fr/\", function() {\n        this.fill('form[action=\"/search\"]', {\n            q: \"casperjs\"\n        }, true);\n    });\n\n    casper.then(function() {\n        test.assertSelectorContains(\".g\", \"casperjs.org\", \"casperjs.org is first ranked\");\n    });\n\n    casper.run(function() {\n        test.done();\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-casperjs/node_modules/casperjs/samples/logcolor.js":"/*eslint strict:0*/\n/*global CasperError, console, phantom, require*/\n\nvar casper = require(\"casper\").create({\n    verbose: true,\n    logLevel: \"debug\"\n});\n\ncasper.log(\"this is a debug message\", \"debug\");\ncasper.log(\"and an informative one\", \"info\");\ncasper.log(\"and a warning\", \"warning\");\ncasper.log(\"and an error\", \"error\");\n\ncasper.exit();\n","/home/travis/build/npmtest/node-npmtest-casperjs/node_modules/casperjs/samples/metaextract.js":"/*eslint strict:0*/\n/*global CasperError, console, phantom, require*/\n\nvar casper = require(\"casper\").create();\nvar url = casper.cli.get(0);\nvar metas = [];\n\nif (!url) {\n    casper\n        .echo(\"Usage: $ casperjs metaextract.js <url>\")\n        .exit(1)\n    ;\n}\n\ncasper.start(url, function() {\n    metas = this.evaluate(function() {\n        var metas = [];\n        [].forEach.call(document.querySelectorAll(\"meta\"), function(elem) {\n            var meta = {};\n            [].slice.call(elem.attributes).forEach(function(attr) {\n                meta[attr.name] = attr.value;\n            });\n            metas.push(meta);\n        });\n        return metas;\n    });\n});\n\ncasper.run(function() {\n    require(\"utils\").dump(metas);\n    this.exit();\n});\n","/home/travis/build/npmtest/node-npmtest-casperjs/node_modules/casperjs/samples/multirun.js":"/*eslint strict:0*/\n/*global CasperError, console, phantom, require*/\n\nvar casper = require(\"casper\").create({\n    verbose: true\n});\n\nvar countLinks = function() {\n    return document.querySelectorAll('a').length;\n};\n\nvar suites = [\n    function() {\n        this.echo(\"Suite 1\");\n        this.start(\"http://google.com/\", function() {\n            this.echo(\"Page title: \" + (this.getTitle()));\n        });\n        this.then(function() {\n            this.echo((this.evaluate(countLinks)) + \" links\");\n        });\n    }, function() {\n        this.echo(\"Suite 2\");\n        this.start(\"http://yahoo.com/\", function() {\n            this.echo(\"Page title: \" + (this.getTitle()));\n        });\n        this.then(function() {\n            this.echo((this.evaluate(countLinks)) + \" links\");\n        });\n    }, function() {\n        this.echo(\"Suite 3\");\n        this.start(\"http://bing.com/\", function() {\n            this.echo(\"Page title: \" + (this.getTitle()));\n        });\n        this.then(function() {\n            this.echo((this.evaluate(countLinks)) + \" links\");\n        });\n    }\n];\n\ncasper.start();\n\ncasper.then(function() {\n    this.echo(\"Starting\");\n});\n\nvar currentSuite = 0;\n\nvar check = function() {\n    if (suites[currentSuite]) {\n        suites[currentSuite].call(this);\n        currentSuite++;\n        casper.run(check);\n    } else {\n        this.echo(\"All done.\");\n        this.exit();\n    }\n};\n\ncasper.run(check);\n","/home/travis/build/npmtest/node-npmtest-casperjs/node_modules/casperjs/samples/screenshot.js":"/*eslint strict:0*/\n/*global CasperError, console, phantom, require*/\n\n/**\n * This script will capture a screenshot of a twitter account page\n * Usage: $ casperjs screenshot.js <twitter-account> <filename.[jpg|png|pdf]>\n */\n\nvar casper = require(\"casper\").create({\n    viewportSize: {\n        width: 1024,\n        height: 768\n    }\n});\n\nvar twitterAccount = casper.cli.get(0);\nvar filename       = casper.cli.get(1);\n\nif (!twitterAccount || !filename || !/\\.(png|jpg|pdf)$/i.test(filename)) {\n    casper\n        .echo(\"Usage: $ casperjs screenshot.js <twitter-account> <filename.[jpg|png|pdf]>\")\n        .exit(1)\n    ;\n}\n\ncasper.start(\"https://twitter.com/\" + twitterAccount, function() {\n    this.waitForSelector(\".stream-container\", (function() {\n        this.captureSelector(filename, \"html\");\n        this.echo(\"Saved screenshot of \" + (this.getCurrentUrl()) + \" to \" + filename);\n    }), (function() {\n        this.die(\"Timeout reached. Fail whale?\");\n        this.exit();\n    }), 12000);\n});\n\ncasper.run();\n","/home/travis/build/npmtest/node-npmtest-casperjs/node_modules/casperjs/samples/statushandlers.js":"/*eslint strict:0*/\n/*global CasperError, console, phantom, require*/\n\n/**\n * This script will add a custom HTTP status code handler, here for 404 pages.\n */\n\nvar casper = require(\"casper\").create({\n    httpStatusHandlers: {\n        404: function(self, resource) {\n            this.echo(\"Resource at \" + resource.url + \" not found (404)\", \"COMMENT\");\n        }\n    },\n    verbose: true\n});\n\ncasper.start(\"http://www.google.com/plop\", function() {\n    this.echo(\"Done.\");\n    this.exit();\n});\n\ncasper.run();\n","/home/travis/build/npmtest/node-npmtest-casperjs/node_modules/casperjs/samples/steptimeout.js":"/*eslint strict:0*/\n/*global CasperError, console, phantom, require*/\n\nvar failed = [];\nvar start = null;\nvar links = [\n    \"http://google.com/'\",\n    \"http://akei.com/'\",\n    \"http://lemonde.fr/'\",\n    \"http://liberation.fr/'\",\n    \"http://cdiscount.fr/\"\n];\n\nvar casper = require(\"casper\").create({\n    onStepTimeout: function() {\n        failed.push(this.requestUrl);\n        this.test.fail(this.requestUrl + \" loads in less than \" + timeout + \"ms.\");\n    }\n});\n\ncasper.on(\"load.finished\", function() {\n    this.echo(this.requestUrl + \" loaded in \" + (new Date() - start) + \"ms\", \"PARAMETER\");\n});\n\nvar timeout = ~~casper.cli.get(0);\ncasper.options.stepTimeout = timeout > 0 ? timeout : 1000;\n\ncasper.echo(\"Testing with timeout=\" + casper.options.stepTimeout + \"ms, please be patient.\");\n\ncasper.start();\n\ncasper.each(links, function(casper, link) {\n    this.then(function() {\n        this.test.comment(\"Loading \" + link);\n        start = new Date();\n        this.open(link);\n    });\n    this.then(function() {\n        var message = this.requestUrl + \" loads in less than \" + timeout + \"ms.\";\n        if (failed.indexOf(this.requestUrl) === -1) {\n            this.test.pass(message);\n        }\n    });\n});\n\ncasper.run(function() {\n    this.test.renderResults(true);\n});\n","/home/travis/build/npmtest/node-npmtest-casperjs/node_modules/casperjs/samples/timeout.js":"/*eslint strict:0*/\n/*global CasperError, console, phantom, require*/\n\n/**\n * Just a silly game.\n *\n * $ casperjs samples/timeout.js 500\n * Will google.com load in less than 500ms?\n * NOPE.\n *\n * $ casperjs samples/timeout.js 1000\n * Will google.com load in less than 1000ms?\n * NOPE.\n *\n * $ casperjs samples/timeout.js 1500\n * Will google.com load in less than 1500ms?\n * NOPE.\n *\n * $ casperjs samples/timeout.js 2000\n * Will google.com load in less than 2000ms?\n * YES!\n */\n\nvar casper = require(\"casper\").create({\n    onTimeout: function() {\n        this\n            .echo(\"NOPE.\", \"RED_BAR\")\n            .exit()\n        ;\n    }\n});\n\nvar timeout = ~~casper.cli.get(0);\n\nif (timeout < 1) {\n    casper\n        .echo(\"You must pass a valid timeout value\")\n        .exit(1)\n    ;\n}\n\ncasper.echo(\"Will google.com load in less than \" + timeout + \"ms?\");\ncasper.options.timeout = timeout;\n\ncasper.start(\"http://www.google.com/\", function() {\n    this.echo(\"YES!\", \"GREEN_BAR\");\n    this.exit();\n});\n\ncasper.run();\n","/home/travis/build/npmtest/node-npmtest-casperjs/node_modules/casperjs/samples/translate.js":"/*eslint strict:0*/\n/*global CasperError, console, phantom, require*/\n\n/**\n * Translation using the Google Translate Service.\n *\n * Usage:\n *\n *     $ casperjs translate.js --target=fr \"hello world\"\n *     bonjour tout le monde\n */\nvar system = require('system'),\n    casper = require('casper').create(),\n    format = require('utils').format,\n    source = casper.cli.get('source') || 'auto',\n    target = casper.cli.get('target'),\n    text   = casper.cli.get(0),\n    result;\n\nif (!target) {\n    casper.warn('The --target option is mandatory.').exit(1);\n}\n\ncasper.start(format('http://translate.google.com/#%s/%s/%s', source, target, text), function() {\n    this.fill('form#gt-form', {text: text});\n}).waitForSelector('span.hps', function() {\n    this.echo(this.fetchText(\"#result_box\"));\n});\n\ncasper.run();\n"}